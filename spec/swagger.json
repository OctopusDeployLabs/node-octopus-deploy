{
  "swagger": "2.0",
  "info": {
    "title": "Octopus Server API",
    "version": "2021.2.1387"
  },
  "host": "localhost",
  "basePath": "/api",
  "schemes": ["http"],
  "paths": {
    "/accounts": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get a list of AccountResources",
        "description": "Lists accounts in the supplied Octopus Deploy Space in pages. The results will be sorted alphabetically by name.",
        "operationId": "indexAccounts",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_AccountResource resource returned",
            "schema": {
              "$ref": "#/definitions/AccountResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Create a AccountResource",
        "description": "Creates a new account.",
        "operationId": "createAccount",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AccountResource Created",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/accounts/all": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get a list of Accounts",
        "description": "Lists all of the accounts in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllAccounts",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountResource"
              }
            }
          }
        }
      }
    },
    "/accounts/azureenvironments": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the Azure Environments provided by the SDK",
        "operationId": "getAzureEnvironmentsList",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IReadOnlyCollection_of_AzureEnvironmentResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureEnvironmentResource"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get an Account by ID",
        "operationId": "getAccountById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Account to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Accounts"],
        "summary": "Modify a AccountResource by ID",
        "description": "Modifies an existing account.",
        "operationId": "updateAccount",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the AccountResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountResource Modified",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Accounts"],
        "summary": "Delete a AccountResource by ID",
        "description": "Deletes an existing account.",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the AccountResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/accounts/{id}/pk": {
      "get": {
        "tags": ["Accounts"],
        "description": "Downloads the public key portion of the account's associated certificate, if present.",
        "operationId": "getAccountPublicKeyDownload",
        "produces": ["application/x-x509-ca-cert"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/accounts/{id}/resourceGroups": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the Resource Groups associated with an Azure account.",
        "operationId": "getAzureResourceGroupsList",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureResourceGroupResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureResourceGroupResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/accounts/{id}/storageAccounts": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the storage accounts associated with an Azure account.",
        "operationId": "getAzureStorageAccountsList",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ICollection_of_AzureStorageAccountResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureStorageAccountResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/accounts/{id}/usages": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists projects and deployments which are using an account.",
        "operationId": "getAccountUsageList",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AccountUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/AccountUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/accounts/{id}/websites": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the websites associated with an Azure account.",
        "operationId": "getAzureWebSitesList",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ICollection_of_AzureWebSiteResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/accounts/{id}/{resourceGroupName}/websites/{webSiteName}/slots": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the slots associated with an Azure Web Site.",
        "operationId": "getAzureWebSitesSlotList",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceGroupName",
            "description": "Azure resource group name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "webSiteName",
            "description": "Website name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ICollection_of_AzureWebSiteSlotResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteSlotResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided.\r\nNo resourceGroupName parameter was provided.\r\nNo webSiteName parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get a list of AccountResources",
        "description": "Lists accounts in the supplied Octopus Deploy Space in pages. The results will be sorted alphabetically by name.",
        "operationId": "indexAccounts_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_AccountResource resource returned",
            "schema": {
              "$ref": "#/definitions/AccountResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Create a AccountResource",
        "description": "Creates a new account.",
        "operationId": "createAccount_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AccountResource Created",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts/all": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get a list of Accounts",
        "description": "Lists all of the accounts in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllAccounts_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/accounts/{id}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get an Account by ID",
        "operationId": "getAccountById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Account to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Accounts"],
        "summary": "Modify a AccountResource by ID",
        "description": "Modifies an existing account.",
        "operationId": "updateAccount_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the AccountResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountResource Modified",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Accounts"],
        "summary": "Delete a AccountResource by ID",
        "description": "Deletes an existing account.",
        "operationId": "deleteAccount_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the AccountResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts/{id}/pk": {
      "get": {
        "tags": ["Accounts"],
        "description": "Downloads the public key portion of the account's associated certificate, if present.",
        "operationId": "getAccountPublicKeyDownload_Spaces",
        "produces": ["application/x-x509-ca-cert"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts/{id}/resourceGroups": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the Resource Groups associated with an Azure account.",
        "operationId": "getAzureResourceGroupsList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureResourceGroupResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureResourceGroupResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts/{id}/storageAccounts": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the storage accounts associated with an Azure account.",
        "operationId": "getAzureStorageAccountsList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ICollection_of_AzureStorageAccountResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureStorageAccountResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts/{id}/usages": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists projects and deployments which are using an account.",
        "operationId": "getAccountUsageList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AccountUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/AccountUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts/{id}/websites": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the websites associated with an Azure account.",
        "operationId": "getAzureWebSitesList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ICollection_of_AzureWebSiteResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/accounts/{id}/{resourceGroupName}/websites/{webSiteName}/slots": {
      "get": {
        "tags": ["Accounts"],
        "description": "Lists the slots associated with an Azure Web Site.",
        "operationId": "getAzureWebSitesSlotList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceGroupName",
            "description": "Azure resource group name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "webSiteName",
            "description": "Website name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ICollection_of_AzureWebSiteSlotResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteSlotResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure Service Principal Account.\r\nNo id parameter was provided.\r\nNo resourceGroupName parameter was provided.\r\nNo webSiteName parameter was provided."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates": {
      "get": {
        "tags": ["ActionTemplates"],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists all of the action templates in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexActionTemplates",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ActionTemplates"],
        "summary": "Create a ActionTemplateResource",
        "description": "Creates a new action template.",
        "operationId": "createActionTemplate",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource Created",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo Feed Id was specified.\r\nNo request body was supplied.\r\nThe following Feed Ids cannot be found: {ids}"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/all": {
      "get": {
        "tags": ["ActionTemplates"],
        "summary": "Get all Action Templates",
        "description": "Lists the all of the action templates in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "getAllActionTemplates",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateResource"
              }
            }
          }
        }
      }
    },
    "/actiontemplates/categories": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Lists action template categories.",
        "operationId": "getActionTemplateCategories",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ActionTemplateCategoryResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateCategoryResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/search": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Lists all available action templates including built-in, custom and community contributed step templates.",
        "operationId": "getActionTemplatesSearch",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ActionTemplateSearchResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateSearchResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/{id}": {
      "get": {
        "tags": ["ActionTemplates"],
        "summary": "Get an Action Template by ID",
        "operationId": "getActionTemplateById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ActionTemplate to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ActionTemplates"],
        "summary": "Modify a ActionTemplateResource by ID",
        "description": "Modifies an existing action template.",
        "operationId": "updateActionTemplate",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ActionTemplateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource Modified",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nOnly custom templates can be directly updated\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ActionTemplates"],
        "summary": "Delete a ActionTemplateResource by ID",
        "description": "Deletes an existing action template and all its versions.",
        "operationId": "deleteActionTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ActionTemplateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/{id}/actionsUpdate": {
      "post": {
        "tags": ["ActionTemplates"],
        "description": "Updates deployment actions to specific version of action template",
        "operationId": "createActionTemplateActions",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionUpdateResultResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionUpdateResultResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nRequest failed. Please check Details property for more information.\r\nValidation failed."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/{id}/logo": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets the logo associated with the latest version of action template.",
        "operationId": "getActionTemplateLogo",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ActionTemplates"],
        "description": "Updates the logo associated with the latest version of the action template.",
        "operationId": "createActionTemplateLogo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["ActionTemplates"],
        "description": "Updates the logo associated with the latest version of the action template.",
        "operationId": "updateActionTemplateLogo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/{id}/usage": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets a list of all steps/deployment processes that use a given action template.",
        "operationId": "getActionTemplateUsage",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateUsageResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateUsageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/{id}/versions": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets specific version of action template.",
        "operationId": "getActionTemplateVersion",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned\r\nActionTemplateResource[] resource returned"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/{id}/versions/{version}": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets specific version of action template.",
        "operationId": "getActionTemplateVersion_1",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Template version to get",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned\r\nActionTemplateResource[] resource returned"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/actiontemplates/{typeOrId}/versions/{version}/logo": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets the logo associated with specific version of the action template.",
        "operationId": "getActionTemplateLogoVersion",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "typeOrId",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Version of the action type logo",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No typeOrId parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates": {
      "get": {
        "tags": ["ActionTemplates"],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists all of the action templates in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexActionTemplates_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ActionTemplates"],
        "summary": "Create a ActionTemplateResource",
        "description": "Creates a new action template.",
        "operationId": "createActionTemplate_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource Created",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo Feed Id was specified.\r\nNo request body was supplied.\r\nThe following Feed Ids cannot be found: {ids}"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/all": {
      "get": {
        "tags": ["ActionTemplates"],
        "summary": "Get all Action Templates",
        "description": "Lists the all of the action templates in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "getAllActionTemplates_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/actiontemplates/categories": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Lists action template categories.",
        "operationId": "getActionTemplateCategories_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ActionTemplateCategoryResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateCategoryResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/search": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Lists all available action templates including built-in, custom and community contributed step templates.",
        "operationId": "getActionTemplatesSearch_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ActionTemplateSearchResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateSearchResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/{id}": {
      "get": {
        "tags": ["ActionTemplates"],
        "summary": "Get an Action Template by ID",
        "operationId": "getActionTemplateById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ActionTemplate to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ActionTemplates"],
        "summary": "Modify a ActionTemplateResource by ID",
        "description": "Modifies an existing action template.",
        "operationId": "updateActionTemplate_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ActionTemplateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource Modified",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nOnly custom templates can be directly updated\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ActionTemplates"],
        "summary": "Delete a ActionTemplateResource by ID",
        "description": "Deletes an existing action template and all its versions.",
        "operationId": "deleteActionTemplate_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ActionTemplateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/{id}/actionsUpdate": {
      "post": {
        "tags": ["ActionTemplates"],
        "description": "Updates deployment actions to specific version of action template",
        "operationId": "createActionTemplateActions_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionUpdateResultResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionUpdateResultResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nRequest failed. Please check Details property for more information.\r\nValidation failed."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/{id}/logo": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets the logo associated with the latest version of action template.",
        "operationId": "getActionTemplateLogo_Spaces",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ActionTemplates"],
        "description": "Updates the logo associated with the latest version of the action template.",
        "operationId": "createActionTemplateLogo_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["ActionTemplates"],
        "description": "Updates the logo associated with the latest version of the action template.",
        "operationId": "updateActionTemplateLogo_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/{id}/usage": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets a list of all steps/deployment processes that use a given action template.",
        "operationId": "getActionTemplateUsage_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateUsageResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateUsageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/{id}/versions": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets specific version of action template.",
        "operationId": "getActionTemplateVersion_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned\r\nActionTemplateResource[] resource returned"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/{id}/versions/{version}": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets specific version of action template.",
        "operationId": "getActionTemplateVersion_Spaces_1",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Template version to get",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned\r\nActionTemplateResource[] resource returned"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/actiontemplates/{typeOrId}/versions/{version}/logo": {
      "get": {
        "tags": ["ActionTemplates"],
        "description": "Gets the logo associated with specific version of the action template.",
        "operationId": "getActionTemplateLogoVersion_Spaces",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "typeOrId",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Version of the action type logo",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No typeOrId parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/{userId}/apikeys": {
      "post": {
        "tags": ["ApiKeys"],
        "description": "Generates a new API key for the specified user. The API key returned in the result must be saved by the caller, as it cannot be retrieved subsequently from the Octopus server.",
        "operationId": "createApiKey",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKeyCreatedResource resource returned",
            "schema": {
              "$ref": "#/definitions/ApiKeyCreatedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied.\r\nNo userId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "get": {
        "tags": ["ApiKeys"],
        "summary": "Get a list of ApiKeyResources",
        "description": "Lists all API keys for a user, returning the most recent results first.",
        "operationId": "indexApiKeys",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ApiKeyResource resource returned",
            "schema": {
              "$ref": "#/definitions/ApiKeyResourceCollection"
            }
          },
          "400": {
            "description": "No userId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/{userId}/apikeys/{id}": {
      "get": {
        "tags": ["ApiKeys"],
        "summary": "Get a ApiKeyResource by ID",
        "description": "Gets a API key by ID.",
        "operationId": "getApiKeyById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ApiKeyResource to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the User that owns the ApiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ApiKeyResource by ID",
            "schema": {
              "$ref": "#/definitions/ApiKeyResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo userId parameter was provided.\r\nThis ApiKey does not belong to the specified user."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ApiKeys"],
        "summary": "Delete a ApiKeyResource by ID",
        "description": "Revokes an existing API key.",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ApiKeyResource to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the User that owns the ApiKey to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nNo userId parameter was provided.\r\nThis ApiKey does not belong to the specified user.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/artifacts": {
      "get": {
        "tags": ["Artifacts"],
        "summary": "Get a list of ArtifactResources",
        "description": "Lists all of the artifacts in the supplied Octopus Deploy Space, from all releases. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexArtifacts",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ArtifactResource resource returned",
            "schema": {
              "$ref": "#/definitions/ArtifactResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Artifacts"],
        "summary": "Create a ArtifactResource",
        "description": "Creates a new artifact.",
        "operationId": "createArtifact",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ArtifactResource Created",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/artifacts/{id}": {
      "get": {
        "tags": ["Artifacts"],
        "summary": "Get an Artifact by ID",
        "operationId": "getArtifactById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Artifact to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Artifacts"],
        "summary": "Modify a ArtifactResource by ID",
        "description": "Modifies an existing artifact.",
        "operationId": "updateArtifact",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ArtifactResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ArtifactResource Modified",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Artifacts"],
        "summary": "Delete a ArtifactResource by ID",
        "description": "Deletes an existing artifact.",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ArtifactResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/artifacts/{id}/content": {
      "get": {
        "tags": ["Artifacts"],
        "description": "Gets the content associated with an artifact.",
        "operationId": "getArtifactContent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Artifacts"],
        "description": "Sets the content associated with an artifact.",
        "operationId": "updateArtifactContent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/artifacts": {
      "get": {
        "tags": ["Artifacts"],
        "summary": "Get a list of ArtifactResources",
        "description": "Lists all of the artifacts in the supplied Octopus Deploy Space, from all releases. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexArtifacts_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ArtifactResource resource returned",
            "schema": {
              "$ref": "#/definitions/ArtifactResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Artifacts"],
        "summary": "Create a ArtifactResource",
        "description": "Creates a new artifact.",
        "operationId": "createArtifact_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ArtifactResource Created",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/artifacts/{id}": {
      "get": {
        "tags": ["Artifacts"],
        "summary": "Get an Artifact by ID",
        "operationId": "getArtifactById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Artifact to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Artifacts"],
        "summary": "Modify a ArtifactResource by ID",
        "description": "Modifies an existing artifact.",
        "operationId": "updateArtifact_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ArtifactResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ArtifactResource Modified",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Artifacts"],
        "summary": "Delete a ArtifactResource by ID",
        "description": "Deletes an existing artifact.",
        "operationId": "deleteArtifact_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ArtifactResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/artifacts/{id}/content": {
      "get": {
        "tags": ["Artifacts"],
        "description": "Gets the content associated with an artifact.",
        "operationId": "getArtifactContent_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Artifacts"],
        "description": "Sets the content associated with an artifact.",
        "operationId": "updateArtifactContent_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/authentication": {
      "get": {
        "tags": ["Authentication"],
        "description": "Provides the details of the enabled authentication providers.",
        "operationId": "getAuthentication",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "AuthenticationResource resource returned",
            "schema": {
              "$ref": "#/definitions/AuthenticationResource"
            }
          }
        }
      }
    },
    "/authentication/checklogininitiated": {
      "post": {
        "tags": ["Authentication"],
        "description": "Given a URL query string, determines whether an external server (.e.g Okta) has initiated login and if so the provider's name",
        "operationId": "createLoginInitiated",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "LoginInitiatedResource resource returned",
            "schema": {
              "$ref": "#/definitions/LoginInitiatedResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        }
      }
    },
    "/azuredevopsissuetracker/connectivitycheck": {
      "post": {
        "tags": ["AzureDevOps"],
        "operationId": "createAzureDevOpsConnectivityCheck",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ConnectivityCheckResponse resource returned",
            "schema": {
              "$ref": "#/definitions/ConnectivityCheckResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/build-information": {
      "get": {
        "tags": ["BuildInformation"],
        "description": "Retrieves a list of build information records describing the vcs information for a given package",
        "operationId": "getBuildInformationList",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["BuildInformation"],
        "description": "Updates a specific build information record describing the vcs information for a given package",
        "operationId": "createBuildInformation",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata\r\nThe package ID contains invalid characters. Examples of valid package IDs include 'MyPackage' and 'MyPackage.Sample'.\r\nThe version is invalid. Please supply a valid semver version number."
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/build-information/bulk": {
      "delete": {
        "tags": ["BuildInformation"],
        "description": "Bulk deletes specific build information records",
        "operationId": "deleteBuildInformationDeleteByIds",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/build-information/{id}": {
      "get": {
        "tags": ["BuildInformation"],
        "description": "Retrieves a specific build information record describing the vcs information for a given package",
        "operationId": "getBuildInformation",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["BuildInformation"],
        "description": "Deletes a specific build information record",
        "operationId": "deleteBuildInformationDeleteById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the build information resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/build-information": {
      "get": {
        "tags": ["BuildInformation"],
        "description": "Retrieves a list of build information records describing the vcs information for a given package",
        "operationId": "getBuildInformationList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["BuildInformation"],
        "description": "Updates a specific build information record describing the vcs information for a given package",
        "operationId": "createBuildInformation_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata\r\nThe package ID contains invalid characters. Examples of valid package IDs include 'MyPackage' and 'MyPackage.Sample'.\r\nThe version is invalid. Please supply a valid semver version number."
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/build-information/bulk": {
      "delete": {
        "tags": ["BuildInformation"],
        "description": "Bulk deletes specific build information records",
        "operationId": "deleteBuildInformationDeleteByIds_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/build-information/{id}": {
      "get": {
        "tags": ["BuildInformation"],
        "description": "Retrieves a specific build information record describing the vcs information for a given package",
        "operationId": "getBuildInformation_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["BuildInformation"],
        "description": "Deletes a specific build information record",
        "operationId": "deleteBuildInformationDeleteById_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the build information resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/certificate-global": {
      "get": {
        "tags": ["CertificateConfiguration"],
        "description": "Returns the server thumbprint used to identify this Octopus Server to any Tentacles when executing a deployment. Deprecated.",
        "operationId": "getCertificateConfigurationByIdLegacy",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "CertificateConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/configuration/certificates": {
      "get": {
        "tags": ["CertificateConfiguration"],
        "summary": "Get a list of CertificateConfigurationResources",
        "description": "Lists all of the X509 certificates in the current Octopus Deploy installation.",
        "operationId": "indexCertificateConfigurations",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_CertificateConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateConfigurationResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/configuration/certificates/{id}": {
      "get": {
        "tags": ["CertificateConfiguration"],
        "summary": "Get a Certificate Configuration by ID",
        "operationId": "getCertificateConfigurationById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the CertificateConfiguration to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateConfigurationResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/configuration/certificates/{id}/public-cer": {
      "get": {
        "tags": ["CertificateConfiguration"],
        "description": "Downloads the public portion of the certificate in .cer format",
        "operationId": "getCertificatePublicCerDownload",
        "produces": ["application/x-x509-ca-cert"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates": {
      "get": {
        "tags": ["Certificates"],
        "summary": "Get a list of CertificateResources",
        "description": "Lists X.509 certificates managed by Octopus",
        "operationId": "indexCertificates",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Certificates"],
        "summary": "Create a CertificateResource",
        "description": "Adds a new certificate",
        "operationId": "createCertificate",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CertificateResource Created",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/all": {
      "get": {
        "tags": ["Certificates"],
        "summary": "Get a list of Certificates",
        "description": "Lists X.509 certificates managed by Octopus.",
        "operationId": "listAllCertificates",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Certificate IDs to retrieve Certificates for. Example: Certificate-101,Certificate-201",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertificateResource"
              }
            }
          }
        }
      }
    },
    "/certificates/generate": {
      "post": {
        "tags": ["Certificates"],
        "description": "Creates a self signed certificate",
        "operationId": "createCertificateCreateSelfSigned",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nPlease supply either the common name or organization."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/{id}": {
      "get": {
        "tags": ["Certificates"],
        "description": "Get a certificate by ID or thumbprint",
        "operationId": "getCertificateByIdOrThumbprint",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID or thumbprint of certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Certificates"],
        "summary": "Modify a CertificateResource by ID",
        "description": "Modifies an existing certificate",
        "operationId": "updateCertificate",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the CertificateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource Modified",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Certificates"],
        "summary": "Delete a CertificateResource by ID",
        "description": "Permanently deletes a certificate",
        "operationId": "deleteCertificate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the CertificateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/{id}/archive": {
      "post": {
        "tags": ["Certificates"],
        "description": "Archives a certificate",
        "operationId": "createCertificateArchive",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/{id}/export": {
      "get": {
        "tags": ["Certificates"],
        "description": "Exports the certificate",
        "operationId": "getCertificateExport",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid format option.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/{id}/replace": {
      "post": {
        "tags": ["Certificates"],
        "description": "Replaces a certificate with another",
        "operationId": "createCertificateReplace",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Certificate Invalid.\r\nNo Certificate Data was provided.\r\nNo id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/{id}/unarchive": {
      "post": {
        "tags": ["Certificates"],
        "description": "Un-archives a certificate",
        "operationId": "createCertificateUnArchive",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided.\r\nYou cannot unarchive a certificate that has been replaced."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/certificates/{id}/usages": {
      "get": {
        "tags": ["Certificates"],
        "description": "Get the usages of a certificate",
        "operationId": "getCertificateUsage",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates": {
      "get": {
        "tags": ["Certificates"],
        "summary": "Get a list of CertificateResources",
        "description": "Lists X.509 certificates managed by Octopus",
        "operationId": "indexCertificates_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Certificates"],
        "summary": "Create a CertificateResource",
        "description": "Adds a new certificate",
        "operationId": "createCertificate_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CertificateResource Created",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates/all": {
      "get": {
        "tags": ["Certificates"],
        "summary": "Get a list of Certificates",
        "description": "Lists X.509 certificates managed by Octopus.",
        "operationId": "listAllCertificates_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Certificate IDs to retrieve Certificates for. Example: Certificate-101,Certificate-201",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertificateResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/certificates/generate": {
      "post": {
        "tags": ["Certificates"],
        "description": "Creates a self signed certificate",
        "operationId": "createCertificateCreateSelfSigned_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nPlease supply either the common name or organization."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates/{id}": {
      "get": {
        "tags": ["Certificates"],
        "description": "Get a certificate by ID or thumbprint",
        "operationId": "getCertificateByIdOrThumbprint_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID or thumbprint of certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Certificates"],
        "summary": "Modify a CertificateResource by ID",
        "description": "Modifies an existing certificate",
        "operationId": "updateCertificate_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the CertificateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource Modified",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Certificates"],
        "summary": "Delete a CertificateResource by ID",
        "description": "Permanently deletes a certificate",
        "operationId": "deleteCertificate_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the CertificateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates/{id}/archive": {
      "post": {
        "tags": ["Certificates"],
        "description": "Archives a certificate",
        "operationId": "createCertificateArchive_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates/{id}/export": {
      "get": {
        "tags": ["Certificates"],
        "description": "Exports the certificate",
        "operationId": "getCertificateExport_Spaces",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid format option.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates/{id}/replace": {
      "post": {
        "tags": ["Certificates"],
        "description": "Replaces a certificate with another",
        "operationId": "createCertificateReplace_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Certificate Invalid.\r\nNo Certificate Data was provided.\r\nNo id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates/{id}/unarchive": {
      "post": {
        "tags": ["Certificates"],
        "description": "Un-archives a certificate",
        "operationId": "createCertificateUnArchive_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided.\r\nYou cannot unarchive a certificate that has been replaced."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/certificates/{id}/usages": {
      "get": {
        "tags": ["Certificates"],
        "description": "Get the usages of a certificate",
        "operationId": "getCertificateUsage_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/channels": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space, from all projects, sorted by name.",
        "operationId": "indexChannels",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ChannelResource resource returned",
            "schema": {
              "$ref": "#/definitions/ChannelResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Channels"],
        "summary": "Create a ChannelResource",
        "description": "Creates a new channel",
        "operationId": "createChannel",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ChannelResource Created",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/channels/all": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of Channels",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllChannels",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Channel IDs to retrieve Channels for. Example: Channel-101,Channel-201",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelResource"
              }
            }
          },
          "304": {
            "description": "Channels Not Modified"
          }
        }
      }
    },
    "/channels/rule-test": {
      "get": {
        "tags": ["Channels"],
        "description": "Perform channel version rule test against provided package version",
        "operationId": "getVersionRuleTest",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Channels"],
        "description": "Perform channel version rule test against provided package version",
        "operationId": "createVersionRuleTest",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/channels/{id}": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a Channel by ID",
        "operationId": "getChannelById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Channel to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Channels"],
        "summary": "Modify a ChannelResource by ID",
        "description": "Updates an existing channel",
        "operationId": "updateChannel",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ChannelResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ChannelResource Modified",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Channels"],
        "summary": "Delete a ChannelResource by ID",
        "description": "Deletes an existing channel.",
        "operationId": "deleteChannel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ChannelResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThe channel you are about to remove is used by '{action.Name}' step.\r\nThis resource is read-only and cannot be deleted.\r\nYou cannot delete the default channel.\r\nYou cannot delete the only remaining channel"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/channels/{id}/releases": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of ReleaseResources for the given ChannelResource",
        "description": "Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.",
        "operationId": "indexChannelReleases",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Channel",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/channels": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of ChannelResources for the given ProjectResource",
        "description": "Lists all the channels for the given project",
        "operationId": "indexProjectChannels",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChannelResourceCollection"
            }
          },
          "304": {
            "description": "Channels Not Modified"
          }
        }
      }
    },
    "/{baseSpaceId}/channels": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space, from all projects, sorted by name.",
        "operationId": "indexChannels_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ChannelResource resource returned",
            "schema": {
              "$ref": "#/definitions/ChannelResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Channels"],
        "summary": "Create a ChannelResource",
        "description": "Creates a new channel",
        "operationId": "createChannel_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ChannelResource Created",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/channels/all": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of Channels",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllChannels_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Channel IDs to retrieve Channels for. Example: Channel-101,Channel-201",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelResource"
              }
            }
          },
          "304": {
            "description": "Channels Not Modified"
          }
        }
      }
    },
    "/{baseSpaceId}/channels/rule-test": {
      "get": {
        "tags": ["Channels"],
        "description": "Perform channel version rule test against provided package version",
        "operationId": "getVersionRuleTest_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Channels"],
        "description": "Perform channel version rule test against provided package version",
        "operationId": "createVersionRuleTest_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/channels/{id}": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a Channel by ID",
        "operationId": "getChannelById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Channel to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Channels"],
        "summary": "Modify a ChannelResource by ID",
        "description": "Updates an existing channel",
        "operationId": "updateChannel_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ChannelResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ChannelResource Modified",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Channels"],
        "summary": "Delete a ChannelResource by ID",
        "description": "Deletes an existing channel.",
        "operationId": "deleteChannel_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ChannelResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThe channel you are about to remove is used by '{action.Name}' step.\r\nThis resource is read-only and cannot be deleted.\r\nYou cannot delete the default channel.\r\nYou cannot delete the only remaining channel"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/channels/{id}/releases": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of ReleaseResources for the given ChannelResource",
        "description": "Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.",
        "operationId": "indexChannelReleases_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Channel",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/channels": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get a list of ChannelResources for the given ProjectResource",
        "description": "Lists all the channels for the given project",
        "operationId": "indexProjectChannels_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChannelResourceCollection"
            }
          },
          "304": {
            "description": "Channels Not Modified"
          }
        }
      }
    },
    "/cloudtemplate/{id}/metadata": {
      "post": {
        "tags": ["CloudTemplate"],
        "description": "Provides parameter metadata for a cloud (AWS etc) resource template",
        "operationId": "createCloudTemplateMetadata",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CloudTemplateMetadata resource returned",
            "schema": {
              "$ref": "#/definitions/CloudTemplateMetadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/communityactiontemplates": {
      "get": {
        "tags": ["CommunityActionTemplates"],
        "summary": "Get a list of Community Action Templates",
        "operationId": "indexCommunityActionTemplates",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CommunityActionTemplateResourceCollection"
            }
          }
        }
      }
    },
    "/communityactiontemplates/{id}": {
      "get": {
        "tags": ["CommunityActionTemplates"],
        "summary": "Get a Community Action Template by ID",
        "operationId": "getCommunityActionTemplateById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the CommunityActionTemplate to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CommunityActionTemplateResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/communityactiontemplates/{id}/actiontemplate": {
      "get": {
        "tags": ["CommunityActionTemplates"],
        "description": "Gets installed version of the template.",
        "operationId": "getActionTemplateBasedOnCommunityActionTemplate",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/communityactiontemplates/{id}/actiontemplate/{spaceId}": {
      "get": {
        "tags": ["CommunityActionTemplates"],
        "description": "Gets installed version of the template.",
        "operationId": "getActionTemplateBasedOnCommunityActionTemplate_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "spaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/communityactiontemplates/{id}/installation": {
      "post": {
        "tags": ["CommunityActionTemplates"],
        "description": "Installs community step template.",
        "operationId": "createCommunityActionTemplateInstallation",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action Template already installed.\r\nAction Template is invalid.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["CommunityActionTemplates"],
        "description": "Updates installed community step template to the latest version.",
        "operationId": "updateCommunityActionTemplateInstallationPut",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action template not valid.\r\nAction template not yet installed.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/communityactiontemplates/{id}/installation/{spaceId}": {
      "post": {
        "tags": ["CommunityActionTemplates"],
        "description": "Installs community step template.",
        "operationId": "createCommunityActionTemplateInstallation_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "spaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action Template already installed.\r\nAction Template is invalid.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["CommunityActionTemplates"],
        "description": "Updates installed community step template to the latest version.",
        "operationId": "updateCommunityActionTemplateInstallationPut_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "spaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action template not valid.\r\nAction template not yet installed.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/communityactiontemplates/{id}/logo": {
      "get": {
        "tags": ["CommunityActionTemplates"],
        "description": "Gets the logo associated with the community step template.",
        "operationId": "getCommunityActionTemplateLogo",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/configuration": {
      "get": {
        "tags": ["Configuration"],
        "description": "Returns a list of configuration section settings",
        "operationId": "getConfigurationSectionList",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ConfigurationSectionMetadata resource returned",
            "schema": {
              "$ref": "#/definitions/ConfigurationSectionMetadataCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/configuration/{id}": {
      "get": {
        "tags": ["Configuration"],
        "description": "Returns a single configuration section for the given id",
        "operationId": "getConfigurationSectionMetadata",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ConfigurationSectionMetadata resource returned",
            "schema": {
              "$ref": "#/definitions/ConfigurationSectionMetadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/configuration/{id}/metadata": {
      "get": {
        "tags": ["Configuration"],
        "description": "Returns a structure that describes how to dynamically render the configuration section",
        "operationId": "getConfigurationItemMetadata",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata resource returned",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/configuration/{id}/values": {
      "get": {
        "tags": ["Configuration"],
        "description": "Returns the current configuration for a specific configuration section",
        "operationId": "getConfigurationItemValues",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Object resource returned",
            "schema": {}
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Configuration"],
        "description": "Updates the configuration values for a specific configuration section",
        "operationId": "updateConfigurationItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Object resource returned",
            "schema": {}
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/dashboardconfiguration": {
      "get": {
        "tags": ["DashboardConfigurations"],
        "description": "Returns the dashboard configuration for the current user",
        "operationId": "getDashboardConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["DashboardConfigurations"],
        "description": "Updates the dashboard configuration for the current user",
        "operationId": "updateDashboardConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/dashboardconfiguration": {
      "get": {
        "tags": ["DashboardConfigurations"],
        "description": "Returns the dashboard configuration for the current user",
        "operationId": "getDashboardConfiguration_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["DashboardConfigurations"],
        "description": "Updates the dashboard configuration for the current user",
        "operationId": "updateDashboardConfiguration_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/dashboard": {
      "get": {
        "tags": ["Dashboards"],
        "description": "Returns information required to render the Octopus dashboard",
        "operationId": "getDashboardView",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/dashboard/dynamic": {
      "get": {
        "tags": ["Dashboards"],
        "description": "Returns the information required to render the dynamic dashboard. Deprecated.",
        "operationId": "getDynamicDashboardView",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/dashboard": {
      "get": {
        "tags": ["Dashboards"],
        "description": "Returns information required to render the Octopus dashboard",
        "operationId": "getDashboardView_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/dashboard/dynamic": {
      "get": {
        "tags": ["Dashboards"],
        "description": "Returns the information required to render the dynamic dashboard. Deprecated.",
        "operationId": "getDynamicDashboardView_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/deploymentprocesses": {
      "get": {
        "tags": ["DeploymentProcesses"],
        "summary": "Lists all the deployment processes",
        "description": "Lists all the deployment processes in the supplied Octopus Deploy Space, sorted by Id.",
        "operationId": "listDeploymentProcesses",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A list of DeploymentProcess IDs, to limit the matching of DeploymentProcesses to those with a particular ID. Example: [\"deploymentprocess-Projects-1\", \"deploymentprocess-Projects-2\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResourceCollection"
            }
          }
        }
      }
    },
    "/deploymentprocesses/{deploymentProcessId}/template": {
      "get": {
        "tags": ["DeploymentProcesses"],
        "summary": "Gets all of the information necessary for creating or editing a release using this deployment process.",
        "operationId": "getReleaseTemplate",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "deploymentProcessId",
            "description": "The ID of the deployment process to use. Example `deploymentprocess-projects-1`",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "channel",
            "description": "The ID of the channel to use. Example `Channels-12`",
            "type": "string"
          },
          {
            "in": "query",
            "name": "releaseId",
            "description": "The ID of the release to get variables from. Example `Releases-12`",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReleaseTemplateResource"
            }
          }
        }
      }
    },
    "/deploymentprocesses/{id}": {
      "get": {
        "tags": ["DeploymentProcesses"],
        "summary": "Get a Deployment Process by ID.",
        "operationId": "getDeploymentProcessById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentProcess to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "404": {
            "description": "The deployment process ID specified doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["DeploymentProcesses"],
        "summary": "Modifies a deployment process",
        "description": "Modifies a deployment process. Only allowed for deployment processes owned by a project (cannot be used to change the deployment process owned by a release).",
        "operationId": "updateDeploymentProcessById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the deployment process to update. Example `deploymentprocess-Projects-1`",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The deployment process doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/deploymentprocesses": {
      "get": {
        "tags": ["DeploymentProcesses"],
        "summary": "Lists all the deployment processes",
        "description": "Lists all the deployment processes in the supplied Octopus Deploy Space, sorted by Id.",
        "operationId": "listDeploymentProcesses_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A list of DeploymentProcess IDs, to limit the matching of DeploymentProcesses to those with a particular ID. Example: [\"deploymentprocess-Projects-1\", \"deploymentprocess-Projects-2\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResourceCollection"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/deploymentprocesses/{deploymentProcessId}/template": {
      "get": {
        "tags": ["DeploymentProcesses"],
        "summary": "Gets all of the information necessary for creating or editing a release using this deployment process.",
        "operationId": "getReleaseTemplate_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "deploymentProcessId",
            "description": "The ID of the deployment process to use. Example `deploymentprocess-projects-1`",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "channel",
            "description": "The ID of the channel to use. Example `Channels-12`",
            "type": "string"
          },
          {
            "in": "query",
            "name": "releaseId",
            "description": "The ID of the release to get variables from. Example `Releases-12`",
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReleaseTemplateResource"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/deploymentprocesses/{id}": {
      "get": {
        "tags": ["DeploymentProcesses"],
        "summary": "Get a Deployment Process by ID.",
        "operationId": "getDeploymentProcessById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentProcess to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "404": {
            "description": "The deployment process ID specified doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["DeploymentProcesses"],
        "summary": "Modifies a deployment process",
        "description": "Modifies a deployment process. Only allowed for deployment processes owned by a project (cannot be used to change the deployment process owned by a release).",
        "operationId": "updateDeploymentProcessById_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the deployment process to update. Example `deploymentprocess-Projects-1`",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The deployment process doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": ["Deployments"],
        "summary": "Get a list of DeploymentResources",
        "description": "Lists all of the deployments in the supplied Octopus Deploy Space, from projects, releases and environments accessible by the current user. The results will be sorted from most recent to least recent deployment.",
        "operationId": "indexDeployments",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DeploymentResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Deployments"],
        "description": "Creates a new deployment.",
        "operationId": "createDeploymentCreate",
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "DeploymentResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "400": {
            "description": "Deployment creation failed.\r\nDeployment Schedule is invalid.\r\nLicense is not compliant.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/deployments/{id}": {
      "get": {
        "tags": ["Deployments"],
        "summary": "Get a Deployment by ID",
        "operationId": "getDeploymentById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Deployment to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Deployments"],
        "summary": "Delete a DeploymentResource by ID",
        "description": "Deletes a deployment.",
        "operationId": "deleteDeployment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/deployments": {
      "get": {
        "tags": ["Deployments"],
        "summary": "Get a list of DeploymentResources",
        "description": "Lists all of the deployments in the supplied Octopus Deploy Space, from projects, releases and environments accessible by the current user. The results will be sorted from most recent to least recent deployment.",
        "operationId": "indexDeployments_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DeploymentResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Deployments"],
        "description": "Creates a new deployment.",
        "operationId": "createDeploymentCreate_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "DeploymentResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "400": {
            "description": "Deployment creation failed.\r\nDeployment Schedule is invalid.\r\nLicense is not compliant.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/deployments/{id}": {
      "get": {
        "tags": ["Deployments"],
        "summary": "Get a Deployment by ID",
        "operationId": "getDeploymentById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Deployment to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Deployments"],
        "summary": "Delete a DeploymentResource by ID",
        "description": "Deletes a deployment.",
        "operationId": "deleteDeployment_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/deploymentsettings/{id}": {
      "get": {
        "tags": ["DeploymentSettings"],
        "summary": "Gets deployment settings by ID.",
        "operationId": "getDeploymentSettingsById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentSettings to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentSettingsResource"
            }
          },
          "404": {
            "description": "The deployment settings ID specified doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["DeploymentSettings"],
        "summary": "Modifies deployment settings",
        "description": "Modifies deployment settings for a project.",
        "operationId": "updateDeploymentSettingsById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the deployment settings to update. Example `deploymentsettings-Projects-1`",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentSettingsResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentSettingsResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The project ID or deployment settings don't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/deploymentsettings/{id}": {
      "get": {
        "tags": ["DeploymentSettings"],
        "summary": "Gets deployment settings by ID.",
        "operationId": "getDeploymentSettingsById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentSettings to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentSettingsResource"
            }
          },
          "404": {
            "description": "The deployment settings ID specified doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["DeploymentSettings"],
        "summary": "Modifies deployment settings",
        "description": "Modifies deployment settings for a project.",
        "operationId": "updateDeploymentSettingsById_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the deployment settings to update. Example `deploymentsettings-Projects-1`",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentSettingsResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentSettingsResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The project ID or deployment settings don't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dynamic-extensions/features/metadata": {
      "get": {
        "tags": ["DynamicExtensions"],
        "description": "Retrieves the current dynamic extensions feature metadata.",
        "operationId": "getDynamicExtensionsFeaturesMetadata",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "DynamicExtensionsFeaturesMetadataResource resource returned",
            "schema": {
              "$ref": "#/definitions/DynamicExtensionsFeaturesMetadataResource"
            }
          }
        }
      }
    },
    "/dynamic-extensions/features/values": {
      "get": {
        "tags": ["DynamicExtensions"],
        "description": "Retrieves the current dynamic extensions feature values.",
        "operationId": "getDynamicExtensionsFeaturesValues",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "DynamicExtensionsFeaturesValuesResource resource returned",
            "schema": {
              "$ref": "#/definitions/DynamicExtensionsFeaturesValuesResource"
            }
          }
        }
      },
      "put": {
        "tags": ["DynamicExtensions"],
        "description": "Modifies the current dynamic extensions feature values.",
        "operationId": "updateDynamicExtensionsFeaturesValues",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "DynamicExtensionsFeaturesValuesResource resource returned",
            "schema": {
              "$ref": "#/definitions/DynamicExtensionsFeaturesValuesResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexEnvironments",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_EnvironmentResource resource returned",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Environments"],
        "summary": "Create a EnvironmentResource",
        "description": "Creates a new environment.",
        "operationId": "createEnvironment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "EnvironmentResource Created",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments/all": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists the name and ID of all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "listAllEnvironments",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all EnvironmentResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments/sortorder": {
      "put": {
        "tags": ["Environments"],
        "description": "Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.",
        "operationId": "updateSortEnvironments",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments/summary": {
      "get": {
        "tags": ["Environments"],
        "description": "Lists all environments, including a summary of machine information",
        "operationId": "getEnvironmentsSummary",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "EnvironmentsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/EnvironmentsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments/{id}": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get an Environment by ID",
        "operationId": "getEnvironmentById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Environment to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Environments"],
        "summary": "Modify a EnvironmentResource by ID",
        "description": "Modifies an existing environment.",
        "operationId": "updateEnvironment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the EnvironmentResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentResource Modified",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Environments"],
        "summary": "Delete a EnvironmentResource by ID",
        "description": "Deletes an existing environment.",
        "operationId": "deleteEnvironment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the EnvironmentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments/{id}/machines": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get a list of DeploymentTargetResources for the given EnvironmentResource",
        "description": "Lists all of the machines that belong to the given environment.",
        "operationId": "indexEnvironmentDeploymentTargets",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DeploymentTargetResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments/{id}/metadata": {
      "get": {
        "tags": ["Environments"],
        "description": "Gets the custom settings metadata from the extensions.",
        "operationId": "getDeploymentEnvironmentSettingsMetadata",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List_of_DeploymentEnvironmentSettingsMetadata resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentEnvironmentSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/environments/{id}/singlyScopedVariableDetails": {
      "get": {
        "tags": ["Environments"],
        "description": "Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment",
        "operationId": "getVariablesScopedToEnvironment",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariablesScopedToEnvironmentResponse resource returned",
            "schema": {
              "$ref": "#/definitions/VariablesScopedToEnvironmentResponse"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexEnvironments_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_EnvironmentResource resource returned",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Environments"],
        "summary": "Create a EnvironmentResource",
        "description": "Creates a new environment.",
        "operationId": "createEnvironment_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "EnvironmentResource Created",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments/all": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists the name and ID of all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "listAllEnvironments_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all EnvironmentResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments/sortorder": {
      "put": {
        "tags": ["Environments"],
        "description": "Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.",
        "operationId": "updateSortEnvironments_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments/summary": {
      "get": {
        "tags": ["Environments"],
        "description": "Lists all environments, including a summary of machine information",
        "operationId": "getEnvironmentsSummary_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/EnvironmentsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments/{id}": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get an Environment by ID",
        "operationId": "getEnvironmentById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Environment to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Environments"],
        "summary": "Modify a EnvironmentResource by ID",
        "description": "Modifies an existing environment.",
        "operationId": "updateEnvironment_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the EnvironmentResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentResource Modified",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Environments"],
        "summary": "Delete a EnvironmentResource by ID",
        "description": "Deletes an existing environment.",
        "operationId": "deleteEnvironment_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the EnvironmentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments/{id}/machines": {
      "get": {
        "tags": ["Environments"],
        "summary": "Get a list of DeploymentTargetResources for the given EnvironmentResource",
        "description": "Lists all of the machines that belong to the given environment.",
        "operationId": "indexEnvironmentDeploymentTargets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DeploymentTargetResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments/{id}/metadata": {
      "get": {
        "tags": ["Environments"],
        "description": "Gets the custom settings metadata from the extensions.",
        "operationId": "getDeploymentEnvironmentSettingsMetadata_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List_of_DeploymentEnvironmentSettingsMetadata resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentEnvironmentSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/environments/{id}/singlyScopedVariableDetails": {
      "get": {
        "tags": ["Environments"],
        "description": "Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment",
        "operationId": "getVariablesScopedToEnvironment_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariablesScopedToEnvironmentResponse resource returned",
            "schema": {
              "$ref": "#/definitions/VariablesScopedToEnvironmentResponse"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/events": {
      "get": {
        "tags": ["Events"],
        "description": "List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.",
        "operationId": "getListEvents",
        "responses": {
          "200": {
            "description": "OK\r\nResourceCollection_of_EventResource resource returned"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/events/agents": {
      "get": {
        "tags": ["Events"],
        "description": "Lists event agents.",
        "operationId": "getListEventAgents",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_EventAgentResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventAgentResource"
              }
            }
          }
        }
      }
    },
    "/events/categories": {
      "get": {
        "tags": ["Events"],
        "description": "Lists event categories.",
        "operationId": "getListEventCategories",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_EventCategoryResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventCategoryResource"
              }
            }
          }
        }
      }
    },
    "/events/documenttypes": {
      "get": {
        "tags": ["Events"],
        "description": "Lists subscription event document types.",
        "operationId": "getListEventDocumentTypes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_DocumentTypeDocument resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentTypeDocument"
              }
            }
          }
        }
      }
    },
    "/events/groups": {
      "get": {
        "tags": ["Events"],
        "description": "Lists subscription event groups.",
        "operationId": "getListEventGroups",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_EventGroupResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventGroupResource"
              }
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": ["Events"],
        "description": "Gets a single event by ID.",
        "operationId": "getEvent",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EventResource resource returned",
            "schema": {
              "$ref": "#/definitions/EventResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/events": {
      "get": {
        "tags": ["Events"],
        "description": "List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.",
        "operationId": "getListEvents_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\r\nResourceCollection_of_EventResource resource returned"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/events/agents": {
      "get": {
        "tags": ["Events"],
        "description": "Lists event agents.",
        "operationId": "getListEventAgents_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_EventAgentResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventAgentResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/events/categories": {
      "get": {
        "tags": ["Events"],
        "description": "Lists event categories.",
        "operationId": "getListEventCategories_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_EventCategoryResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventCategoryResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/events/documenttypes": {
      "get": {
        "tags": ["Events"],
        "description": "Lists subscription event document types.",
        "operationId": "getListEventDocumentTypes_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_DocumentTypeDocument resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentTypeDocument"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/events/groups": {
      "get": {
        "tags": ["Events"],
        "description": "Lists subscription event groups.",
        "operationId": "getListEventGroups_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_EventGroupResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventGroupResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/events/{id}": {
      "get": {
        "tags": ["Events"],
        "description": "Gets a single event by ID.",
        "operationId": "getEvent_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EventResource resource returned",
            "schema": {
              "$ref": "#/definitions/EventResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/externalsecuritygroupproviders": {
      "get": {
        "tags": ["ExternalSecurityGroups"],
        "description": "Lists the authentication providers that support external group lookups.",
        "operationId": "getListProvidersThatSupportExternalSecurityGroups",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_AuthenticationProviderThatSupportsGroups resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuthenticationProviderThatSupportsGroups"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/featuresconfiguration": {
      "get": {
        "tags": ["FeaturesConfiguration"],
        "description": "Gets information about the features configuration in use by the Octopus Server",
        "operationId": "getFeaturesConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "FeaturesConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeaturesConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["FeaturesConfiguration"],
        "description": "Updates the features configuration used by the Octopus Server",
        "operationId": "updateFeaturesConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "FeaturesConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeaturesConfigurationResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/feeds": {
      "get": {
        "tags": ["Feeds"],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds used by the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "indexFeeds",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_FeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeedResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Feeds"],
        "summary": "Create a FeedResource",
        "description": "Creates a feed.",
        "operationId": "createFeed",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "FeedResource Created",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/feeds/all": {
      "get": {
        "tags": ["Feeds"],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds in the specified Octopus Deploy Space.",
        "operationId": "listAllFeeds",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all FeedResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeedResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/feeds/stats": {
      "get": {
        "tags": ["Feeds"],
        "description": "Provides statistics for the built-in package repository.",
        "operationId": "getBuiltInFeedStats",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "BuiltInFeedStatsResource resource returned",
            "schema": {
              "$ref": "#/definitions/BuiltInFeedStatsResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/feeds/{id}": {
      "get": {
        "tags": ["Feeds"],
        "summary": "Get a FeedResource by ID",
        "description": "Gets a single feed by ID.",
        "operationId": "getFeedById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the FeedResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load FeedResource by ID",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Feeds"],
        "summary": "Modify a FeedResource by ID",
        "description": "Modifies an existing feed.",
        "operationId": "updateFeed",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the FeedResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeedResource Modified",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Feeds"],
        "summary": "Delete a FeedResource by ID",
        "description": "Deletes an existing feed.",
        "operationId": "deleteFeed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the FeedResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/feeds/{id}/packages/search": {
      "get": {
        "tags": ["Feeds"],
        "description": "Searches the specified feed for packages based on the specified search term",
        "operationId": "getPackageSearch",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_PackageDescriptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageDescriptionResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/feeds/{id}/packages/versions": {
      "get": {
        "tags": ["Feeds"],
        "description": "Lists available versions of the package specified",
        "operationId": "getPackageVersionSearch",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "packageId",
            "description": "Package ID to search",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_PackageVersionResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageVersionResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds": {
      "get": {
        "tags": ["Feeds"],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds used by the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "indexFeeds_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_FeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeedResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Feeds"],
        "summary": "Create a FeedResource",
        "description": "Creates a feed.",
        "operationId": "createFeed_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "FeedResource Created",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds/all": {
      "get": {
        "tags": ["Feeds"],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds in the specified Octopus Deploy Space.",
        "operationId": "listAllFeeds_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all FeedResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeedResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds/stats": {
      "get": {
        "tags": ["Feeds"],
        "description": "Provides statistics for the built-in package repository.",
        "operationId": "getBuiltInFeedStats_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "BuiltInFeedStatsResource resource returned",
            "schema": {
              "$ref": "#/definitions/BuiltInFeedStatsResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds/{id}": {
      "get": {
        "tags": ["Feeds"],
        "summary": "Get a FeedResource by ID",
        "description": "Gets a single feed by ID.",
        "operationId": "getFeedById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the FeedResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load FeedResource by ID",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Feeds"],
        "summary": "Modify a FeedResource by ID",
        "description": "Modifies an existing feed.",
        "operationId": "updateFeed_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the FeedResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeedResource Modified",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Feeds"],
        "summary": "Delete a FeedResource by ID",
        "description": "Deletes an existing feed.",
        "operationId": "deleteFeed_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the FeedResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds/{id}/packages/search": {
      "get": {
        "tags": ["Feeds"],
        "description": "Searches the specified feed for packages based on the specified search term",
        "operationId": "getPackageSearch_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_PackageDescriptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageDescriptionResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds/{id}/packages/versions": {
      "get": {
        "tags": ["Feeds"],
        "description": "Lists available versions of the package specified",
        "operationId": "getPackageVersionSearch_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "packageId",
            "description": "Package ID to search",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_PackageVersionResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageVersionResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "tags": ["Home"],
        "description": "Returns a document describing the current Octopus Server and links to other parts of the API.",
        "operationId": "getHome",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "RootResource resource returned",
            "schema": {
              "$ref": "#/definitions/RootResource"
            }
          }
        }
      }
    },
    "/interruptions": {
      "get": {
        "tags": ["Interruptions"],
        "summary": "Get a list of InterruptionResources",
        "description": "Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexInterruptions",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_InterruptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/InterruptionResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/interruptions/{id}": {
      "get": {
        "tags": ["Interruptions"],
        "summary": "Get an Interruption by ID",
        "operationId": "getInterruptionById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Interruption to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/interruptions/{id}/responsible": {
      "put": {
        "tags": ["Interruptions"],
        "description": "Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.",
        "operationId": "updateInterruptionResponsibility",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "get": {
        "tags": ["Interruptions"],
        "description": "Gets the user that is currently responsible for this interruption.",
        "operationId": "getInterruptionResponsibility",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/interruptions/{id}/submit": {
      "post": {
        "tags": ["Interruptions"],
        "description": "Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.",
        "operationId": "createSubmitInterruption",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "InterruptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nSomeone else has taken responsibility for this interruption, and only they are allowed to submit it.\r\nThe interruption has already been submitted.\r\nThere were errors with the form.\r\nYou must take responsibility for this interruption before attempting to submit it."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/interruptions": {
      "get": {
        "tags": ["Interruptions"],
        "summary": "Get a list of InterruptionResources",
        "description": "Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexInterruptions_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_InterruptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/InterruptionResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/interruptions/{id}": {
      "get": {
        "tags": ["Interruptions"],
        "summary": "Get an Interruption by ID",
        "operationId": "getInterruptionById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Interruption to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/interruptions/{id}/responsible": {
      "put": {
        "tags": ["Interruptions"],
        "description": "Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.",
        "operationId": "updateInterruptionResponsibility_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "get": {
        "tags": ["Interruptions"],
        "description": "Gets the user that is currently responsible for this interruption.",
        "operationId": "getInterruptionResponsibility_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/interruptions/{id}/submit": {
      "post": {
        "tags": ["Interruptions"],
        "description": "Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.",
        "operationId": "createSubmitInterruption_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "InterruptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nSomeone else has taken responsibility for this interruption, and only they are allowed to submit it.\r\nThe interruption has already been submitted.\r\nThere were errors with the form.\r\nYou must take responsibility for this interruption before attempting to submit it."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/invitations": {
      "post": {
        "tags": ["Invitations"],
        "summary": "Create a InvitationResource",
        "description": "Invite a user to register.",
        "operationId": "createInvitation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The InvitationResource resource to create",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvitationResource Created",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/invitations/{id}": {
      "get": {
        "tags": ["Invitations"],
        "summary": "Get an Invitation by ID",
        "operationId": "getInvitationById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Invitation to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/users/invitations": {
      "post": {
        "tags": ["Invitations"],
        "summary": "Create a InvitationResource",
        "description": "Invite a user to register.",
        "operationId": "createInvitation_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The InvitationResource resource to create",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvitationResource Created",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/users/invitations/{id}": {
      "get": {
        "tags": ["Invitations"],
        "summary": "Get an Invitation by ID",
        "operationId": "getInvitationById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Invitation to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jiraintegration/connectivitycheck/connectapp": {
      "post": {
        "tags": ["JiraIntegration"],
        "operationId": "createJiraConnectAppConnectivityCheck",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ConnectivityCheckResponse resource returned",
            "schema": {
              "$ref": "#/definitions/ConnectivityCheckResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/jiraintegration/connectivitycheck/jira": {
      "post": {
        "tags": ["JiraIntegration"],
        "operationId": "createJiraCredentialsConnectivityCheck",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ConnectivityCheckResponse resource returned",
            "schema": {
              "$ref": "#/definitions/ConnectivityCheckResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/.well-known/acme-challenge//{token}": {
      "get": {
        "tags": ["LetsEncrypt"],
        "description": "Returns the computed HTTP challenge for a given token",
        "operationId": "getLetsEncryptHttpChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "LetsEncrypt response token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No token parameter was provided."
          }
        }
      }
    },
    "/letsencryptconfiguration": {
      "get": {
        "tags": ["LetsEncrypt"],
        "description": "Returns the current Let's Encrypt configuration",
        "operationId": "getLetsEncryptConfiguration",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["LetsEncrypt"],
        "description": "Updates the Let's Encrypt configuration used by the Octopus Server.",
        "operationId": "updateLetsEncryptConfiguration",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/libraryvariablesets": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all of the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLibraryVariableSets",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_LibraryVariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["LibraryVariableSets"],
        "summary": "Create a LibraryVariableSetResource",
        "description": "Creates a new library variable set.",
        "operationId": "createLibraryVariableSet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LibraryVariableSetResource Created",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied.\r\nVariable template '{variableTemplate.Name}' does not have drop down options set."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/libraryvariablesets/all": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllLibraryVariableSets",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all LibraryVariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LibraryVariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/libraryvariablesets/{id}": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "summary": "Get a Library Variable Set by ID",
        "operationId": "getLibraryVariableSetById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LibraryVariableSet to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["LibraryVariableSets"],
        "summary": "Modify a LibraryVariableSetResource by ID",
        "description": "Modifies an existing library variable set.",
        "operationId": "updateLibraryVariableSet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LibraryVariableSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetResource Modified",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified.\r\nVariable template '{variableTemplate.Name}' does not have drop down options set."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["LibraryVariableSets"],
        "summary": "Delete a LibraryVariableSetResource by ID",
        "description": "Deletes an existing library variable set.",
        "operationId": "deleteLibraryVariableSet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LibraryVariableSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/libraryvariablesets/{id}/usages": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "description": "Lists projects and deployments which are using an library variable set.",
        "operationId": "getLibraryVariableSetUsageList",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/libraryvariablesets": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all of the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLibraryVariableSets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_LibraryVariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["LibraryVariableSets"],
        "summary": "Create a LibraryVariableSetResource",
        "description": "Creates a new library variable set.",
        "operationId": "createLibraryVariableSet_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LibraryVariableSetResource Created",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied.\r\nVariable template '{variableTemplate.Name}' does not have drop down options set."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/libraryvariablesets/all": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllLibraryVariableSets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all LibraryVariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LibraryVariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/libraryvariablesets/{id}": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "summary": "Get a Library Variable Set by ID",
        "operationId": "getLibraryVariableSetById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LibraryVariableSet to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["LibraryVariableSets"],
        "summary": "Modify a LibraryVariableSetResource by ID",
        "description": "Modifies an existing library variable set.",
        "operationId": "updateLibraryVariableSet_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LibraryVariableSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetResource Modified",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified.\r\nVariable template '{variableTemplate.Name}' does not have drop down options set."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["LibraryVariableSets"],
        "summary": "Delete a LibraryVariableSetResource by ID",
        "description": "Deletes an existing library variable set.",
        "operationId": "deleteLibraryVariableSet_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LibraryVariableSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/libraryvariablesets/{id}/usages": {
      "get": {
        "tags": ["LibraryVariableSets"],
        "description": "Lists projects and deployments which are using an library variable set.",
        "operationId": "getLibraryVariableSetUsageList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/licenses/licenses-current": {
      "get": {
        "tags": ["Licenses"],
        "description": "Returns the details of the current license in use by the Octopus Cluster.",
        "operationId": "getLicenseGetCurrent",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "LicenseResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Licenses"],
        "description": "Updates the license for the Octopus cluster.",
        "operationId": "updateLicensePutCurrent",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "LicenseResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseResource"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nPlease provide the text of the license.\r\nThe license you've provided doesn't seem to be valid XML. You should paste in the entire XML document, starting with <License> and ending at </License>.\r\nYou cannot use this license. Attempting to use it would make this server non-compliant."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/licenses/licenses-current-status": {
      "get": {
        "tags": ["Licenses"],
        "description": "Calculates the status of the current Octopus license including compliance and maintenance expiry.",
        "operationId": "getLicenseStatusGetCurrent",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "LicenseStatusResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseStatusResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/lifecycles": {
      "get": {
        "tags": ["Lifecycles"],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all of the lifecycles in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLifecycles",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_LifecycleResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Lifecycles"],
        "summary": "Create a LifecycleResource",
        "description": "Creates a new lifecycle.",
        "operationId": "createLifecycle",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LifecycleResource Created",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/lifecycles/all": {
      "get": {
        "tags": ["Lifecycles"],
        "summary": "Get a list of Lifecycles",
        "description": "Lists all the lifecycles in the supplied Octopus Deploy Space.",
        "operationId": "listAllLifecycles",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LifecycleResource"
              }
            }
          }
        }
      }
    },
    "/lifecycles/{id}": {
      "get": {
        "tags": ["Lifecycles"],
        "summary": "Get a Lifecycle by ID",
        "operationId": "getLifecycleById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Lifecycle to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Lifecycles"],
        "summary": "Modify a LifecycleResource by ID",
        "description": "Modifies an existing lifecycle.",
        "operationId": "updateLifecycle",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LifecycleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource Modified",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Lifecycles"],
        "summary": "Delete a LifecycleResource by ID",
        "description": "Deletes an existing lifecycle.",
        "operationId": "deleteLifecycle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LifecycleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/lifecycles/{id}/preview": {
      "get": {
        "tags": ["Lifecycles"],
        "description": "Gets a single lifecycle by ID, as a preview.",
        "operationId": "getLifecyclePreview",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/lifecycles/{id}/projects": {
      "get": {
        "tags": ["Lifecycles"],
        "description": "Gets a all projects that use this lifecycle.",
        "operationId": "getLifecycleProjects",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ProjectResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/lifecycles": {
      "get": {
        "tags": ["Lifecycles"],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all of the lifecycles in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLifecycles_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_LifecycleResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Lifecycles"],
        "summary": "Create a LifecycleResource",
        "description": "Creates a new lifecycle.",
        "operationId": "createLifecycle_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LifecycleResource Created",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/lifecycles/all": {
      "get": {
        "tags": ["Lifecycles"],
        "summary": "Get a list of Lifecycles",
        "description": "Lists all the lifecycles in the supplied Octopus Deploy Space.",
        "operationId": "listAllLifecycles_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LifecycleResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/lifecycles/{id}": {
      "get": {
        "tags": ["Lifecycles"],
        "summary": "Get a Lifecycle by ID",
        "operationId": "getLifecycleById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Lifecycle to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Lifecycles"],
        "summary": "Modify a LifecycleResource by ID",
        "description": "Modifies an existing lifecycle.",
        "operationId": "updateLifecycle_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LifecycleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource Modified",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Lifecycles"],
        "summary": "Delete a LifecycleResource by ID",
        "description": "Deletes an existing lifecycle.",
        "operationId": "deleteLifecycle_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LifecycleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/lifecycles/{id}/preview": {
      "get": {
        "tags": ["Lifecycles"],
        "description": "Gets a single lifecycle by ID, as a preview.",
        "operationId": "getLifecyclePreview_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/lifecycles/{id}/projects": {
      "get": {
        "tags": ["Lifecycles"],
        "description": "Gets a all projects that use this lifecycle.",
        "operationId": "getLifecycleProjects_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ProjectResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machinepolicies": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all of the machine policies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexMachinePolicies",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_MachinePolicyResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["MachinePolicies"],
        "summary": "Create a MachinePolicyResource",
        "description": "Creates a new machine policy.",
        "operationId": "createMachinePolicy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MachinePolicyResource Created",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machinepolicies/all": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Get a list of Machine Policies",
        "description": "Lists all the Machine Policies in the supplied Octopus Deploy Space.",
        "operationId": "listAllMachinePolicies",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachinePolicyResource"
              }
            }
          }
        }
      }
    },
    "/machinepolicies/template": {
      "get": {
        "tags": ["MachinePolicies"],
        "description": "Gets a template for a new Machine Policy, which includes any defaults.",
        "operationId": "getMachinePolicyTemplate",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "MachinePolicyResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machinepolicies/{id}": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Get a Machine Policy by ID",
        "operationId": "getMachinePolicyById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the MachinePolicy to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["MachinePolicies"],
        "summary": "Modify a MachinePolicyResource by ID",
        "description": "Modifies an existing machine policy.",
        "operationId": "updateMachinePolicy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the MachinePolicyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MachinePolicyResource Modified",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["MachinePolicies"],
        "description": "Deletes an existing machine policy.",
        "operationId": "deleteMachinePolicy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed to find the default machine policy (Octopus needs this to exist as a fallback policy for machines).\r\nNo id parameter was provided.\r\nYou cannot delete your default machine policy."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machinepolicies/{id}/machines": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Lists all of the machines that belong to the given Machine Policy",
        "operationId": "indexMachinePolicyDeploymentTargets",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the MachinePolicy to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 10",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/machinepolicies/{id}/workers": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Lists all of the workers that belong to the given Machine Policy",
        "operationId": "indexMachinePolicyWorkers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Machine Policy to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 10",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkerResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/machinepolicies": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all of the machine policies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexMachinePolicies_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_MachinePolicyResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["MachinePolicies"],
        "summary": "Create a MachinePolicyResource",
        "description": "Creates a new machine policy.",
        "operationId": "createMachinePolicy_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MachinePolicyResource Created",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machinepolicies/all": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Get a list of Machine Policies",
        "description": "Lists all the Machine Policies in the supplied Octopus Deploy Space.",
        "operationId": "listAllMachinePolicies_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachinePolicyResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/machinepolicies/template": {
      "get": {
        "tags": ["MachinePolicies"],
        "description": "Gets a template for a new Machine Policy, which includes any defaults.",
        "operationId": "getMachinePolicyTemplate_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachinePolicyResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machinepolicies/{id}": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Get a Machine Policy by ID",
        "operationId": "getMachinePolicyById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the MachinePolicy to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["MachinePolicies"],
        "summary": "Modify a MachinePolicyResource by ID",
        "description": "Modifies an existing machine policy.",
        "operationId": "updateMachinePolicy_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the MachinePolicyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MachinePolicyResource Modified",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["MachinePolicies"],
        "description": "Deletes an existing machine policy.",
        "operationId": "deleteMachinePolicy_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed to find the default machine policy (Octopus needs this to exist as a fallback policy for machines).\r\nNo id parameter was provided.\r\nYou cannot delete your default machine policy."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machinepolicies/{id}/machines": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Lists all of the machines that belong to the given Machine Policy",
        "operationId": "indexMachinePolicyDeploymentTargets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the MachinePolicy to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 10",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/machinepolicies/{id}/workers": {
      "get": {
        "tags": ["MachinePolicies"],
        "summary": "Lists all of the workers that belong to the given Machine Policy",
        "operationId": "indexMachinePolicyWorkers_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Machine Policy to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 10",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkerResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/machineroles/all": {
      "get": {
        "tags": ["MachineRoles"],
        "description": "Gets all machine roles that have been defined in this Octopus installation. The result will be a string array.",
        "operationId": "getMachineRolesListAll",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machineroles/all": {
      "get": {
        "tags": ["MachineRoles"],
        "description": "Gets all machine roles that have been defined in this Octopus installation. The result will be a string array.",
        "operationId": "getMachineRolesListAll_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the registered machines in the supplied Octopus Deploy Space, from all environments. The results will be sorted alphabetically by name.",
        "operationId": "indexDeploymentTargets",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DeploymentTargetResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Machines"],
        "summary": "Create a DeploymentTargetResource",
        "description": "Creates a new machine.",
        "operationId": "createDeploymentTarget",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DeploymentTargetResource Created",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines/all": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the deployment targets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllDeploymentTargets",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all DeploymentTargetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentTargetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines/discover": {
      "get": {
        "tags": ["Machines"],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.",
        "operationId": "getDiscoverDeploymentTarget",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines/operatingsystem/names/all": {
      "get": {
        "tags": ["Machines"],
        "description": "Gets all operating system names for deployment targets. The result will be a string array.",
        "operationId": "getDeploymentTargetOperatingSystemNamesListAll",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines/operatingsystem/shells/all": {
      "get": {
        "tags": ["Machines"],
        "description": "Gets all operating system shell names for deployment targets. The result will be a string array.",
        "operationId": "getDeploymentTargetOperatingSystemShellNameListAll",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines/{id}": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a Machine by ID",
        "operationId": "getMachineResourceById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Machine to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Machines"],
        "summary": "Modify a DeploymentTargetResource by ID",
        "description": "Modifies an existing machine.",
        "operationId": "updateDeploymentTarget",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentTargetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTargetResource Modified",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Machines"],
        "summary": "Delete a DeploymentTargetResource by ID",
        "description": "Deletes an existing machine.",
        "operationId": "deleteDeploymentTarget",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentTargetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines/{id}/connection": {
      "get": {
        "tags": ["Machines"],
        "description": "Get the status of the network connection between the Octopus server and a machine.",
        "operationId": "getDeploymentTargetConnectionStatus",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/machines/{id}/tasks": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a list of TaskResources for the given DeploymentTargetResource",
        "description": "Get the history of related tasks for a machine.",
        "operationId": "indexDeploymentTargetTasks",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentTarget",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the registered machines in the supplied Octopus Deploy Space, from all environments. The results will be sorted alphabetically by name.",
        "operationId": "indexDeploymentTargets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DeploymentTargetResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Machines"],
        "summary": "Create a DeploymentTargetResource",
        "description": "Creates a new machine.",
        "operationId": "createDeploymentTarget_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DeploymentTargetResource Created",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines/all": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the deployment targets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllDeploymentTargets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all DeploymentTargetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentTargetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines/discover": {
      "get": {
        "tags": ["Machines"],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.",
        "operationId": "getDiscoverDeploymentTarget_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines/operatingsystem/names/all": {
      "get": {
        "tags": ["Machines"],
        "description": "Gets all operating system names for deployment targets. The result will be a string array.",
        "operationId": "getDeploymentTargetOperatingSystemNamesListAll_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines/operatingsystem/shells/all": {
      "get": {
        "tags": ["Machines"],
        "description": "Gets all operating system shell names for deployment targets. The result will be a string array.",
        "operationId": "getDeploymentTargetOperatingSystemShellNameListAll_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines/{id}": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a Machine by ID",
        "operationId": "getMachineResourceById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Machine to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Machines"],
        "summary": "Modify a DeploymentTargetResource by ID",
        "description": "Modifies an existing machine.",
        "operationId": "updateDeploymentTarget_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentTargetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTargetResource Modified",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Machines"],
        "summary": "Delete a DeploymentTargetResource by ID",
        "description": "Deletes an existing machine.",
        "operationId": "deleteDeploymentTarget_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentTargetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines/{id}/connection": {
      "get": {
        "tags": ["Machines"],
        "description": "Get the status of the network connection between the Octopus server and a machine.",
        "operationId": "getDeploymentTargetConnectionStatus_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/machines/{id}/tasks": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a list of TaskResources for the given DeploymentTargetResource",
        "description": "Get the history of related tasks for a machine.",
        "operationId": "indexDeploymentTargetTasks_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the DeploymentTarget",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/maintenanceconfiguration": {
      "get": {
        "tags": ["MaintenanceConfiguration"],
        "description": "Gets information about the maintenance configuration in use by the Octopus Server.",
        "operationId": "getMaintenanceConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "MaintenanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/MaintenanceConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["MaintenanceConfiguration"],
        "description": "Updates the maintenance configuration used by the Octopus Server.",
        "operationId": "updateMaintenanceConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "MaintenanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/MaintenanceConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/migrations/import": {
      "post": {
        "tags": ["Migration"],
        "description": "Returns HTTP OK (200) when an import migration has been queued.",
        "operationId": "createMigrationImport",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "MigrationImportResource resource returned",
            "schema": {
              "$ref": "#/definitions/MigrationImportResource"
            }
          },
          "400": {
            "description": "Missing expected 'PackageId' parameter.\r\nMissing expected 'PackageVersion' parameter.\r\nMissing expected 'Password' parameter.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/migrations/partialexport": {
      "post": {
        "tags": ["Migration"],
        "description": "Returns HTTP OK (200) when a partial-export migration has been queued.",
        "operationId": "createMigrationPartialExport",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "MigrationPartialExportResource resource returned",
            "schema": {
              "$ref": "#/definitions/MigrationPartialExportResource"
            }
          },
          "400": {
            "description": "Missing expected 'Password' parameter.\r\nMissing expected 'Projects' parameter.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/nuget/packages": {
      "put": {
        "tags": ["NuGet"],
        "description": "Octopus allows NuGet.exe and compatible tools to push packages to this endpoint.",
        "operationId": "pushNuGetPackage",
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/nuget/packages": {
      "put": {
        "tags": ["NuGet"],
        "description": "Octopus allows NuGet.exe and compatible tools to push packages to this endpoint.",
        "operationId": "pushNuGetPackage_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/package-metadata": {
      "post": {
        "tags": ["OctopusPackageMetadata"],
        "description": "Creates package build information. Deprecated. Please use the 'build-information' api instead.",
        "operationId": "createOctopusPackageMetadata",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata"
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/package-metadata/{id}": {
      "get": {
        "tags": ["OctopusPackageMetadata"],
        "description": "Returns package build information for the specified id. Deprecated. Please use the 'build-information' api instead.",
        "operationId": "getOctopusPackageMetadata",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/package-metadata": {
      "post": {
        "tags": ["OctopusPackageMetadata"],
        "description": "Creates package build information. Deprecated. Please use the 'build-information' api instead.",
        "operationId": "createOctopusPackageMetadata_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata"
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/package-metadata/{id}": {
      "get": {
        "tags": ["OctopusPackageMetadata"],
        "description": "Returns package build information for the specified id. Deprecated. Please use the 'build-information' api instead.",
        "operationId": "getOctopusPackageMetadata_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/octopusservernodes": {
      "get": {
        "tags": ["OctopusServerNodes"],
        "summary": "Get a list of OctopusServerNodeResources",
        "description": "List all of the Octopus Server nodes participating in the current Octopus Server cluster.",
        "operationId": "indexOctopusServerNodes",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_OctopusServerNodeResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/octopusservernodes/all": {
      "get": {
        "tags": ["OctopusServerNodes"],
        "summary": "Get all Octopus Server Nodes",
        "description": "Lists the name and ID of all Octopus Server nodes.",
        "operationId": "getAllOctopusServerNodes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OctopusServerNodeResource"
              }
            }
          }
        }
      }
    },
    "/octopusservernodes/ping": {
      "get": {
        "tags": ["OctopusServerNodes"],
        "description": "Returns HTTP ImATeapot (418) when the Octopus Server node is draining or offline, otherwise HTTP OK (200). Always returns the node information in the body.",
        "operationId": "getLoadBalancerPing",
        "responses": {
          "200": {
            "description": "OK"
          },
          "418": {
            "description": "ImATeapot"
          }
        }
      }
    },
    "/octopusservernodes/summary": {
      "get": {
        "tags": ["OctopusServerNodes"],
        "description": "Returns all nodes, with status information",
        "operationId": "getOctopusServerClusterSummary",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/octopusservernodes/{id}": {
      "get": {
        "tags": ["OctopusServerNodes"],
        "summary": "Get an Octopus Server Node by ID",
        "operationId": "getOctopusServerNodeById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the OctopusServerNode to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["OctopusServerNodes"],
        "summary": "Modify a OctopusServerNodeResource by ID",
        "description": "Modifies an Octopus Server node.",
        "operationId": "updateOctopusServerNode",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the OctopusServerNodeResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The OctopusServerNodeResource resource to create",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusServerNodeResource Modified",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["OctopusServerNodes"],
        "summary": "Delete a OctopusServerNodeResource by ID",
        "description": "Deletes an Octopus Server node.",
        "operationId": "deleteOctopusServerNode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the OctopusServerNodeResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/octopusservernodes/{id}/details": {
      "get": {
        "tags": ["OctopusServerNodes"],
        "description": "A count of the running tasks per node.",
        "operationId": "getOctopusServerNodeDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusServerNodeDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeDetailsResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/octopusservernodes/all": {
      "get": {
        "tags": ["OctopusServerNodes"],
        "summary": "Get all Octopus Server Nodes",
        "description": "Lists the name and ID of all Octopus Server nodes.",
        "operationId": "getAllOctopusServerNodes_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OctopusServerNodeResource"
              }
            }
          }
        }
      }
    },
    "/users/authenticate/OctopusID": {
      "post": {
        "tags": ["OpenIDConnect"],
        "operationId": "createOctopusIDUserAuthentication",
        "responses": {
          "400": {
            "description": "Extension is disabled."
          }
        }
      }
    },
    "/users/authenticatedToken/OctopusID": {
      "post": {
        "tags": ["OpenIDConnect"],
        "operationId": "createOctopusIDUserAuthenticated",
        "responses": {
          "400": {
            "description": "Extension is disabled."
          }
        }
      }
    },
    "/feeds/{id}/packages": {
      "get": {
        "tags": ["Packages"],
        "description": "Searches the specified feed for packages. Legacy. Please use the /feeds{id}/packages/search endpoint instead.",
        "operationId": "getPackageSearchActionOld",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_PackageResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThe 'versionRange' parameter was not a valid NuGet version-range (see http://g.octopushq.com/NuGetVersioning)"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/feeds/{id}/packages/notes": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns the release notes for the specified package",
        "operationId": "getPackageNotes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "packageId",
            "description": "Package Id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Package Version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns a list of packages matching the specified criteria",
        "operationId": "getPackageRepositoryList",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_PackageResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageResourceCollection"
            }
          },
          "400": {
            "description": "Only one of either nuGetPackageId or filter may be specified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages/bulk": {
      "delete": {
        "tags": ["Packages"],
        "description": "Bulk deletes packages",
        "operationId": "deletePackageRepositoryDeleteByIds",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages/notes": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns a list of release notes for the specified packages",
        "operationId": "getPackageListNotes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "PackageNoteListResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageNoteListResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages/raw": {
      "post": {
        "tags": ["Packages"],
        "description": "Uploads a new package",
        "operationId": "createPackageRepositoryUpload",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages/{id}": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns package information for the specified package id",
        "operationId": "getPackageRepository",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Packages"],
        "description": "Deletes the specified package",
        "operationId": "deletePackageRepositoryDeleteById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages/{id}/raw": {
      "get": {
        "tags": ["Packages"],
        "description": "Downloads the specified package",
        "operationId": "getPackageRepositoryGetRaw",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid package specified.\r\nNo id parameter was provided.\r\nPackage was not found in the index of the built-in package repository.\r\nPackage was not found on disk, although metadata was found in the built-in package repository index. This could mean that the file was manually deleted from disk after being indexed."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages/{packageId}/{baseVersion}/delta": {
      "post": {
        "tags": ["Packages"],
        "description": "Uploads a delta patch for the given file. Used to optimize file upload.",
        "operationId": "createPackageRepositoryDeltaUpload",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseVersion",
            "description": "The version of the package that was used to create the signature",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "packageId",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A delta file must be provided\r\nA package file must be provided\r\nInvalid semantic version supplied\r\nNo baseVersion parameter was provided.\r\nNo packageId parameter was provided.\r\nPackage Name is too long.\r\nThe uploaded delta file had length equal to 0. Please upload a non-empty file.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/packages/{packageId}/{version}/delta-signature": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns the delta-signature for a given package. Used to optimize file upload.",
        "operationId": "getPackageRepositoryDeltaSignature",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "packageId",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "The version of the package to be uploaded",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageSignatureResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageSignatureResource"
            }
          },
          "400": {
            "description": "No packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds/{id}/packages": {
      "get": {
        "tags": ["Packages"],
        "description": "Searches the specified feed for packages. Legacy. Please use the /feeds{id}/packages/search endpoint instead.",
        "operationId": "getPackageSearchActionOld_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_PackageResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThe 'versionRange' parameter was not a valid NuGet version-range (see http://g.octopushq.com/NuGetVersioning)"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/feeds/{id}/packages/notes": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns the release notes for the specified package",
        "operationId": "getPackageNotes_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "packageId",
            "description": "Package Id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Package Version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns a list of packages matching the specified criteria",
        "operationId": "getPackageRepositoryList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_PackageResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageResourceCollection"
            }
          },
          "400": {
            "description": "Only one of either nuGetPackageId or filter may be specified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages/bulk": {
      "delete": {
        "tags": ["Packages"],
        "description": "Bulk deletes packages",
        "operationId": "deletePackageRepositoryDeleteByIds_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages/notes": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns a list of release notes for the specified packages",
        "operationId": "getPackageListNotes_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageNoteListResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageNoteListResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages/raw": {
      "post": {
        "tags": ["Packages"],
        "description": "Uploads a new package",
        "operationId": "createPackageRepositoryUpload_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages/{id}": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns package information for the specified package id",
        "operationId": "getPackageRepository_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Packages"],
        "description": "Deletes the specified package",
        "operationId": "deletePackageRepositoryDeleteById_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages/{id}/raw": {
      "get": {
        "tags": ["Packages"],
        "description": "Downloads the specified package",
        "operationId": "getPackageRepositoryGetRaw_Spaces",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid package specified.\r\nNo id parameter was provided.\r\nPackage was not found in the index of the built-in package repository.\r\nPackage was not found on disk, although metadata was found in the built-in package repository index. This could mean that the file was manually deleted from disk after being indexed."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages/{packageId}/{baseVersion}/delta": {
      "post": {
        "tags": ["Packages"],
        "description": "Uploads a delta patch for the given file. Used to optimize file upload.",
        "operationId": "createPackageRepositoryDeltaUpload_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseVersion",
            "description": "The version of the package that was used to create the signature",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "packageId",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A delta file must be provided\r\nA package file must be provided\r\nInvalid semantic version supplied\r\nNo baseVersion parameter was provided.\r\nNo packageId parameter was provided.\r\nPackage Name is too long.\r\nThe uploaded delta file had length equal to 0. Please upload a non-empty file.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/packages/{packageId}/{version}/delta-signature": {
      "get": {
        "tags": ["Packages"],
        "description": "Returns the delta-signature for a given package. Used to optimize file upload.",
        "operationId": "getPackageRepositoryDeltaSignature_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "packageId",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "The version of the package to be uploaded",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageSignatureResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageSignatureResource"
            }
          },
          "400": {
            "description": "No packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/performanceconfiguration": {
      "get": {
        "tags": ["PerformanceConfiguration"],
        "description": "Get performance settings for the Octopus Server",
        "operationId": "getPerformanceConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "PerformanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/PerformanceConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["PerformanceConfiguration"],
        "description": "Updates the performance settings for the Octopus Server",
        "operationId": "updatePerformanceConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "PerformanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/PerformanceConfigurationResource"
            }
          },
          "400": {
            "description": "Model is invalid.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/permissions/all": {
      "get": {
        "tags": ["Permissions"],
        "description": "Gets a dictionary of available permissions and their descriptions and restrictions",
        "operationId": "getPermissionDefinitions",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Dictionary_of_Permission,PermissionDescription resource returned",
            "schema": {
              "type": "object",
              "properties": {
                "AdministerSystem": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProcessView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProcessEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableEditUnscoped": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableViewUnscoped": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DefectReport": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DefectResolve": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "FeedView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EventView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserInvite": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserRoleView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserRoleEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskCancel": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionSubmit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionViewSubmitResponsible": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedPush": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedAdminister": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedDownload": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateExportPrivateKey": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ConfigureServer": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "FeedEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "WorkerView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "WorkerEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuildInformationPush": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuildInformationAdminister": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookRunView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookRunDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookRunCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/progression/runbooks/taskRuns": {
      "get": {
        "tags": ["Progression"],
        "description": "Returns a list of runbook dashboard items, filtered by various criteria including projectIds, environmentIds, tenantIds, runbookIds, taskIds",
        "operationId": "getRunbookTaskRunDashboardItems",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbooksDashboardItemResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbooksDashboardItemResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/progression/runbooks/{id}": {
      "get": {
        "tags": ["Progression"],
        "description": "Returns the progress of a runbook in the environment lifecycle",
        "operationId": "getRunbooksProgressionView",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbooksProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbooksProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/progression/{id}": {
      "get": {
        "tags": ["Progression"],
        "description": "Returns the progress of a release in the environment lifecycle.",
        "operationId": "getProgressionView",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/progression/runbooks/taskRuns": {
      "get": {
        "tags": ["Progression"],
        "description": "Returns a list of runbook dashboard items, filtered by various criteria including projectIds, environmentIds, tenantIds, runbookIds, taskIds",
        "operationId": "getRunbookTaskRunDashboardItems_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbooksDashboardItemResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbooksDashboardItemResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/progression/runbooks/{id}": {
      "get": {
        "tags": ["Progression"],
        "description": "Returns the progress of a runbook in the environment lifecycle",
        "operationId": "getRunbooksProgressionView_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbooksProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbooksProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/progression/{id}": {
      "get": {
        "tags": ["Progression"],
        "description": "Returns the progress of a release in the environment lifecycle.",
        "operationId": "getProgressionView_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projectgroups": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists all of the project groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProjectGroups",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectGroupResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ProjectGroups"],
        "summary": "Create a ProjectGroupResource",
        "description": "Creates a new project group.",
        "operationId": "createProjectGroup",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectGroupResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projectgroups/all": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Get a list of Project Group",
        "description": "Lists the name and ID of all of the Project Groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjectGroups",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectGroupResource"
              }
            }
          }
        }
      }
    },
    "/projectgroups/{id}": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Get a Project Group by ID",
        "operationId": "getProjectGroupById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectGroup to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ProjectGroups"],
        "summary": "Modify a ProjectGroupResource by ID",
        "description": "Modifies an existing project group.",
        "operationId": "updateProjectGroup",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectGroupResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectGroupResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ProjectGroups"],
        "summary": "Delete a ProjectGroupResource by ID",
        "description": "Deletes an existing project group.",
        "operationId": "deleteProjectGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectGroupResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projectgroups/{id}/projects": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Lists all of the Projects that belong to the given Project Group",
        "operationId": "indexProjectGroupProjects",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project Group to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/projectgroups": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists all of the project groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProjectGroups_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectGroupResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ProjectGroups"],
        "summary": "Create a ProjectGroupResource",
        "description": "Creates a new project group.",
        "operationId": "createProjectGroup_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectGroupResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projectgroups/all": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Get a list of Project Group",
        "description": "Lists the name and ID of all of the Project Groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjectGroups_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectGroupResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/projectgroups/{id}": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Get a Project Group by ID",
        "operationId": "getProjectGroupById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectGroup to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ProjectGroups"],
        "summary": "Modify a ProjectGroupResource by ID",
        "description": "Modifies an existing project group.",
        "operationId": "updateProjectGroup_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectGroupResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectGroupResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ProjectGroups"],
        "summary": "Delete a ProjectGroupResource by ID",
        "description": "Deletes an existing project group.",
        "operationId": "deleteProjectGroup_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectGroupResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projectgroups/{id}/projects": {
      "get": {
        "tags": ["ProjectGroups"],
        "summary": "Lists all of the Projects that belong to the given Project Group",
        "operationId": "indexProjectGroupProjects_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project Group to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": ["Projects"],
        "description": "Lists all of the projects in the supplied Octopus Deploy Space, from all project groups. The results will be sorted alphabetically by name.",
        "operationId": "indexProjects",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create a ProjectResource",
        "description": "Creates a new project.",
        "operationId": "createProject",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "clone",
            "description": "The projectId whose configuration is to be copied to the project being created.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "A channel ID must be provided to enable Automatic Release Creation.\r\nA package step must be provided to enable Automatic Release Creation.\r\nA project cannot be named '{0}'\r\nModel validation failed.\r\nNo request body was supplied.\r\nThe Automatic Release Creation (ARC) package must be sourced from the Octopus built-in feed. ARC settings can be found at Project > Triggers https://g.octopushq.com/AutoReleaseCreation\r\nThe Automatic Release Creation package could not be found (see Automatic Release Creation settings, via Project > Triggers)\r\nThe package step provided could not be found in the project's deployment process (see Automatic Release Creation settings, via Project > Triggers).\r\nThe package step provided is disabled (see Automatic Release Creation settings, via Project > Triggers).\r\nThe specified Automatic Release Creation channel belongs to a different project."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/all": {
      "get": {
        "tags": ["Projects"],
        "description": "Lists the name and ID of all of the projects in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjects",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ProjectResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets a single project by ID or Slug.",
        "operationId": "getProjectByIdOrSlug",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID or slug of the ProjectResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Modify a ProjectResource by ID",
        "description": "Modifies an existing project.",
        "operationId": "updateProject",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "A channel ID must be provided to enable Automatic Release Creation.\r\nA package step must be provided to enable Automatic Release Creation.\r\nA project cannot be named '{0}'\r\nModel validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPlease re-enter the password when changing the repository URL or username.\r\nThe Automatic Release Creation (ARC) package must be sourced from the Octopus built-in feed. ARC settings can be found at Project > Triggers https://g.octopushq.com/AutoReleaseCreation\r\nThe Automatic Release Creation package could not be found (see Automatic Release Creation settings, via Project > Triggers)\r\nThe package step provided could not be found in the project's deployment process (see Automatic Release Creation settings, via Project > Triggers).\r\nThe package step provided is disabled (see Automatic Release Creation settings, via Project > Triggers).\r\nThe specified Automatic Release Creation channel belongs to a different project.\r\nThe version control settings were not valid\r\nThis resource is read-only and cannot be modified.\r\nUnable to convert project to version control via modify\r\nUnable to convert project to version control: it is already a version controlled\r\nUnable to convert project to version control: project type not supported\r\nUnable to modify project: connection to the repository failed"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete a ProjectResource by ID",
        "description": "Deletes an existing project.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/logo": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets the logo associated with the project.",
        "operationId": "getProjectLogo",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "description": "Updates the logo associated with the project.",
        "operationId": "createProjectLogo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Projects"],
        "description": "Updates the logo associated with the project.",
        "operationId": "updateProjectLogo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/metadata": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets the custom settings metadata from the extensions.",
        "operationId": "getProjectSettingsMetadata",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List_of_ProjectSettingsMetadata resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/summary": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets a summary of project-specific information.",
        "operationId": "getProjectSummary",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectSummary resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectSummary"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/versioncontrolsettings/test": {
      "post": {
        "tags": ["Projects"],
        "description": "Tests the VCS settings to make sure we can connect",
        "operationId": "createVersionControlSettingsConnectivityCheck",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ConnectivityCheckResponse resource returned",
            "schema": {
              "$ref": "#/definitions/ConnectivityCheckResponse"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{projectId}/versioncontrol/convert": {
      "post": {
        "tags": ["Projects"],
        "description": "Converts an existing project to store its configuration in version control.",
        "operationId": "createConvertProjectToVersionControlled",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "ID of the project resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ConvertProjectToVersionControlledResponse resource returned",
            "schema": {
              "$ref": "#/definitions/ConvertProjectToVersionControlledResponse"
            }
          },
          "400": {
            "description": "No projectId parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects": {
      "get": {
        "tags": ["Projects"],
        "description": "Lists all of the projects in the supplied Octopus Deploy Space, from all project groups. The results will be sorted alphabetically by name.",
        "operationId": "indexProjects_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create a ProjectResource",
        "description": "Creates a new project.",
        "operationId": "createProject_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "clone",
            "description": "The projectId whose configuration is to be copied to the project being created.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "A channel ID must be provided to enable Automatic Release Creation.\r\nA package step must be provided to enable Automatic Release Creation.\r\nA project cannot be named '{0}'\r\nModel validation failed.\r\nNo request body was supplied.\r\nThe Automatic Release Creation (ARC) package must be sourced from the Octopus built-in feed. ARC settings can be found at Project > Triggers https://g.octopushq.com/AutoReleaseCreation\r\nThe Automatic Release Creation package could not be found (see Automatic Release Creation settings, via Project > Triggers)\r\nThe package step provided could not be found in the project's deployment process (see Automatic Release Creation settings, via Project > Triggers).\r\nThe package step provided is disabled (see Automatic Release Creation settings, via Project > Triggers).\r\nThe specified Automatic Release Creation channel belongs to a different project."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/all": {
      "get": {
        "tags": ["Projects"],
        "description": "Lists the name and ID of all of the projects in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjects_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets a single project by ID or Slug.",
        "operationId": "getProjectByIdOrSlug_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID or slug of the ProjectResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Modify a ProjectResource by ID",
        "description": "Modifies an existing project.",
        "operationId": "updateProject_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "A channel ID must be provided to enable Automatic Release Creation.\r\nA package step must be provided to enable Automatic Release Creation.\r\nA project cannot be named '{0}'\r\nModel validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPlease re-enter the password when changing the repository URL or username.\r\nThe Automatic Release Creation (ARC) package must be sourced from the Octopus built-in feed. ARC settings can be found at Project > Triggers https://g.octopushq.com/AutoReleaseCreation\r\nThe Automatic Release Creation package could not be found (see Automatic Release Creation settings, via Project > Triggers)\r\nThe package step provided could not be found in the project's deployment process (see Automatic Release Creation settings, via Project > Triggers).\r\nThe package step provided is disabled (see Automatic Release Creation settings, via Project > Triggers).\r\nThe specified Automatic Release Creation channel belongs to a different project.\r\nThe version control settings were not valid\r\nThis resource is read-only and cannot be modified.\r\nUnable to convert project to version control via modify\r\nUnable to convert project to version control: it is already a version controlled\r\nUnable to convert project to version control: project type not supported\r\nUnable to modify project: connection to the repository failed"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete a ProjectResource by ID",
        "description": "Deletes an existing project.",
        "operationId": "deleteProject_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/logo": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets the logo associated with the project.",
        "operationId": "getProjectLogo_Spaces",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "description": "Updates the logo associated with the project.",
        "operationId": "createProjectLogo_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Projects"],
        "description": "Updates the logo associated with the project.",
        "operationId": "updateProjectLogo_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/metadata": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets the custom settings metadata from the extensions.",
        "operationId": "getProjectSettingsMetadata_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List_of_ProjectSettingsMetadata resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/summary": {
      "get": {
        "tags": ["Projects"],
        "description": "Gets a summary of project-specific information.",
        "operationId": "getProjectSummary_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectSummary resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectSummary"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/versioncontrolsettings/test": {
      "post": {
        "tags": ["Projects"],
        "description": "Tests the VCS settings to make sure we can connect",
        "operationId": "createVersionControlSettingsConnectivityCheck_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ConnectivityCheckResponse resource returned",
            "schema": {
              "$ref": "#/definitions/ConnectivityCheckResponse"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{projectId}/versioncontrol/convert": {
      "post": {
        "tags": ["Projects"],
        "description": "Converts an existing project to store its configuration in version control.",
        "operationId": "createConvertProjectToVersionControlled_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "ID of the project resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ConvertProjectToVersionControlledResponse resource returned",
            "schema": {
              "$ref": "#/definitions/ConvertProjectToVersionControlledResponse"
            }
          },
          "400": {
            "description": "No projectId parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/triggers": {
      "get": {
        "tags": ["ProjectTriggers"],
        "summary": "Get a list of ProjectTriggerResources for the given ProjectResource",
        "description": "Lists all the project triggers for the given project",
        "operationId": "indexProjectProjectTriggers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectTriggerResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projecttriggers": {
      "get": {
        "tags": ["ProjectTriggers"],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Gets all the project triggers in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexProjectTriggers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectTriggerResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ProjectTriggers"],
        "summary": "Create a ProjectTriggerResource",
        "description": "Creates a new project trigger",
        "operationId": "createProjectTrigger",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectTriggerResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projecttriggers/{id}": {
      "get": {
        "tags": ["ProjectTriggers"],
        "summary": "Get a Project Trigger by ID",
        "operationId": "getProjectTriggerById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectTrigger to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ProjectTriggers"],
        "summary": "Modify a ProjectTriggerResource by ID",
        "description": "Updates an existing project trigger",
        "operationId": "updateProjectTrigger",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectTriggerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectTriggerResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ProjectTriggers"],
        "summary": "Delete a ProjectTriggerResource by ID",
        "description": "Deletes an existing project trigger.",
        "operationId": "deleteProjectTrigger",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectTriggerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/triggers": {
      "get": {
        "tags": ["ProjectTriggers"],
        "summary": "Get a list of ProjectTriggerResources for the given ProjectResource",
        "description": "Lists all the project triggers for the given project",
        "operationId": "indexProjectProjectTriggers_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectTriggerResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projecttriggers": {
      "get": {
        "tags": ["ProjectTriggers"],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Gets all the project triggers in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexProjectTriggers_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProjectTriggerResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ProjectTriggers"],
        "summary": "Create a ProjectTriggerResource",
        "description": "Creates a new project trigger",
        "operationId": "createProjectTrigger_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectTriggerResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projecttriggers/{id}": {
      "get": {
        "tags": ["ProjectTriggers"],
        "summary": "Get a Project Trigger by ID",
        "operationId": "getProjectTriggerById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectTrigger to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ProjectTriggers"],
        "summary": "Modify a ProjectTriggerResource by ID",
        "description": "Updates an existing project trigger",
        "operationId": "updateProjectTrigger_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectTriggerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectTriggerResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ProjectTriggers"],
        "summary": "Delete a ProjectTriggerResource by ID",
        "description": "Deletes an existing project trigger.",
        "operationId": "deleteProjectTrigger_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProjectTriggerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/proxies": {
      "get": {
        "tags": ["Proxies"],
        "summary": "Get a list of ProxyResources",
        "description": "Lists all of the proxies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProxies",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProxyResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProxyResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Proxies"],
        "summary": "Create a ProxyResource",
        "description": "Creates a proxy.",
        "operationId": "createProxy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProxyResource Created",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/proxies/all": {
      "get": {
        "tags": ["Proxies"],
        "summary": "Get a list of Proxies",
        "description": "Lists the name and ID of all of the Proxies in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllProxies",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProxyResource"
              }
            }
          }
        }
      }
    },
    "/proxies/{id}": {
      "get": {
        "tags": ["Proxies"],
        "summary": "Get a Proxy by ID",
        "operationId": "getProxyById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Proxy to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Proxies"],
        "summary": "Modify a ProxyResource by ID",
        "description": "Modifies an existing proxy.",
        "operationId": "updateProxy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProxyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProxyResource Modified",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Proxies"],
        "summary": "Delete a ProxyResource by ID",
        "description": "Deletes an existing proxy.",
        "operationId": "deleteProxy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProxyResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/proxies": {
      "get": {
        "tags": ["Proxies"],
        "summary": "Get a list of ProxyResources",
        "description": "Lists all of the proxies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProxies_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ProxyResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProxyResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Proxies"],
        "summary": "Create a ProxyResource",
        "description": "Creates a proxy.",
        "operationId": "createProxy_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProxyResource Created",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/proxies/all": {
      "get": {
        "tags": ["Proxies"],
        "summary": "Get a list of Proxies",
        "description": "Lists the name and ID of all of the Proxies in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllProxies_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProxyResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/proxies/{id}": {
      "get": {
        "tags": ["Proxies"],
        "summary": "Get a Proxy by ID",
        "operationId": "getProxyById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Proxy to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Proxies"],
        "summary": "Modify a ProxyResource by ID",
        "description": "Modifies an existing proxy.",
        "operationId": "updateProxy_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProxyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProxyResource Modified",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Proxies"],
        "summary": "Delete a ProxyResource by ID",
        "description": "Deletes an existing proxy.",
        "operationId": "deleteProxy_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ProxyResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/releases": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get a list of ReleaseResources for the given ProjectResource",
        "description": "Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.",
        "operationId": "indexProjectReleases",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/releases/{version}": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets a single release by project ID and version number.",
        "operationId": "getReleaseByProjectAndVersion",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Release version number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get a list of Releases",
        "description": "Lists all of the Releases in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent release.",
        "operationId": "indexReleases",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReleaseResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["Releases"],
        "summary": "Create a ReleaseResource",
        "description": "Creates a new release.",
        "operationId": "createRelease",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ignoreChannelRules",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ReleaseResource Created",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A channelId must be provided for a release when more than one exists for that project and no default channel has been specified.\r\nA version must be specified for every included package.\r\nCreating a release for a version controlled process requires GitRef to be set on VersionControlReference\r\nModel validation failed.\r\nNo project ID was specified.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe project is disabled, so releases cannot be created\r\nThe release number '{release.Version}' does not appear to be a valid version number. The version must consist of between 1 and 4 number only parts before the optional pre-release part. e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check.\r\nUnexpected VersionControlReference provided. Please remove this value or enable version control on this project"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get a Release by ID",
        "operationId": "getReleaseById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Release to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Releases"],
        "summary": "Modify a ReleaseResource by ID",
        "description": "Updates an existing release.",
        "operationId": "updateRelease",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ReleaseResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ignoreChannelRules",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource Modified",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A version must be specified for every included package.\r\nModel validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe release `{0}` currently contains deployments with step(s) {1} that would be skipped due to the updated channel. Please select a different channel or delete and recreate this release.\r\nThe release number '{release.Version}' does not appear to be a valid version number. The version must consist of between 1 and 4 number only parts before the optional pre-release part. e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Releases"],
        "summary": "Delete a ReleaseResource by ID",
        "description": "Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.",
        "operationId": "deleteRelease",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ReleaseResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/defects": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets all defects for a release.",
        "operationId": "getListDefects",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the defect",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Releases"],
        "description": "Record defect in a release.",
        "operationId": "createDefectReported",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "An unresolved defect already exists for this release.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nYou must provide a description."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/defects/resolve": {
      "post": {
        "tags": ["Releases"],
        "description": "Update or resolve defect in a release.",
        "operationId": "createDefectResolved",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "Defect has already been resolved.\r\nIndex refers to an invalid defect.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/deployments": {
      "get": {
        "tags": ["Releases"],
        "summary": "Lists all of the Deployments that belong to the given Release",
        "description": "Deployments will be ordered from most recent to least recent",
        "operationId": "indexReleaseDeployments",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Release to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/releases/{id}/deployments/preview/{environment}": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).",
        "operationId": "getDeploymentPreview",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/deployments/preview/{environment}/{tenant}": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).",
        "operationId": "getDeploymentPreview_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/deployments/previews": {
      "post": {
        "tags": ["Releases"],
        "description": "Returns an array of documents that describes what steps will/won't be run during deployments to a given set of environments and tenants.",
        "operationId": "createDeploymentPreviewCollection",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentPreviewResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/deployments/template": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.",
        "operationId": "getDeploymentTemplate",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "500": {
            "description": "A lifecycle has not been assigned to this project."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/progression": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.",
        "operationId": "getReleaseLifecycleProgression",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/releases/{id}/snapshot-variables": {
      "post": {
        "tags": ["Releases"],
        "description": "Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.",
        "operationId": "createReleaseSnapshotVariables",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/releases": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get a list of ReleaseResources for the given ProjectResource",
        "description": "Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.",
        "operationId": "indexProjectReleases_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/releases/{version}": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets a single release by project ID and version number.",
        "operationId": "getReleaseByProjectAndVersion_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Release version number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get a list of Releases",
        "description": "Lists all of the Releases in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent release.",
        "operationId": "indexReleases_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReleaseResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["Releases"],
        "summary": "Create a ReleaseResource",
        "description": "Creates a new release.",
        "operationId": "createRelease_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ignoreChannelRules",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ReleaseResource Created",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A channelId must be provided for a release when more than one exists for that project and no default channel has been specified.\r\nA version must be specified for every included package.\r\nCreating a release for a version controlled process requires GitRef to be set on VersionControlReference\r\nModel validation failed.\r\nNo project ID was specified.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe project is disabled, so releases cannot be created\r\nThe release number '{release.Version}' does not appear to be a valid version number. The version must consist of between 1 and 4 number only parts before the optional pre-release part. e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check.\r\nUnexpected VersionControlReference provided. Please remove this value or enable version control on this project"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get a Release by ID",
        "operationId": "getReleaseById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Release to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Releases"],
        "summary": "Modify a ReleaseResource by ID",
        "description": "Updates an existing release.",
        "operationId": "updateRelease_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ReleaseResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ignoreChannelRules",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource Modified",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A version must be specified for every included package.\r\nModel validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe release `{0}` currently contains deployments with step(s) {1} that would be skipped due to the updated channel. Please select a different channel or delete and recreate this release.\r\nThe release number '{release.Version}' does not appear to be a valid version number. The version must consist of between 1 and 4 number only parts before the optional pre-release part. e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Releases"],
        "summary": "Delete a ReleaseResource by ID",
        "description": "Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.",
        "operationId": "deleteRelease_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ReleaseResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/defects": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets all defects for a release.",
        "operationId": "getListDefects_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the defect",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Releases"],
        "description": "Record defect in a release.",
        "operationId": "createDefectReported_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "An unresolved defect already exists for this release.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nYou must provide a description."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/defects/resolve": {
      "post": {
        "tags": ["Releases"],
        "description": "Update or resolve defect in a release.",
        "operationId": "createDefectResolved_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "Defect has already been resolved.\r\nIndex refers to an invalid defect.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/deployments": {
      "get": {
        "tags": ["Releases"],
        "summary": "Lists all of the Deployments that belong to the given Release",
        "description": "Deployments will be ordered from most recent to least recent",
        "operationId": "indexReleaseDeployments_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Release to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeploymentResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/releases/{id}/deployments/preview/{environment}": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).",
        "operationId": "getDeploymentPreview_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/deployments/preview/{environment}/{tenant}": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).",
        "operationId": "getDeploymentPreview_Spaces_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/deployments/previews": {
      "post": {
        "tags": ["Releases"],
        "description": "Returns an array of documents that describes what steps will/won't be run during deployments to a given set of environments and tenants.",
        "operationId": "createDeploymentPreviewCollection_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentPreviewResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/deployments/template": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.",
        "operationId": "getDeploymentTemplate_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "500": {
            "description": "A lifecycle has not been assigned to this project."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/progression": {
      "get": {
        "tags": ["Releases"],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.",
        "operationId": "getReleaseLifecycleProgression_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/releases/{id}/snapshot-variables": {
      "post": {
        "tags": ["Releases"],
        "description": "Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.",
        "operationId": "createReleaseSnapshotVariables_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/reporting/deployments-counted-by-week": {
      "get": {
        "tags": ["Reporting"],
        "description": "Provides a report summarizing the weekly deployments per project over the last 6 months",
        "operationId": "getDeploymentsByProjectReport",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ReportDeploymentCountOverTimeResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportDeploymentCountOverTimeResource"
              }
            }
          },
          "400": {
            "description": "A projectIds query string parameter is required."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/reporting/deployments/xml": {
      "get": {
        "tags": ["Reporting"],
        "description": "Provides an XML report that contains all of the information about deployments",
        "operationId": "getDeploymentsXml",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/reporting/deployments-counted-by-week": {
      "get": {
        "tags": ["Reporting"],
        "description": "Provides a report summarizing the weekly deployments per project over the last 6 months",
        "operationId": "getDeploymentsByProjectReport_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ReportDeploymentCountOverTimeResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportDeploymentCountOverTimeResource"
              }
            }
          },
          "400": {
            "description": "A projectIds query string parameter is required."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/reporting/deployments/xml": {
      "get": {
        "tags": ["Reporting"],
        "description": "Provides an XML report that contains all of the information about deployments",
        "operationId": "getDeploymentsXml_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookProcesses": {
      "get": {
        "tags": ["RunbookProcesses"],
        "summary": "Get a list of Runbook Processes",
        "description": "Lists all the Runbook Processes in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexRunbookProcesses",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResourceCollection"
            }
          }
        }
      }
    },
    "/runbookProcesses/{id}": {
      "get": {
        "tags": ["RunbookProcesses"],
        "summary": "Get a Runbook Process by ID",
        "operationId": "getRunbookProcessById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookProcess to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["RunbookProcesses"],
        "description": "Modifies a Runbook Process. Only allowed for Runbook Processes owned by a project.",
        "operationId": "updateRunbookProcess",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookProcessResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "400": {
            "description": "Changes to this process could not be saved, because another user has made changes to the process between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nValidation failed.\r\nYou cannot modify this process because it is frozen. You'll need to create a new process instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookProcesses/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": ["RunbookProcesses"],
        "description": "Gets all of the information necessary for creating or editing a Runbook Snapshot using this Runbook Process.",
        "operationId": "getRunbookSnapshotTemplateForRunbookStep",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookSnapshots/{id}/runbookRuns": {
      "get": {
        "tags": ["RunbookProcesses"],
        "summary": "Lists all of the Runbook Runs that belong to the given Runbook Snapshot",
        "description": "Runs will be ordered from most recent to least recent",
        "operationId": "indexRunbookSnapshotRunbookRuns",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Runbook Snapshot to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookRunResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/runbookProcesses": {
      "get": {
        "tags": ["RunbookProcesses"],
        "summary": "Get a list of Runbook Processes",
        "description": "Lists all the Runbook Processes in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexRunbookProcesses_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResourceCollection"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/runbookProcesses/{id}": {
      "get": {
        "tags": ["RunbookProcesses"],
        "summary": "Get a Runbook Process by ID",
        "operationId": "getRunbookProcessById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookProcess to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["RunbookProcesses"],
        "description": "Modifies a Runbook Process. Only allowed for Runbook Processes owned by a project.",
        "operationId": "updateRunbookProcess_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookProcessResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "400": {
            "description": "Changes to this process could not be saved, because another user has made changes to the process between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nValidation failed.\r\nYou cannot modify this process because it is frozen. You'll need to create a new process instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookProcesses/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": ["RunbookProcesses"],
        "description": "Gets all of the information necessary for creating or editing a Runbook Snapshot using this Runbook Process.",
        "operationId": "getRunbookSnapshotTemplateForRunbookStep_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns": {
      "get": {
        "tags": ["RunbookProcesses"],
        "summary": "Lists all of the Runbook Runs that belong to the given Runbook Snapshot",
        "description": "Runs will be ordered from most recent to least recent",
        "operationId": "indexRunbookSnapshotRunbookRuns_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Runbook Snapshot to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookRunResourceCollection"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/runbookRuns": {
      "get": {
        "tags": ["RunbookRuns"],
        "summary": "Get a list of RunbookRunResources",
        "description": "Lists all of the runbookRuns in the supplied Octopus Deploy Space, from projects, snapshots and environments accessible by the current user. The results will be sorted from most recent to least recent runbookRun.",
        "operationId": "indexRunbookRuns",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["RunbookRuns"],
        "description": "Creates a new runbookRun.",
        "operationId": "createRunbookRunCreate",
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "License is not compliant.\r\nNo request body was supplied.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookRuns/{id}": {
      "get": {
        "tags": ["RunbookRuns"],
        "summary": "Get a Runbook Run by ID",
        "operationId": "getRunbookRunById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookRun to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["RunbookRuns"],
        "summary": "Delete a RunbookRunResource by ID",
        "description": "Deletes a runbookRun.",
        "operationId": "deleteRunbookRun",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookRunResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookRuns": {
      "get": {
        "tags": ["RunbookRuns"],
        "summary": "Get a list of RunbookRunResources",
        "description": "Lists all of the runbookRuns in the supplied Octopus Deploy Space, from projects, snapshots and environments accessible by the current user. The results will be sorted from most recent to least recent runbookRun.",
        "operationId": "indexRunbookRuns_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["RunbookRuns"],
        "description": "Creates a new runbookRun.",
        "operationId": "createRunbookRunCreate_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "License is not compliant.\r\nNo request body was supplied.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookRuns/{id}": {
      "get": {
        "tags": ["RunbookRuns"],
        "summary": "Get a Runbook Run by ID",
        "operationId": "getRunbookRunById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookRun to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["RunbookRuns"],
        "summary": "Delete a RunbookRunResource by ID",
        "description": "Deletes a runbookRun.",
        "operationId": "deleteRunbookRun_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookRunResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/runbooks": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a list of RunbookResources for the given ProjectResource",
        "description": "Lists all of the Runbooks that belong to the given project.",
        "operationId": "indexProjectRunbooks",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all the Runbooks in the supplied Octopus Deploy Space, sorted by Name",
        "operationId": "indexRunbooks",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Runbooks"],
        "summary": "Create a RunbookResource",
        "description": "Creates a new process.",
        "operationId": "createRunbook",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/all": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all of the runbooks in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllRunbooks",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all RunbookResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RunbookResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a Runbook by ID",
        "operationId": "getRunbookById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Runbook to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Runbooks"],
        "summary": "Modify a RunbookResource by ID",
        "description": "Modifies a process. Only allowed for processes owned by a project (cannot be used to change the process owned by a release).",
        "operationId": "updateRunbook",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Runbooks"],
        "summary": "Delete a RunbookResource by ID",
        "description": "Deletes an existing Runbook.",
        "operationId": "deleteRunbook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}/environments": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Lists all environments a Runbook can be run within based on its EnvironmentScope.",
        "operationId": "getRunbookEnvironments",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List_of_EnvironmentResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}/run": {
      "post": {
        "tags": ["Runbooks"],
        "description": "Runs the published version of this Runbook.",
        "operationId": "createRunbookRunForPublishedRunbookCreate",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookRunResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RunbookRunResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nRunbook has no published snapshot.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}/runbookRuns/preview/{environment}": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.",
        "operationId": "getRunbookRunPreviewForRunbook",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}/runbookRuns/preview/{environment}/{tenant}": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.",
        "operationId": "getRunbookRunPreviewForRunbook_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}/runbookRunTemplate": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets all of the information necessary for creating or editing a Runbook Run for this Runbook (when you do not have a snapshot).",
        "operationId": "getRunbookRunTemplateForRunbook",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets all of the information necessary for creating or editing a release using this Runbook.",
        "operationId": "getRunbookSnapshotTemplateForRunbook",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/runbooks": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a list of RunbookResources for the given ProjectResource",
        "description": "Lists all of the Runbooks that belong to the given project.",
        "operationId": "indexProjectRunbooks_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all the Runbooks in the supplied Octopus Deploy Space, sorted by Name",
        "operationId": "indexRunbooks_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Runbooks"],
        "summary": "Create a RunbookResource",
        "description": "Creates a new process.",
        "operationId": "createRunbook_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/all": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all of the runbooks in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllRunbooks_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all RunbookResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RunbookResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}": {
      "get": {
        "tags": ["Runbooks"],
        "summary": "Get a Runbook by ID",
        "operationId": "getRunbookById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Runbook to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Runbooks"],
        "summary": "Modify a RunbookResource by ID",
        "description": "Modifies a process. Only allowed for processes owned by a project (cannot be used to change the process owned by a release).",
        "operationId": "updateRunbook_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Runbooks"],
        "summary": "Delete a RunbookResource by ID",
        "description": "Deletes an existing Runbook.",
        "operationId": "deleteRunbook_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}/environments": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Lists all environments a Runbook can be run within based on its EnvironmentScope.",
        "operationId": "getRunbookEnvironments_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List_of_EnvironmentResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}/run": {
      "post": {
        "tags": ["Runbooks"],
        "description": "Runs the published version of this Runbook.",
        "operationId": "createRunbookRunForPublishedRunbookCreate_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookRunResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RunbookRunResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nRunbook has no published snapshot.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}/runbookRuns/preview/{environment}": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.",
        "operationId": "getRunbookRunPreviewForRunbook_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}/runbookRuns/preview/{environment}/{tenant}": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.",
        "operationId": "getRunbookRunPreviewForRunbook_Spaces_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}/runbookRunTemplate": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets all of the information necessary for creating or editing a Runbook Run for this Runbook (when you do not have a snapshot).",
        "operationId": "getRunbookRunTemplateForRunbook_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": ["Runbooks"],
        "description": "Gets all of the information necessary for creating or editing a release using this Runbook.",
        "operationId": "getRunbookSnapshotTemplateForRunbook_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/runbookSnapshots": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a list of RunbookSnapshotResources for the given ProjectResource",
        "description": "Lists all of the runbookSnapshots that belong to the given project. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexProjectRunbookSnapshots",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/projects/{id}/runbookSnapshots/{name}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets a single runbookSnapshot by project ID and name.",
        "operationId": "getRunbookSnapshotByProjectAndName",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Name of the runbook",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo name parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbooks/{id}/runbookSnapshots": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a list of RunbookSnapshotResources for the given RunbookResource",
        "description": "Lists all of the runbookSnapshots that belong to the given runbook. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexRunbookRunbookSnapshots",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Runbook",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookSnapshots": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a list of Runbook Snapshots",
        "description": "Lists all of the snapshots in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent snapshot.",
        "operationId": "indexRunbookSnapshots",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["RunbookSnapshots"],
        "summary": "Create a RunbookSnapshotResource",
        "description": "Creates a new snapshot.",
        "operationId": "createRunbookSnapshot",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookSnapshotResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookSnapshots/{id}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a Runbook Snapshot by ID",
        "operationId": "getRunbookSnapshotById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookSnapshot to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["RunbookSnapshots"],
        "summary": "Modify a RunbookSnapshotResource by ID",
        "description": "Updates an existing snapshot.",
        "operationId": "updateRunbookSnapshot",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookSnapshotResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["RunbookSnapshots"],
        "summary": "Delete a RunbookSnapshotResource by ID",
        "description": "Deletes an existing snapshot, along with all of the runs, tasks and other associated resources belonging to the snapshot.",
        "operationId": "deleteRunbookSnapshot",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookSnapshotResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookSnapshots/{id}/runbookRuns/preview/{environment}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).",
        "operationId": "getRunbookRunPreviewForRunbookSnapshot",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookSnapshots/{id}/runbookRuns/preview/{environment}/{tenant}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).",
        "operationId": "getRunbookRunPreviewForRunbookSnapshot_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookSnapshots/{id}/runbookRuns/template": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets all of the information necessary for creating or editing a run for this snapshot.",
        "operationId": "getRunbookRunTemplateForRunbookSnapshot",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/runbookSnapshots/{id}/snapshot-variables": {
      "post": {
        "tags": ["RunbookSnapshots"],
        "description": "Refresh the variable snapshots associated with the runbook snapshot. The runbook's process must not have changed since the snapshot was created.",
        "operationId": "createRunbookSnapshotSnapshotVariables",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/runbookSnapshots": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a list of RunbookSnapshotResources for the given ProjectResource",
        "description": "Lists all of the runbookSnapshots that belong to the given project. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexProjectRunbookSnapshots_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/projects/{id}/runbookSnapshots/{name}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets a single runbookSnapshot by project ID and name.",
        "operationId": "getRunbookSnapshotByProjectAndName_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Name of the runbook",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo name parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbooks/{id}/runbookSnapshots": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a list of RunbookSnapshotResources for the given RunbookResource",
        "description": "Lists all of the runbookSnapshots that belong to the given runbook. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexRunbookRunbookSnapshots_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Runbook",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookSnapshots": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a list of Runbook Snapshots",
        "description": "Lists all of the snapshots in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent snapshot.",
        "operationId": "indexRunbookSnapshots_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["RunbookSnapshots"],
        "summary": "Create a RunbookSnapshotResource",
        "description": "Creates a new snapshot.",
        "operationId": "createRunbookSnapshot_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookSnapshotResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookSnapshots/{id}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "summary": "Get a Runbook Snapshot by ID",
        "operationId": "getRunbookSnapshotById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookSnapshot to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["RunbookSnapshots"],
        "summary": "Modify a RunbookSnapshotResource by ID",
        "description": "Updates an existing snapshot.",
        "operationId": "updateRunbookSnapshot_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookSnapshotResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["RunbookSnapshots"],
        "summary": "Delete a RunbookSnapshotResource by ID",
        "description": "Deletes an existing snapshot, along with all of the runs, tasks and other associated resources belonging to the snapshot.",
        "operationId": "deleteRunbookSnapshot_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the RunbookSnapshotResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/preview/{environment}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).",
        "operationId": "getRunbookRunPreviewForRunbookSnapshot_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/preview/{environment}/{tenant}": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).",
        "operationId": "getRunbookRunPreviewForRunbookSnapshot_Spaces_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environment",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/template": {
      "get": {
        "tags": ["RunbookSnapshots"],
        "description": "Gets all of the information necessary for creating or editing a run for this snapshot.",
        "operationId": "getRunbookRunTemplateForRunbookSnapshot_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/runbookSnapshots/{id}/snapshot-variables": {
      "post": {
        "tags": ["RunbookSnapshots"],
        "description": "Refresh the variable snapshots associated with the runbook snapshot. The runbook's process must not have changed since the snapshot was created.",
        "operationId": "createRunbookSnapshotSnapshotVariables_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scheduler": {
      "get": {
        "tags": ["Scheduler"],
        "description": "Returns status of Octopus scheduled tasks.",
        "operationId": "getScheduler",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "SchedulerStatusResource resource returned",
            "schema": {
              "$ref": "#/definitions/SchedulerStatusResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/start": {
      "get": {
        "tags": ["Scheduler"],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been started.",
        "operationId": "getSchedulerStart",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/stop": {
      "get": {
        "tags": ["Scheduler"],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been stopped.",
        "operationId": "getSchedulerStop",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/trigger": {
      "get": {
        "tags": ["Scheduler"],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been triggered.",
        "operationId": "getSchedulerTrigger",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/{name}/logs": {
      "get": {
        "tags": ["Scheduler"],
        "description": "Get the details of a scheduled task.",
        "operationId": "getScheduledTaskDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Name of the task",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ScheduledTaskDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/ScheduledTaskDetailsResource"
            }
          },
          "400": {
            "description": "No name parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/{name}/logs/raw": {
      "get": {
        "tags": ["Scheduler"],
        "description": "Get the details of a scheduled task as raw text.",
        "operationId": "getScheduledTaskRawDetails",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Name of the scheduled task",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No name parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scopeduserroles": {
      "get": {
        "tags": ["ScopedUserRole"],
        "description": "Lists the name and ID of all of the scoped user roles in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "getListScopedUserRole",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ScopedUserRoleResource resource returned",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ScopedUserRole"],
        "summary": "Create a ScopedUserRoleResource",
        "description": "Creates a scoped user role.",
        "operationId": "createScopedUserRole",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ScopedUserRoleResource Created",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/scopeduserroles": {
      "get": {
        "tags": ["ScopedUserRole"],
        "description": "Lists the name and ID of all of the scoped user roles in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "getListScopedUserRole_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_ScopedUserRoleResource resource returned",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["ScopedUserRole"],
        "summary": "Create a ScopedUserRoleResource",
        "description": "Creates a scoped user role.",
        "operationId": "createScopedUserRole_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ScopedUserRoleResource Created",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/scopeduserroles/{id}": {
      "get": {
        "tags": ["ScopedUserRoles"],
        "summary": "Get a Scoped User Role by ID",
        "operationId": "getScopedUserRoleById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ScopedUserRole to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ScopedUserRole"],
        "summary": "Modify a ScopedUserRoleResource by ID",
        "description": "Modifies an existing scoped user role.",
        "operationId": "updateScopedUserRole",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ScopedUserRoleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ScopedUserRoleResource Modified",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ScopedUserRole"],
        "summary": "Delete a ScopedUserRoleResource by ID",
        "description": "Deletes an existing scoped user role.",
        "operationId": "deleteScopedUserRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ScopedUserRoleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/scopeduserroles/{id}": {
      "get": {
        "tags": ["ScopedUserRoles"],
        "summary": "Get a Scoped User Role by ID",
        "operationId": "getScopedUserRoleById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ScopedUserRole to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["ScopedUserRole"],
        "summary": "Modify a ScopedUserRoleResource by ID",
        "description": "Modifies an existing scoped user role.",
        "operationId": "updateScopedUserRole_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ScopedUserRoleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ScopedUserRoleResource Modified",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["ScopedUserRole"],
        "summary": "Delete a ScopedUserRoleResource by ID",
        "description": "Deletes an existing scoped user role.",
        "operationId": "deleteScopedUserRole_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ScopedUserRoleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverconfiguration": {
      "get": {
        "tags": ["ServerConfiguration"],
        "description": "Gets information about the editable server configuration in use by the Octopus Server",
        "operationId": "getServerConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ServerConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/ServerConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["ServerConfiguration"],
        "description": "Updates the server configuration used by the Octopus Server",
        "operationId": "updateServerConfiguration",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverconfiguration/settings": {
      "get": {
        "tags": ["ServerConfiguration"],
        "description": "Gets information about the server configuration in use by the Octopus Server",
        "operationId": "getServerConfigurationSettingsList",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ServerConfigurationSettingsResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerConfigurationSettingsResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverstatus": {
      "get": {
        "tags": ["ServerStatus"],
        "description": "Shows information about the status of the Octopus Server.",
        "operationId": "getServerStatus",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverstatus/extensions": {
      "get": {
        "tags": ["ServerStatus"],
        "description": "Provides statistics for the loaded server extensions.",
        "operationId": "getExtensionStats",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ExtensionsInfoResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionsInfoResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverstatus/gc-collect": {
      "post": {
        "tags": ["ServerStatus"],
        "description": "Forces a GC collect.",
        "operationId": "createSystemGarbageCollect",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverstatus/health": {
      "get": {
        "tags": ["ServerStatus"],
        "description": "Provides a super simple interface perfect for checking the general health of your entire Octopus Server cluster.",
        "operationId": "getServerStatusHealth",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ServerStatusHealthResource resource returned",
            "schema": {
              "$ref": "#/definitions/ServerStatusHealthResource"
            }
          },
          "418": {
            "description": "ServerStatusHealthResource resource returned",
            "schema": {
              "$ref": "#/definitions/ServerStatusHealthResource"
            }
          }
        }
      }
    },
    "/serverstatus/logs": {
      "get": {
        "tags": ["ServerStatus"],
        "description": "Retrieves the most recent high-priority log messages from this execution of the Octopus Server process.",
        "operationId": "getRecentLogs",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverstatus/system-info": {
      "get": {
        "tags": ["ServerStatus"],
        "description": "Provides information about the Octopus Server process and the machine on which it is running.",
        "operationId": "getSystemInfo",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverstatus/system-report": {
      "get": {
        "tags": ["ServerStatus"],
        "description": "Creates a .zip archive containing an aggregate of the other system information APIs.",
        "operationId": "getSystemReport",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/serverstatus/timezones": {
      "get": {
        "tags": ["ServerStatus"],
        "description": "Lists timezones supported by the server.",
        "operationId": "getListServerTimezones",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ServerTimezoneResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerTimezoneResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/smtpconfiguration": {
      "get": {
        "tags": ["SmtpConfiguration"],
        "description": "Gets information about the SMTP (email) settings in use by the Octopus Server.",
        "operationId": "getSmtpConfiguration",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["SmtpConfiguration"],
        "description": "Updates the SMTP settings used by the Octopus Server.",
        "operationId": "updateSmtpConfiguration",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/smtpconfiguration/isconfigured": {
      "get": {
        "tags": ["SmtpConfiguration"],
        "description": "A low privilege check to determine if SMTP is configured",
        "operationId": "getSmtpIsConfigured",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "SmtpIsConfiguredResource resource returned",
            "schema": {
              "$ref": "#/definitions/SmtpIsConfiguredResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{spaceId}": {
      "get": {
        "tags": ["SpaceHome"],
        "description": "Returns a document describing the specified Space and links to other parts of the API that apply to the Space.",
        "operationId": "getSpaceHome",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "spaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SpaceRootResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceRootResource"
            }
          }
        }
      }
    },
    "/spaces": {
      "get": {
        "tags": ["Spaces"],
        "summary": "Get a list of SpaceResources",
        "description": "Lists all of the spaces in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexSpaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_SpaceResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Spaces"],
        "description": "Creates a new Space.",
        "operationId": "createSpace",
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "SpaceResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nYou cannot create another space. This will exceed the limits of your current license. Please contact sales@octopus.com to upgrade your licence."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/spaces/all": {
      "get": {
        "tags": ["Spaces"],
        "summary": "Get a list of SpaceResources",
        "description": "Lists all of the spaces in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllSpaces",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all SpaceResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpaceResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/spaces/{id}": {
      "get": {
        "tags": ["Spaces"],
        "summary": "Get a Space by ID",
        "operationId": "getSpaceById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Space to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SpaceResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Spaces"],
        "description": "Modifies an existing space.",
        "operationId": "updateModifySpace",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "SpaceResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nRequest has bad data"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Spaces"],
        "description": "Deletes an existing space.",
        "operationId": "deleteSpace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/spaces/{id}/logo": {
      "get": {
        "tags": ["Spaces"],
        "description": "Gets the logo associated with the space.",
        "operationId": "getSpaceLogo",
        "produces": ["image/png"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Spaces"],
        "description": "Updates the logo associated with the space.",
        "operationId": "createSpaceLogo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Spaces"],
        "description": "Updates the logo associated with the space.",
        "operationId": "updateSpaceLogo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/spaces/{id}/search": {
      "get": {
        "tags": ["Spaces"],
        "summary": "Searches in the supplied Octopus Deploy Space using the given keyword.",
        "operationId": "searchSpace",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Space to search",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "keyword",
            "description": "A keyword to search. Example: ABC",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpaceSearchResult"
              }
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/spaces/{id}/search": {
      "get": {
        "tags": ["Spaces"],
        "summary": "Searches in the supplied Octopus Deploy Space using the given keyword.",
        "operationId": "searchSpace_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Space to search",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "keyword",
            "description": "A keyword to search. Example: ABC",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpaceSearchResult"
              }
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all of the subscriptions in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexSubscriptions",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_SubscriptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/SubscriptionResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Subscription"],
        "summary": "Create a SubscriptionResource",
        "description": "Creates a new subscription",
        "operationId": "createSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SubscriptionResource Created",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/subscriptions": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all of the subscriptions in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexSubscriptions_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_SubscriptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/SubscriptionResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Subscription"],
        "summary": "Create a SubscriptionResource",
        "description": "Creates a new subscription",
        "operationId": "createSubscription_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SubscriptionResource Created",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/subscriptions/all": {
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get all Subscriptions",
        "description": "Lists all the subscriptions in the supplied Octopus Deploy Space.",
        "operationId": "getAllSubscriptions",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionResource"
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get a Subscription by ID",
        "operationId": "getSubscriptionById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Subscription to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Subscription"],
        "summary": "Modify a SubscriptionResource by ID",
        "description": "Updates an existing subscription",
        "operationId": "updateSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the SubscriptionResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SubscriptionResource Modified",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Subscription"],
        "summary": "Delete a SubscriptionResource by ID",
        "description": "Deletes an existing subscription.",
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the SubscriptionResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/subscriptions/all": {
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get all Subscriptions",
        "description": "Lists all the subscriptions in the supplied Octopus Deploy Space.",
        "operationId": "getAllSubscriptions_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/subscriptions/{id}": {
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get a Subscription by ID",
        "operationId": "getSubscriptionById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Subscription to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Subscription"],
        "summary": "Modify a SubscriptionResource by ID",
        "description": "Updates an existing subscription",
        "operationId": "updateSubscription_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the SubscriptionResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SubscriptionResource Modified",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Subscription"],
        "summary": "Delete a SubscriptionResource by ID",
        "description": "Deletes an existing subscription.",
        "operationId": "deleteSubscription_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the SubscriptionResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tagsets": {
      "get": {
        "tags": ["TagSets"],
        "summary": "Get a list of TagSetResources",
        "description": "Lists all of the tag sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by the `SortOrder` field on each tag set.",
        "operationId": "indexTagSets",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TagSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/TagSetResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["TagSets"],
        "summary": "Create a TagSetResource",
        "description": "Creates a new tag set.",
        "operationId": "createTagSet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TagSetResource Created",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tagsets/all": {
      "get": {
        "tags": ["TagSets"],
        "summary": "Get a list of Tag Sets",
        "description": "Lists the details of all of the Tag Sets in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each Tag Set.",
        "operationId": "listAllTagSets",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagSetResource"
              }
            }
          }
        }
      }
    },
    "/tagsets/sortorder": {
      "put": {
        "tags": ["TagSets"],
        "description": "Takes an array of tag set IDs as the request body, uses the order of items in the array to sort the tag sets on the server. The ID of every tag set must be specified.",
        "operationId": "updateSortTagSets",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tagsets/{id}": {
      "get": {
        "tags": ["TagSets"],
        "summary": "Get a Tag Set by ID",
        "operationId": "getTagSetById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TagSet to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["TagSets"],
        "summary": "Modify a TagSetResource by ID",
        "description": "Modifies an existing tag set.",
        "operationId": "updateTagSet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TagSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TagSetResource Modified",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["TagSets"],
        "summary": "Delete a TagSetResource by ID",
        "description": "Deletes an existing tag set.",
        "operationId": "deleteTagSet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TagSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tagsets": {
      "get": {
        "tags": ["TagSets"],
        "summary": "Get a list of TagSetResources",
        "description": "Lists all of the tag sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by the `SortOrder` field on each tag set.",
        "operationId": "indexTagSets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TagSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/TagSetResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["TagSets"],
        "summary": "Create a TagSetResource",
        "description": "Creates a new tag set.",
        "operationId": "createTagSet_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TagSetResource Created",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tagsets/all": {
      "get": {
        "tags": ["TagSets"],
        "summary": "Get a list of Tag Sets",
        "description": "Lists the details of all of the Tag Sets in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each Tag Set.",
        "operationId": "listAllTagSets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagSetResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tagsets/sortorder": {
      "put": {
        "tags": ["TagSets"],
        "description": "Takes an array of tag set IDs as the request body, uses the order of items in the array to sort the tag sets on the server. The ID of every tag set must be specified.",
        "operationId": "updateSortTagSets_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tagsets/{id}": {
      "get": {
        "tags": ["TagSets"],
        "summary": "Get a Tag Set by ID",
        "operationId": "getTagSetById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TagSet to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["TagSets"],
        "summary": "Modify a TagSetResource by ID",
        "description": "Modifies an existing tag set.",
        "operationId": "updateTagSet_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TagSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TagSetResource Modified",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["TagSets"],
        "summary": "Delete a TagSetResource by ID",
        "description": "Deletes an existing tag set.",
        "operationId": "deleteTagSet_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TagSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "description": "Lists all of the tasks in the supplied Octopus Deploy Space. The results will be sorted from newest to oldest.",
        "operationId": "getListTasks",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a TaskResource",
        "description": "Creates a new task.",
        "operationId": "createTask",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The TaskResource resource to create",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TaskResource Created",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks/rerun/{id}": {
      "post": {
        "tags": ["Tasks"],
        "description": "Creates a new task and executes it, using a given task as the input. Note that deployment tasks cannot be re-run.",
        "operationId": "createTaskRerun",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis task cannot be re-run."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks/tasktypes": {
      "get": {
        "tags": ["Tasks"],
        "description": "Lists supported task types.",
        "operationId": "getListTaskTypes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_TaskTypeResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskTypeResource"
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a TaskResource by ID",
        "description": "Gets a single task by ID.",
        "operationId": "getTaskById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TaskResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TaskResource by ID",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks/{id}/cancel": {
      "post": {
        "tags": ["Tasks"],
        "description": "Marks the given task as canceled.",
        "operationId": "createTaskCancel",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks/{id}/details": {
      "get": {
        "tags": ["Tasks"],
        "description": "Gets a single task by ID, including the full task log as a tree of activity elements.",
        "operationId": "getTaskDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskDetailsResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks/{id}/queued-behind": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a list of TaskResources for the given TaskResource",
        "description": "Gets a list of tasks that this task is currently queued behind.",
        "operationId": "indexTaskQueuedBehind",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Task",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks/{id}/raw": {
      "get": {
        "tags": ["Tasks"],
        "description": "Gets the full task log of a given resource as plain text. Useful when the log needs to be rendered to a console or sent as an email attachment.",
        "operationId": "getTaskRaw",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/tasks/{id}/state": {
      "post": {
        "tags": ["Tasks"],
        "description": "Change the state of a task",
        "operationId": "createTaskState",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No body was provided.\r\nNo id parameter was provided.\r\nNo reason was provided.\r\nNo state was provided.\r\nThe task can not be put into the state.  Valid states are: Canceled, Failed, Success.\r\nThe task is already in the state.\r\nThe task state can not be changed to the selected state.  It can only be changed out of the states: Canceled, Failed, Success."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks": {
      "get": {
        "tags": ["Tasks"],
        "description": "Lists all of the tasks in the supplied Octopus Deploy Space. The results will be sorted from newest to oldest.",
        "operationId": "getListTasks_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a TaskResource",
        "description": "Creates a new task.",
        "operationId": "createTask_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The TaskResource resource to create",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TaskResource Created",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks/rerun/{id}": {
      "post": {
        "tags": ["Tasks"],
        "description": "Creates a new task and executes it, using a given task as the input. Note that deployment tasks cannot be re-run.",
        "operationId": "createTaskRerun_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis task cannot be re-run."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks/tasktypes": {
      "get": {
        "tags": ["Tasks"],
        "description": "Lists supported task types.",
        "operationId": "getListTaskTypes_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_TaskTypeResource resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskTypeResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a TaskResource by ID",
        "description": "Gets a single task by ID.",
        "operationId": "getTaskById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the TaskResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TaskResource by ID",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks/{id}/cancel": {
      "post": {
        "tags": ["Tasks"],
        "description": "Marks the given task as canceled.",
        "operationId": "createTaskCancel_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks/{id}/details": {
      "get": {
        "tags": ["Tasks"],
        "description": "Gets a single task by ID, including the full task log as a tree of activity elements.",
        "operationId": "getTaskDetails_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskDetailsResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks/{id}/queued-behind": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a list of TaskResources for the given TaskResource",
        "description": "Gets a list of tasks that this task is currently queued behind.",
        "operationId": "indexTaskQueuedBehind_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Task",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks/{id}/raw": {
      "get": {
        "tags": ["Tasks"],
        "description": "Gets the full task log of a given resource as plain text. Useful when the log needs to be rendered to a console or sent as an email attachment.",
        "operationId": "getTaskRaw_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tasks/{id}/state": {
      "post": {
        "tags": ["Tasks"],
        "description": "Change the state of a task",
        "operationId": "createTaskState_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No body was provided.\r\nNo id parameter was provided.\r\nNo reason was provided.\r\nNo state was provided.\r\nThe task can not be put into the state.  Valid states are: Canceled, Failed, Success.\r\nThe task is already in the state.\r\nThe task state can not be changed to the selected state.  It can only be changed out of the states: Canceled, Failed, Success."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/teammembership": {
      "get": {
        "tags": ["TeamMembership"],
        "summary": "Gets a list of team memberships for a user",
        "description": "Lists all teams a user is a member of, including any from external auth-provider security groups. Memberships are filtered by userId.",
        "operationId": "getTeamMembership",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamMembership"
              }
            }
          },
          "400": {
            "description": "No userId parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teammembership/previewteam": {
      "post": {
        "tags": ["TeamMembership"],
        "summary": "Preview Users that would belong to the specified Team",
        "description": "Lists all the Users that would belong to the specified Team, including information about whether they are directly assigned and/or indirectly assigned via external security groups.",
        "operationId": "createTeamMembershipPreview",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamMembership"
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "No Team resource provided",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/teammembership": {
      "get": {
        "tags": ["TeamMembership"],
        "summary": "Gets a list of team memberships for a user",
        "description": "Lists all teams a user is a member of, including any from external auth-provider security groups. Memberships are filtered by userId.",
        "operationId": "getTeamMembership_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamMembership"
              }
            }
          },
          "400": {
            "description": "No userId parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/teammembership/previewteam": {
      "post": {
        "tags": ["TeamMembership"],
        "summary": "Preview Users that would belong to the specified Team",
        "description": "Lists all the Users that would belong to the specified Team, including information about whether they are directly assigned and/or indirectly assigned via external security groups.",
        "operationId": "createTeamMembershipPreview_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamMembership"
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "No Team resource provided",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": ["Teams"],
        "summary": "Gets a list of teams",
        "description": "Lists all of the teams in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listTeams",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A list of Team IDs, to limit the matching of Teams to those with a particular ID. Example: [\"Teams-1\", \"Teams-2\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial name, to limit the set of Teams to those with a name that includes the partial name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["Teams"],
        "summary": "Creates a new Team",
        "description": "Creates a team.",
        "operationId": "createTeam",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Team created",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "No Team resource provided",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/all": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get a list of Teams",
        "description": "Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllTeams",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamResource"
              }
            }
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get a Team by ID",
        "operationId": "getTeamById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Team to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Teams"],
        "summary": "Modifies an existing Team",
        "description": "The Everyone team is treated as a special case and its members and external groups may not be changed.",
        "operationId": "updateTeam",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Teams"],
        "summary": "Deletes an existing Team",
        "operationId": "deleteTeam",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Team to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "The Team trying to be deleted is a built-in Team and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Team doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/teams/{id}/scopeduserroles": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get a list of a Team's Scoped User Roles",
        "description": "List all the Scoped User Roles for the Team. Results will be sorted by Space Id with System Teams being sorted before Space Teams.",
        "operationId": "getListScopedUserRoleForTeam",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the Team",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/teams": {
      "get": {
        "tags": ["Teams"],
        "summary": "Gets a list of teams",
        "description": "Lists all of the teams in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listTeams_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A list of Team IDs, to limit the matching of Teams to those with a particular ID. Example: [\"Teams-1\", \"Teams-2\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial name, to limit the set of Teams to those with a name that includes the partial name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["Teams"],
        "summary": "Creates a new Team",
        "description": "Creates a team.",
        "operationId": "createTeam_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Team created",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "No Team resource provided",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/teams/all": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get a list of Teams",
        "description": "Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllTeams_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/teams/{id}": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get a Team by ID",
        "operationId": "getTeamById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Team to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Teams"],
        "summary": "Modifies an existing Team",
        "description": "The Everyone team is treated as a special case and its members and external groups may not be changed.",
        "operationId": "updateTeam_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Teams"],
        "summary": "Deletes an existing Team",
        "operationId": "deleteTeam_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Team to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "The Team trying to be deleted is a built-in Team and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Team doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/teams/{id}/scopeduserroles": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get a list of a Team's Scoped User Roles",
        "description": "List all the Scoped User Roles for the Team. Results will be sorted by Space Id with System Teams being sorted before Space Teams.",
        "operationId": "getListScopedUserRoleForTeam_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the Team",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Gets a list of tenants",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name, and returned 30 at a time.",
        "operationId": "listTenants",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "description": "A Project ID, to limit the set of Tenants to those connected to a particular Project. Example: Projects-1",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "A list of Tenant IDs, to limit the matching of Tenants to those with a particular ID. Example: [\"Tenants-1\", \"Tenants-2\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of Tenant Tags, to limit the set of retrieved Tenants to those which are tagged with the specific tags. Example: Alpha,Beta,Stable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "(Obsolete) A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment. Left for backwards compatibility.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial name, to limit the set of Tenants to those with a name that includes the partial name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "clonedFromTenantId",
            "description": "A Tenant ID, to limit the included Tenants to those cloned from that Tenant. Example: Tenants-1",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Creates a new Tenant",
        "description": "Creates a new Tenant, optionally cloning an existing tenant if the clone query string parameter is provided.",
        "operationId": "createTenant",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "clone",
            "description": "The ID of the Tenant to clone. Example: Tenants-101",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tenant Created",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "No Tenant resource provided",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tenants/all": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Lists all tenants",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllTenants",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Tenant IDs to retrieve Tenants for. Example: Tenants-101,Tenants-201,Tenants-301",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "A Project ID, to limit the set of retrieved Tenants to those connected to a particular Project. Example: Projects-101",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of Tenant Tags, to limit the set of retrieved Tenants to those which are tagged with the specific tags. Example: Alpha,Beta,Stable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "(Obsolete) A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment. Left for backwards compatibility.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantResource"
              }
            }
          },
          "304": {
            "description": "Tenants Not Modified"
          }
        }
      }
    },
    "/tenants/status": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Reports back the status of multi-tenancy",
        "description": "If multi-tenancy is enabled, \"Enabled\" will be true, otherwise it will be false.",
        "operationId": "getTenantsConfiguration",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiTenancyStatusResource"
            }
          }
        }
      }
    },
    "/tenants/tag-test": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Checks tenants for matching tags",
        "operationId": "testTenantTag",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "tenantIds",
            "description": "A list of Tenant IDs to limit the matching to, delimited by commas. Example: Tenants-1,Tenants-2,Tenants-3",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A list of Tenant Tags to limit the matching to, delimited by commas. Example: Alpha,Beta,Stable",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/TagTestResult"
              }
            }
          }
        }
      }
    },
    "/tenants/variables-missing": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Returns a list of tenants who are missing required variables",
        "operationId": "getTenantVariablesMissing",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "tenantId",
            "description": "An ID for a Tenant. If supplied, will limit the result to variables missing for the Tenant identified by the ID. Example: Tenants-101",
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "A Project ID, to limit the set of inspected Tenants to those connected to a particular Project. Example: Projects-202",
            "type": "string"
          },
          {
            "in": "query",
            "name": "environmentId",
            "description": "An Environment ID, to limit the set of inspected Tenants to those connected to a particular Environment. Example: Environments-202",
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeDetails",
            "description": "A switch to indicate whether missing variable details should be returned along with names",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantsMissingVariablesResource"
              }
            }
          }
        }
      }
    },
    "/tenants/{id}": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Get a Tenant by ID",
        "operationId": "getTenantById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Modifies an existing Tenant",
        "operationId": "updateTenant",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant Modified",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Tenants"],
        "summary": "Deletes an existing tenant.",
        "operationId": "deleteTenant",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "This tenant has dependent resources and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The tenant doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tenants/{id}/logo": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Gets the logo associated with the Tenant",
        "operationId": "getTenantLogo",
        "produces": ["image/png", "image/jpeg", "image/svg+xml"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to retrieve the logo for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Sets the logo associated with the tenant.",
        "operationId": "createTenantLogo",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to set the logo for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid or unsupported image provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Updates the logo associated with the tenant.",
        "operationId": "updateTenantLogo",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to update the logo for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Invalid or unsupported image provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tenants/{id}/variables": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Gets variables associated with the provided tenant ID.",
        "operationId": "getVariablesByTenantId",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the Tenant to retrieve variables for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "404": {
            "description": "Tenant not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Creates the variables associated with the tenant.",
        "operationId": "createTenantVariables",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        }
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Updates the variables associated with the tenant.",
        "operationId": "updateTenantVariables",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tenants": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Gets a list of tenants",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name, and returned 30 at a time.",
        "operationId": "listTenants_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "description": "A Project ID, to limit the set of Tenants to those connected to a particular Project. Example: Projects-1",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "A list of Tenant IDs, to limit the matching of Tenants to those with a particular ID. Example: [\"Tenants-1\", \"Tenants-2\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of Tenant Tags, to limit the set of retrieved Tenants to those which are tagged with the specific tags. Example: Alpha,Beta,Stable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "(Obsolete) A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment. Left for backwards compatibility.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial name, to limit the set of Tenants to those with a name that includes the partial name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "clonedFromTenantId",
            "description": "A Tenant ID, to limit the included Tenants to those cloned from that Tenant. Example: Tenants-1",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip. Defaults to zero",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take. Defaults to 30",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantResourceCollection"
            }
          }
        }
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Creates a new Tenant",
        "description": "Creates a new Tenant, optionally cloning an existing tenant if the clone query string parameter is provided.",
        "operationId": "createTenant_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "clone",
            "description": "The ID of the Tenant to clone. Example: Tenants-101",
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tenant Created",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "No Tenant resource provided",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tenants/all": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Lists all tenants",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllTenants_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Tenant IDs to retrieve Tenants for. Example: Tenants-101,Tenants-201,Tenants-301",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "A Project ID, to limit the set of retrieved Tenants to those connected to a particular Project. Example: Projects-101",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of Tenant Tags, to limit the set of retrieved Tenants to those which are tagged with the specific tags. Example: Alpha,Beta,Stable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "(Obsolete) A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment. Left for backwards compatibility.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialName",
            "description": "A partial or complete name to limit the set of retrieved Tenants to. This will perform a \"contains\" style match against the supplied name or name-fragment",
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantResource"
              }
            }
          },
          "304": {
            "description": "Tenants Not Modified"
          }
        }
      }
    },
    "/{baseSpaceId}/tenants/status": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Reports back the status of multi-tenancy",
        "description": "If multi-tenancy is enabled, \"Enabled\" will be true, otherwise it will be false.",
        "operationId": "getTenantsConfiguration_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiTenancyStatusResource"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tenants/tag-test": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Checks tenants for matching tags",
        "operationId": "testTenantTag_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "tenantIds",
            "description": "A list of Tenant IDs to limit the matching to, delimited by commas. Example: Tenants-1,Tenants-2,Tenants-3",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A list of Tenant Tags to limit the matching to, delimited by commas. Example: Alpha,Beta,Stable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/TagTestResult"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tenants/variables-missing": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Returns a list of tenants who are missing required variables",
        "operationId": "getTenantVariablesMissing_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "tenantId",
            "description": "An ID for a Tenant. If supplied, will limit the result to variables missing for the Tenant identified by the ID. Example: Tenants-101",
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "A Project ID, to limit the set of inspected Tenants to those connected to a particular Project. Example: Projects-202",
            "type": "string"
          },
          {
            "in": "query",
            "name": "environmentId",
            "description": "An Environment ID, to limit the set of inspected Tenants to those connected to a particular Environment. Example: Environments-202",
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeDetails",
            "description": "A switch to indicate whether missing variable details should be returned along with names",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantsMissingVariablesResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tenants/{id}": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Get a Tenant by ID",
        "operationId": "getTenantById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Modifies an existing Tenant",
        "operationId": "updateTenant_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant Modified",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Tenants"],
        "summary": "Deletes an existing tenant.",
        "operationId": "deleteTenant_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "This tenant has dependent resources and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The tenant doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tenants/{id}/logo": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Gets the logo associated with the Tenant",
        "operationId": "getTenantLogo_Spaces",
        "produces": ["image/png", "image/jpeg", "image/svg+xml"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to retrieve the logo for",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Sets the logo associated with the tenant.",
        "operationId": "createTenantLogo_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to set the logo for",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid or unsupported image provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Updates the logo associated with the tenant.",
        "operationId": "updateTenantLogo_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to update the logo for",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Invalid or unsupported image provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/{baseSpaceId}/tenants/{id}/variables": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Gets variables associated with the provided tenant ID.",
        "operationId": "getVariablesByTenantId_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the Tenant to retrieve variables for",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "404": {
            "description": "Tenant not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Creates the variables associated with the tenant.",
        "operationId": "createTenantVariables_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        }
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Updates the variables associated with the tenant.",
        "operationId": "updateTenantVariables_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Tenant modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          }
        }
      }
    },
    "/tenantvariables/all": {
      "get": {
        "tags": ["TenantVariables"],
        "description": "Lists all of the tenant variables in the supplied Octopus Deploy Space. The results will be sorted alphabetically by id.",
        "operationId": "getTenantVariablesAll",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/tenantvariables/all": {
      "get": {
        "tags": ["TenantVariables"],
        "description": "Lists all of the tenant variables in the supplied Octopus Deploy Space. The results will be sorted alphabetically by id.",
        "operationId": "getTenantVariablesAll_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/upgradeconfiguration": {
      "get": {
        "tags": ["UpgradeConfiguration"],
        "description": "Gets information about the upgrade configuration in use by the Octopus Server.",
        "operationId": "getUpgradeConfiguration",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["UpgradeConfiguration"],
        "description": "Updates the upgrade configuration used by the Octopus Server.",
        "operationId": "updateUpgradeConfiguration",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/useronboarding": {
      "get": {
        "tags": ["UserOnboarding"],
        "description": "Gets information about how far the Octopus Server is towards having its first release deployed.",
        "operationId": "getOnboarding",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OnboardingResource resource returned",
            "schema": {
              "$ref": "#/definitions/OnboardingResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/useronboarding": {
      "get": {
        "tags": ["UserOnboarding"],
        "description": "Gets information about how far the Octopus Server is towards having its first release deployed.",
        "operationId": "getOnboarding_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OnboardingResource resource returned",
            "schema": {
              "$ref": "#/definitions/OnboardingResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/{id}/permissions": {
      "get": {
        "tags": ["UserPermissions"],
        "description": "Gets summarized permission information. Available for the current authenticated user only.",
        "operationId": "getUserGetPermissions",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/{id}/permissions/configuration": {
      "get": {
        "tags": ["UserPermissions"],
        "description": "Gets a summary of the configuration of the user's permissions information. Available for the current authenticated user only.",
        "operationId": "getUserGetPermissionsConfiguration",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/{id}/permissions/export": {
      "get": {
        "tags": ["UserPermissions"],
        "description": "Gets list of permissions as a csv file. Available for the current authenticated user only.",
        "operationId": "getUserPermissionsExport",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/users/{id}/permissions": {
      "get": {
        "tags": ["UserPermissions"],
        "description": "Gets summarized permission information. Available for the current authenticated user only.",
        "operationId": "getUserGetPermissions_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/users/{id}/permissions/configuration": {
      "get": {
        "tags": ["UserPermissions"],
        "description": "Gets a summary of the configuration of the user's permissions information. Available for the current authenticated user only.",
        "operationId": "getUserGetPermissionsConfiguration_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/users/{id}/permissions/export": {
      "get": {
        "tags": ["UserPermissions"],
        "description": "Gets list of permissions as a csv file. Available for the current authenticated user only.",
        "operationId": "getUserPermissionsExport_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/userroles": {
      "get": {
        "tags": ["UserRoles"],
        "summary": "Get a list of UserRoleResources",
        "description": "Lists all of the user roles in the current Octopus Deploy instance. The results will be sorted alphabetically by name.",
        "operationId": "indexUserRoles",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_UserRoleResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserRoleResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["UserRoles"],
        "summary": "Create a UserRoleResource",
        "description": "Creates a custom user role definition.",
        "operationId": "createUserRole",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The UserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "UserRoleResource Created",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/userroles/all": {
      "get": {
        "tags": ["UserRoles"],
        "summary": "Get a list of User Roles",
        "description": "Lists all of the User Roles in the current Octopus Deploy instance. The results will be sorted alphabetically by name.",
        "operationId": "listAllUserRoles",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRoleResource"
              }
            }
          }
        }
      }
    },
    "/userroles/{id}": {
      "get": {
        "tags": ["UserRoles"],
        "summary": "Get a User Role by ID",
        "operationId": "getUserRoleById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the UserRole to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["UserRoles"],
        "summary": "Modify a UserRoleResource by ID",
        "description": "Modifies an existing user role definition.",
        "operationId": "updateUserRole",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the UserRoleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The UserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserRoleResource Modified",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["UserRoles"],
        "summary": "Delete a UserRoleResource by ID",
        "description": "Deletes an existing user role.",
        "operationId": "deleteUserRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the UserRoleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users": {
      "post": {
        "tags": ["Users"],
        "description": "Creates a new user.",
        "operationId": "createUserCreate",
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied.\r\nUser creation failed.\r\nUsername is reserved and can't be used to create new users.\r\nYou cannot add multiple logins for the same identity provider."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "get": {
        "tags": ["Users"],
        "summary": "Get a list of UserResources",
        "description": "Lists all of the users in the current Octopus Deploy instance, from all teams. The results will be sorted alphabetically by username.",
        "operationId": "indexUsers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/all": {
      "get": {
        "tags": ["Users"],
        "summary": "Get a list of Users",
        "description": "Lists all the Users in the System. The results will be sorted alphabetically by `Username`",
        "operationId": "listAllUsers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResource"
              }
            }
          }
        }
      }
    },
    "/users/authentication": {
      "get": {
        "tags": ["Users"],
        "description": "Provides the details of the enabled authentication providers and whether the current user can edit logins for the given user.",
        "operationId": "getUserAuthentication",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "UserAuthenticationResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserAuthenticationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/authentication/{userId}": {
      "get": {
        "tags": ["Users"],
        "description": "Provides the details of the enabled authentication providers and whether the current user can edit logins for the given user.",
        "operationId": "getUserAuthentication_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the resource being edited",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserAuthenticationResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserAuthenticationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/external-search": {
      "get": {
        "tags": ["Users"],
        "description": "Searches for users, using the authentication providers.",
        "operationId": "getUserExternalSearch",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/identity-metadata": {
      "get": {
        "tags": ["Users"],
        "description": "Gets the metadata to describe the claims/fields used by authentication providers that support identities.",
        "operationId": "getUserIdentityMetadata",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "description": "Authenticates a user and returns a response with a cookie for the current user. This cookie can be submitted with future requests to avoid re-authentication.",
        "operationId": "createUserLogin",
        "responses": {}
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "description": "Revokes the authentication cookie from the current session.",
        "operationId": "createUserLogout",
        "responses": {}
      }
    },
    "/users/me": {
      "get": {
        "tags": ["Users"],
        "description": "Gets information about the current user.",
        "operationId": "getUserGetCurrent",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "description": "Registers a new user and responds with an authentication cookie. Unless the first administrator user is being registered, an invitation code must be provided.",
        "operationId": "createUserRegister",
        "responses": {}
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get a User by ID",
        "operationId": "getUserById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the User to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "description": "Modifies an existing user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "A user with a matching external login already exists.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPasswords cannot be set for service user accounts.\r\nYou cannot add multiple logins for the same identity provider."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a UserResource by ID",
        "description": "Delete an existing user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the UserResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/{id}/spaces": {
      "get": {
        "tags": ["Users"],
        "description": "Gets a list of spaces available to the current authenticated user only.",
        "operationId": "getUserGetSpaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/users/{id}/teams": {
      "get": {
        "tags": ["UserTeams"],
        "description": "Gets a list of teams (id and name only) for the specified user, including any from external auth-provider security groups.",
        "operationId": "getUserGetTeams",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ProjectedTeamReferenceDataItem resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectedTeamReferenceDataItem"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/users/{id}/teams": {
      "get": {
        "tags": ["UserTeams"],
        "description": "Gets a list of teams (id and name only) for the specified user, including any from external auth-provider security groups.",
        "operationId": "getUserGetTeams_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_ProjectedTeamReferenceDataItem resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectedTeamReferenceDataItem"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/variables/all": {
      "get": {
        "tags": ["Variables"],
        "summary": "Get a list of VariableSetResources",
        "description": "Lists all the variable sets in the supplied Octopus Deploy Space.",
        "operationId": "listAllVariableSets",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all VariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/variables/names": {
      "get": {
        "tags": ["Variables"],
        "description": "List the names of variables that can be used in deployment actions. If a project is specified, this will include variables in that project.  If a project environments filter is specified, project variables only scoped to the environment will be excluded. ",
        "operationId": "getVariableNamesList",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/variables/preview": {
      "get": {
        "tags": ["Variables"],
        "description": "List the evaluated variables for a deployment. ",
        "operationId": "getVariablePreviewList",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No project was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/variables/{id}": {
      "get": {
        "tags": ["Variables"],
        "summary": "Get a VariableSetResource by ID",
        "description": "Gets a variable set by Id.",
        "operationId": "getVariableSetById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the VariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load VariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Variables"],
        "description": "Updates a variable set.",
        "operationId": "updateVariableSet",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "Changes to these variables could not be saved, because another user has made changes to the variables between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nChanges to these variables could not be saved, because your available environment scopes changed while you were editing the variables. Please reload or open a new tab to make your changes.\r\nConverting a project with variables scoped to processes or deployment steps to version control is not supported.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPrompted variables cannot be scoped to anything except an environment.\r\nVariable ids must be unique.\r\nVariable set only scoped to owner.\r\nVariable validation failed.\r\nYou cannot modify this variable set because the set is frozen. You'll need to create a new variable set instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/variables/all": {
      "get": {
        "tags": ["Variables"],
        "summary": "Get a list of VariableSetResources",
        "description": "Lists all the variable sets in the supplied Octopus Deploy Space.",
        "operationId": "listAllVariableSets_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all VariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/variables/names": {
      "get": {
        "tags": ["Variables"],
        "description": "List the names of variables that can be used in deployment actions. If a project is specified, this will include variables in that project.  If a project environments filter is specified, project variables only scoped to the environment will be excluded. ",
        "operationId": "getVariableNamesList_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/variables/preview": {
      "get": {
        "tags": ["Variables"],
        "description": "List the evaluated variables for a deployment. ",
        "operationId": "getVariablePreviewList_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No project was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/variables/{id}": {
      "get": {
        "tags": ["Variables"],
        "summary": "Get a VariableSetResource by ID",
        "description": "Gets a variable set by Id.",
        "operationId": "getVariableSetById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the VariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load VariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": ["Variables"],
        "description": "Updates a variable set.",
        "operationId": "updateVariableSet_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "Changes to these variables could not be saved, because another user has made changes to the variables between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nChanges to these variables could not be saved, because your available environment scopes changed while you were editing the variables. Please reload or open a new tab to make your changes.\r\nConverting a project with variables scoped to processes or deployment steps to version control is not supported.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPrompted variables cannot be scoped to anything except an environment.\r\nVariable ids must be unique.\r\nVariable set only scoped to owner.\r\nVariable validation failed.\r\nYou cannot modify this variable set because the set is frozen. You'll need to create a new variable set instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workerpools": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a list of WorkerPoolResources",
        "description": "Lists all of the worker pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexWorkerPools",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_WorkerPoolResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["WorkerPools"],
        "summary": "Create a WorkerPoolResource",
        "description": "Creates a new worker pool.",
        "operationId": "createWorkerPool",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerPoolResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workerpools/all": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a list of Worker Pools",
        "description": "Lists the name and ID of all of the Worker Pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each Worker Pool.",
        "operationId": "listAllWorkerPools",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Worker Pool IDs to retrieve Worker Pools for. Example: WorkerPool-101,WorkerPool-201",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerPoolResource"
              }
            }
          }
        }
      }
    },
    "/workerpools/dynamicworkertypes": {
      "get": {
        "tags": ["WorkerPools"],
        "description": "Lists the available Worker Types for the Dynamic Worker Pool",
        "operationId": "getWorkerPoolDynamicWorkerTypes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "WorkerPoolDynamicWorkerTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolDynamicWorkerTypesResource"
            }
          },
          "500": {
            "description": "Dynamic Worker API Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workerpools/sortorder": {
      "put": {
        "tags": ["WorkerPools"],
        "description": "Takes an array of work pool IDs as the request body, uses the order of items in the array to sort the worker pools on the server. The ID of every worker pool must be specified.",
        "operationId": "updateSortWorkerPools",
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workerpools/summary": {
      "get": {
        "tags": ["WorkerPools"],
        "description": "Lists all worker pools, including a summary of machine information",
        "operationId": "getWorkerPoolsSummary",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "WorkerPoolsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workerpools/supportedtypes": {
      "get": {
        "tags": ["WorkerPools"],
        "description": "Lists the available Worker Pool types.",
        "operationId": "getWorkerPoolSupportedTypes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "WorkerPoolSupportedTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolSupportedTypesResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workerpools/{id}": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a Worker Pool by ID",
        "operationId": "getWorkerPoolById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPool to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["WorkerPools"],
        "summary": "Modify a WorkerPoolResource by ID",
        "description": "Modifies an existing worker pool.",
        "operationId": "updateWorkerPool",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPoolResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["WorkerPools"],
        "summary": "Delete a WorkerPoolResource by ID",
        "description": "Deletes an existing pool.",
        "operationId": "deleteWorkerPool",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPoolResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workerpools/{id}/workers": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a list of WorkerResources for the given WorkerPoolResource",
        "description": "Lists all of the machines that belong to the given worker pool.",
        "operationId": "indexWorkerPoolWorkers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPool",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_WorkerResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workerpools": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a list of WorkerPoolResources",
        "description": "Lists all of the worker pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexWorkerPools_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_WorkerPoolResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["WorkerPools"],
        "summary": "Create a WorkerPoolResource",
        "description": "Creates a new worker pool.",
        "operationId": "createWorkerPool_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerPoolResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workerpools/all": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a list of Worker Pools",
        "description": "Lists the name and ID of all of the Worker Pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each Worker Pool.",
        "operationId": "listAllWorkerPools_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A set of Worker Pool IDs to retrieve Worker Pools for. Example: WorkerPool-101,WorkerPool-201",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerPoolResource"
              }
            }
          }
        }
      }
    },
    "/{baseSpaceId}/workerpools/dynamicworkertypes": {
      "get": {
        "tags": ["WorkerPools"],
        "description": "Lists the available Worker Types for the Dynamic Worker Pool",
        "operationId": "getWorkerPoolDynamicWorkerTypes_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolDynamicWorkerTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolDynamicWorkerTypesResource"
            }
          },
          "500": {
            "description": "Dynamic Worker API Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workerpools/sortorder": {
      "put": {
        "tags": ["WorkerPools"],
        "description": "Takes an array of work pool IDs as the request body, uses the order of items in the array to sort the worker pools on the server. The ID of every worker pool must be specified.",
        "operationId": "updateSortWorkerPools_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workerpools/summary": {
      "get": {
        "tags": ["WorkerPools"],
        "description": "Lists all worker pools, including a summary of machine information",
        "operationId": "getWorkerPoolsSummary_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workerpools/supportedtypes": {
      "get": {
        "tags": ["WorkerPools"],
        "description": "Lists the available Worker Pool types.",
        "operationId": "getWorkerPoolSupportedTypes_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolSupportedTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolSupportedTypesResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workerpools/{id}": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a Worker Pool by ID",
        "operationId": "getWorkerPoolById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPool to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["WorkerPools"],
        "summary": "Modify a WorkerPoolResource by ID",
        "description": "Modifies an existing worker pool.",
        "operationId": "updateWorkerPool_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPoolResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["WorkerPools"],
        "summary": "Delete a WorkerPoolResource by ID",
        "description": "Deletes an existing pool.",
        "operationId": "deleteWorkerPool_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPoolResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workerpools/{id}/workers": {
      "get": {
        "tags": ["WorkerPools"],
        "summary": "Get a list of WorkerResources for the given WorkerPoolResource",
        "description": "Lists all of the machines that belong to the given worker pool.",
        "operationId": "indexWorkerPoolWorkers_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerPool",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_WorkerResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerResourceCollection"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workers": {
      "get": {
        "tags": ["Workers"],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the registered worker machines in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexWorkers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_WorkerResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Workers"],
        "summary": "Create a WorkerResource",
        "description": "Creates a new worker.",
        "operationId": "createWorker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workers/all": {
      "get": {
        "tags": ["Workers"],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the workers in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllWorkers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Load all WorkerResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workers/discover": {
      "get": {
        "tags": ["Workers"],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.",
        "operationId": "getDiscoverWorker",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workers/operatingsystem/names/all": {
      "get": {
        "tags": ["Workers"],
        "description": "Gets all operating system names for workers. The result will be a string array.",
        "operationId": "getWorkerOperatingSystemNamesListAll",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workers/operatingsystem/shells/all": {
      "get": {
        "tags": ["Workers"],
        "description": "Gets all operating system shell names for workers. The result will be a string array.",
        "operationId": "getWorkerOperatingSystemShellNameListAll",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workers/{id}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Get a Worker by ID",
        "operationId": "getWorkerById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Worker to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Workers"],
        "summary": "Modify a WorkerResource by ID",
        "description": "Modifies an existing worker machine.",
        "operationId": "updateWorker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Workers"],
        "summary": "Delete a WorkerResource by ID",
        "description": "Deletes an existing worker machine.",
        "operationId": "deleteWorker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/workers/{id}/connection": {
      "get": {
        "tags": ["Workers"],
        "description": "Get the status of the network connection between the Octopus server and a worker.",
        "operationId": "getWorkerConnectionStatus",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workers": {
      "get": {
        "tags": ["Workers"],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the registered worker machines in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexWorkers_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "take",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection_of_WorkerResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerResourceCollection"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Workers"],
        "summary": "Create a WorkerResource",
        "description": "Creates a new worker.",
        "operationId": "createWorker_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workers/all": {
      "get": {
        "tags": ["Workers"],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the workers in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllWorkers_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all WorkerResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workers/discover": {
      "get": {
        "tags": ["Workers"],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.",
        "operationId": "getDiscoverWorker_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workers/operatingsystem/names/all": {
      "get": {
        "tags": ["Workers"],
        "description": "Gets all operating system names for workers. The result will be a string array.",
        "operationId": "getWorkerOperatingSystemNamesListAll_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workers/operatingsystem/shells/all": {
      "get": {
        "tags": ["Workers"],
        "description": "Gets all operating system shell names for workers. The result will be a string array.",
        "operationId": "getWorkerOperatingSystemShellNameListAll_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable_of_String resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workers/{id}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Get a Worker by ID",
        "operationId": "getWorkerById_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Worker to load",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "404": {
            "description": "No ID parameter was provided.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["Workers"],
        "summary": "Modify a WorkerResource by ID",
        "description": "Modifies an existing worker machine.",
        "operationId": "updateWorker_Spaces",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Workers"],
        "summary": "Delete a WorkerResource by ID",
        "description": "Deletes an existing worker machine.",
        "operationId": "deleteWorker_Spaces",
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the WorkerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/workers/{id}/connection": {
      "get": {
        "tags": ["Workers"],
        "description": "Get the status of the network connection between the Octopus server and a worker.",
        "operationId": "getWorkerConnectionStatus_Spaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "baseSpaceId",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyQuery": []
          },
          {
            "NugetApiKeyHeader": []
          }
        ]
      }
    }
  },
  "definitions": {
    "AccountResource": {
      "type": "object",
      "properties": {
        "AccountType": {
          "enum": [
            "AmazonWebServicesAccount",
            "AzureServicePrincipal",
            "AzureSubscription",
            "None",
            "SshKeyPair",
            "Token",
            "UsernamePassword"
          ],
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "type": "string"
        },
        "EnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "TenantedDeploymentParticipation": {
          "$ref": "#/definitions/TenantedDeploymentMode"
        },
        "TenantIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AccountResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AccountUsageResource": {
      "type": "object",
      "properties": {
        "DeploymentProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsage"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LibraryVariableSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetUsageEntry"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectVariableSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectVariableSetUsage"
          }
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsage"
          }
        },
        "RunbookProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookStepUsage"
          }
        },
        "RunbookSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotUsage"
          }
        },
        "Targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetUsageEntry"
          }
        }
      }
    },
    "ActionTemplateCategoryResource": {
      "type": "object",
      "properties": {
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ActionTemplateParameterResource": {
      "type": "object",
      "properties": {
        "DefaultValue": {
          "$ref": "#/definitions/PropertyValueResource"
        },
        "DisplaySettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "HelpText": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ActionTemplateResource": {
      "required": ["ActionType", "Name"],
      "type": "object",
      "properties": {
        "ActionType": {
          "type": "string"
        },
        "CommunityActionTemplateId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageReference"
          }
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          },
          "readOnly": true
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "SpaceId": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ActionTemplateResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ActionTemplateSearchResource": {
      "type": "object",
      "properties": {
        "Author": {
          "type": "string"
        },
        "Categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Category": {
          "type": "string"
        },
        "CommunityActionTemplateId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "HasUpdate": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "IsBuiltIn": {
          "type": "boolean"
        },
        "IsInstalled": {
          "type": "boolean"
        },
        "Keywords": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Website": {
          "type": "string"
        }
      }
    },
    "ActionTemplateUsageResource": {
      "type": "object",
      "properties": {
        "ActionId": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "ActionTemplateId": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProcessId": {
          "type": "string"
        },
        "ProcessType": {
          "$ref": "#/definitions/ProcessType"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "RunbookName": {
          "type": "string"
        },
        "StepId": {
          "type": "string"
        },
        "StepName": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "ActionUpdateOutcome": {
      "enum": [
        "Success",
        "ManualMergeRequired",
        "DefaultParamterValueMissing",
        "RemovedPackageInUse"
      ],
      "type": "string"
    },
    "ActionUpdatePackageUsedBy": {
      "enum": [
        "ProjectVersionStrategy",
        "ProjectReleaseCreationStrategy",
        "ChannelRule"
      ],
      "type": "string"
    },
    "ActionUpdateRemovedPackageUsage": {
      "type": "object",
      "properties": {
        "PackageReference": {
          "type": "string"
        },
        "UsedBy": {
          "$ref": "#/definitions/ActionUpdatePackageUsedBy"
        },
        "UsedById": {
          "type": "string"
        },
        "UsedByName": {
          "type": "string"
        }
      }
    },
    "ActionUpdateResultResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ManualMergeRequiredReasonsByPropertyName": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "NamesOfNewParametersMissingDefaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Outcome": {
          "$ref": "#/definitions/ActionUpdateOutcome"
        },
        "RemovedPackageUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionUpdateRemovedPackageUsage"
          }
        }
      }
    },
    "ActivityLogElement": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string"
        },
        "Detail": {
          "type": "string"
        },
        "MessageText": {
          "type": "string"
        },
        "OccurredAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ActivityLogEntry": {
      "type": "object",
      "properties": {
        "Category": {
          "$ref": "#/definitions/ActivityLogEntryCategory"
        },
        "Detail": {
          "type": "string"
        },
        "MessageText": {
          "type": "string"
        },
        "OccurredAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ActivityLogEntryCategory": {
      "enum": [
        "Trace",
        "Verbose",
        "Info",
        "Wait",
        "Highlight",
        "Gap",
        "Alert",
        "Warning",
        "Error",
        "Fatal",
        "Planned",
        "Updated",
        "Finished",
        "Abandoned"
      ],
      "type": "string"
    },
    "ActivityLogTreeNode": {
      "type": "object",
      "properties": {
        "Children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogTreeNode"
          },
          "readOnly": true
        },
        "Ended": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LogElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogEntry"
          },
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "ProgressMessage": {
          "type": "string"
        },
        "ProgressPercentage": {
          "format": "int32",
          "type": "integer"
        },
        "ShowAtSummaryLevel": {
          "type": "boolean",
          "readOnly": true
        },
        "Started": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/ActivityStatus"
        }
      }
    },
    "ActivityStatus": {
      "enum": [
        "Pending",
        "Running",
        "Success",
        "Failed",
        "Skipped",
        "SuccessWithWarning",
        "Canceled"
      ],
      "type": "string"
    },
    "ApiKeyCreatedResource": {
      "type": "object",
      "properties": {
        "ApiKey": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Expires": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Purpose": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "ApiKeyResource": {
      "type": "object",
      "properties": {
        "ApiKey": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Expires": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Purpose": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "ApiKeyResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiKeyResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ArtifactResource": {
      "required": ["Filename"],
      "type": "object",
      "properties": {
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Filename": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "LogCorrelationId": {
          "type": "string"
        },
        "ServerTaskId": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "ArtifactResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AuthenticationProviderElement": {
      "type": "object",
      "properties": {
        "CSSLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FormsLoginEnabled": {
          "type": "boolean"
        },
        "IdentityType": {
          "$ref": "#/definitions/IdentityType"
        },
        "JavascriptLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "AuthenticationProviderThatSupportsGroups": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "IsRoleBased": {
          "type": "boolean"
        },
        "LookupUri": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "SupportsGroupLookup": {
          "type": "boolean"
        }
      }
    },
    "AuthenticationResource": {
      "type": "object",
      "properties": {
        "AnyAuthenticationProvidersSupportPasswordManagement": {
          "type": "boolean"
        },
        "AuthenticationProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationProviderElement"
          }
        },
        "AutoLoginEnabled": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AutoDeployReleaseOverrideResource": {
      "type": "object",
      "properties": {
        "EnvironmentId": {
          "type": "string"
        },
        "ReleaseId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        }
      }
    },
    "AzureEnvironmentResource": {
      "type": "object",
      "properties": {
        "AuthenticationEndpoint": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "GraphEndpoint": {
          "type": "string"
        },
        "ManagementEndpoint": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ResourceManagerEndpoint": {
          "type": "string"
        },
        "StorageEndpointSuffix": {
          "type": "string"
        }
      }
    },
    "AzureResourceGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "AzureStorageAccountResource": {
      "type": "object",
      "properties": {
        "Location": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "AzureWebSiteResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Region": {
          "type": "string",
          "readOnly": true
        },
        "ResourceGroup": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AzureWebSiteSlotResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        },
        "ResourceGroupName": {
          "type": "string"
        },
        "Site": {
          "type": "string"
        }
      }
    },
    "BuiltInFeedStatsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TotalPackages": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CalamariUpdateBehavior": {
      "enum": ["UpdateOnDeployment", "UpdateOnNewMachine", "UpdateAlways"],
      "type": "string"
    },
    "CalendarSystem": {
      "type": "object",
      "properties": {
        "Eras": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Era"
          },
          "readOnly": true
        },
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "MaxYear": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "MinYear": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CertificateConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SignatureAlgorithm": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        }
      }
    },
    "CertificateConfigurationResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateConfigurationResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CertificateFormat": {
      "enum": ["Pkcs12", "Der", "Pem", "Unknown"],
      "type": "string"
    },
    "CertificateResource": {
      "type": "object",
      "properties": {
        "Archived": {
          "format": "date-time",
          "type": "string"
        },
        "CertificateChain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/X509Certificate"
          }
        },
        "CertificateData": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "CertificateDataFormat": {
          "$ref": "#/definitions/CertificateFormat"
        },
        "EnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "HasPrivateKey": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "IsExpired": {
          "type": "boolean"
        },
        "IssuerCommonName": {
          "type": "string"
        },
        "IssuerDistinguishedName": {
          "type": "string"
        },
        "IssuerOrganization": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "NotAfter": {
          "format": "date-time",
          "type": "string"
        },
        "NotBefore": {
          "format": "date-time",
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "Password": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "ReplacedBy": {
          "type": "string"
        },
        "SelfSigned": {
          "type": "boolean"
        },
        "SerialNumber": {
          "type": "string"
        },
        "SignatureAlgorithmName": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "SubjectAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SubjectCommonName": {
          "type": "string"
        },
        "SubjectDistinguishedName": {
          "type": "string"
        },
        "SubjectOrganization": {
          "type": "string"
        },
        "TenantedDeploymentParticipation": {
          "$ref": "#/definitions/TenantedDeploymentMode"
        },
        "TenantIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Thumbprint": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CertificateResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CertificateUsageResource": {
      "type": "object",
      "properties": {
        "DeploymentTargetUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTargetResource"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LibraryVariableSetUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetResource"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectResource"
          }
        },
        "TenantUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TenantResource"
          }
        }
      }
    },
    "ChangeDetails": {
      "type": "object",
      "properties": {
        "Differences": {},
        "DocumentContext": {}
      }
    },
    "ChannelResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LifecycleId": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelVersionRuleResource"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "TenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ChannelResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ChannelVersionRuleResource": {
      "type": "object",
      "properties": {
        "ActionPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentActionPackageResource"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Tag": {
          "type": "string"
        },
        "VersionRange": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "CloudTemplateMetadata": {
      "type": "object",
      "properties": {
        "Metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "Values": {}
      }
    },
    "CommitDetails": {
      "type": "object",
      "properties": {
        "Comment": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LinkUrl": {
          "type": "string"
        }
      }
    },
    "CommunicationStyle": {
      "enum": [
        "None",
        "TentaclePassive",
        "TentacleActive",
        "Ssh",
        "OfflineDrop",
        "AzureWebApp",
        "Ftp",
        "AzureCloudService",
        "AzureServiceFabricCluster",
        "Kubernetes"
      ],
      "type": "string"
    },
    "CommunityActionTemplateResource": {
      "type": "object",
      "properties": {
        "Author": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "HistoryUrl": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          },
          "readOnly": true
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "Type": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "Website": {
          "type": "string"
        }
      }
    },
    "CommunityActionTemplateResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommunityActionTemplateResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ConfigurationSectionMetadata": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ConfigurationSectionMetadataCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationSectionMetadata"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ConnectivityCheck": {
      "type": "object",
      "properties": {
        "DependsOnPropertyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Title": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      }
    },
    "ConnectivityCheckMessage": {
      "type": "object",
      "properties": {
        "Category": {
          "$ref": "#/definitions/ConnectivityCheckMessageCategory"
        },
        "Message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ConnectivityCheckMessageCategory": {
      "enum": ["Info", "Warning", "Error"],
      "type": "string"
    },
    "ConnectivityCheckResponse": {
      "type": "object",
      "properties": {
        "Messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectivityCheckMessage"
          },
          "readOnly": true
        }
      }
    },
    "Control": {
      "type": "object"
    },
    "ConvertProjectToVersionControlledResponse": {
      "required": ["Messages"],
      "type": "object",
      "properties": {
        "Messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DashboardConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IncludedEnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedProjectGroupIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedProjectIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedTenantIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedTenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectLimit": {
          "format": "int32",
          "type": "integer"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "DashboardEnvironmentResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "DashboardItemResource": {
      "type": "object",
      "properties": {
        "ChannelId": {
          "type": "string"
        },
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "DeploymentId": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "IsCompleted": {
          "type": "boolean"
        },
        "IsCurrent": {
          "type": "boolean"
        },
        "IsPrevious": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/TaskState"
        },
        "TaskId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        }
      }
    },
    "DashboardProjectGroupResource": {
      "type": "object",
      "properties": {
        "EnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "DashboardProjectResource": {
      "type": "object",
      "properties": {
        "CanPerformUntenantedDeployment": {
          "type": "boolean"
        },
        "EnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "ProjectGroupId": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "TenantedDeploymentMode": {
          "$ref": "#/definitions/TenantedDeploymentMode"
        }
      }
    },
    "DashboardRenderMode": {
      "enum": ["VirtualizeColumns", "VirtualizeRowsAndColumns"],
      "type": "string"
    },
    "DashboardResource": {
      "type": "object",
      "properties": {
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardEnvironmentResource"
          }
        },
        "Id": {
          "type": "string"
        },
        "IsFiltered": {
          "type": "boolean"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardItemResource"
          }
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PreviousItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardItemResource"
          }
        },
        "ProjectGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardProjectGroupResource"
          }
        },
        "ProjectLimit": {
          "format": "int32",
          "type": "integer"
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardProjectResource"
          }
        },
        "Tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardTenantResource"
          }
        }
      }
    },
    "DashboardTenantResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "ProjectEnvironments": {
          "type": "object",
          "additionalProperties": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "TenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DefectResource": {
      "required": ["Description"],
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Status": {
          "$ref": "#/definitions/DefectStatus"
        }
      }
    },
    "DefectResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefectResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DefectStatus": {
      "enum": ["Unresolved", "Resolved"],
      "type": "string"
    },
    "DeleteMachinesBehavior": {
      "enum": ["DoNotDelete", "DeleteUnavailableMachines"],
      "type": "string"
    },
    "DeploymentActionCondition": {
      "enum": ["Success", "Variable"],
      "type": "string"
    },
    "DeploymentActionContainerResource": {
      "type": "object",
      "properties": {
        "FeedId": {
          "type": "string"
        },
        "Image": {
          "type": "string"
        }
      }
    },
    "DeploymentActionPackageResource": {
      "type": "object",
      "properties": {
        "DeploymentAction": {
          "type": "string"
        },
        "PackageReference": {
          "type": "string"
        }
      }
    },
    "DeploymentActionResource": {
      "type": "object",
      "properties": {
        "ActionType": {
          "type": "string"
        },
        "CanBeUsedForProjectVersioning": {
          "type": "boolean"
        },
        "Channels": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Condition": {
          "$ref": "#/definitions/DeploymentActionCondition"
        },
        "Container": {
          "$ref": "#/definitions/DeploymentActionContainerResource"
        },
        "Environments": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ExcludedEnvironments": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Id": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "IsRequired": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageReference"
          }
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "TenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "WorkerPoolId": {
          "type": "string"
        },
        "WorkerPoolVariable": {
          "type": "string"
        }
      }
    },
    "DeploymentConnectivityPolicy": {
      "type": "object",
      "properties": {
        "AllowDeploymentsToNoTargets": {
          "type": "boolean"
        },
        "ExcludeUnhealthyTargets": {
          "type": "boolean"
        },
        "SkipMachineBehavior": {
          "$ref": "#/definitions/SkipMachineBehavior"
        },
        "TargetRoles": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentEnvironmentSettingsMetadata": {
      "type": "object",
      "properties": {
        "ExtensionId": {
          "type": "string"
        },
        "Metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "DeploymentPreviewResource": {
      "type": "object",
      "properties": {
        "Changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseChanges"
          }
        },
        "ChangesMarkdown": {
          "type": "string"
        },
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "StepsToExecute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTemplateStep"
          }
        },
        "UseGuidedFailureModeByDefault": {
          "type": "boolean"
        }
      }
    },
    "DeploymentProcessResource": {
      "required": ["Version"],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastSnapshotId": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentStepResource"
          },
          "readOnly": true
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DeploymentProcessResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentProcessResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DeploymentPromomotionTenant": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        }
      }
    },
    "DeploymentPromotionTarget": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "DeploymentResource": {
      "required": ["EnvironmentId", "ReleaseId"],
      "type": "object",
      "properties": {
        "Changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseChanges"
          }
        },
        "ChangesMarkdown": {
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        },
        "Comments": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "DeployedBy": {
          "type": "string"
        },
        "DeployedById": {
          "type": "string"
        },
        "DeployedToMachineIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "ExcludedMachineIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FailureEncountered": {
          "type": "boolean"
        },
        "ForcePackageDownload": {
          "type": "boolean"
        },
        "ForcePackageRedeployment": {
          "type": "boolean"
        },
        "FormValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ManifestVariableSetId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseId": {
          "type": "string"
        },
        "SkipActions": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "SpecificMachineIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TaskId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "TentacleRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        }
      }
    },
    "DeploymentResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DeploymentSettingsResource": {
      "type": "object",
      "properties": {
        "ConnectivityPolicy": {
          "$ref": "#/definitions/DeploymentConnectivityPolicy"
        },
        "DefaultGuidedFailureMode": {
          "$ref": "#/definitions/GuidedFailureMode"
        },
        "DefaultToSkipIfAlreadyInstalled": {
          "type": "boolean"
        },
        "DeploymentChangesTemplate": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "ReleaseNotesTemplate": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "VersioningStrategy": {
          "$ref": "#/definitions/VersioningStrategyResource"
        }
      }
    },
    "DeploymentStepCondition": {
      "enum": ["Success", "Failure", "Always", "Variable"],
      "type": "string"
    },
    "DeploymentStepPackageRequirement": {
      "enum": [
        "LetOctopusDecide",
        "BeforePackageAcquisition",
        "AfterPackageAcquisition"
      ],
      "type": "string"
    },
    "DeploymentStepResource": {
      "type": "object",
      "properties": {
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentActionResource"
          },
          "readOnly": true
        },
        "Condition": {
          "$ref": "#/definitions/DeploymentStepCondition"
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PackageRequirement": {
          "$ref": "#/definitions/DeploymentStepPackageRequirement"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "StartTrigger": {
          "$ref": "#/definitions/DeploymentStepStartTrigger"
        }
      }
    },
    "DeploymentStepStartTrigger": {
      "enum": ["StartAfterPrevious", "StartWithPrevious"],
      "type": "string"
    },
    "DeploymentTargetResource": {
      "type": "object",
      "properties": {
        "Architecture": {
          "type": "string"
        },
        "Endpoint": {
          "$ref": "#/definitions/EndpointResource"
        },
        "EnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "HealthStatus": {
          "$ref": "#/definitions/MachineModelHealthStatus"
        },
        "Id": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "IsInProcess": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MachinePolicyId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OperatingSystem": {
          "type": "string"
        },
        "Roles": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ShellName": {
          "type": "string"
        },
        "ShellVersion": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/MachineModelStatus"
        },
        "StatusSummary": {
          "type": "string"
        },
        "TenantedDeploymentParticipation": {
          "$ref": "#/definitions/TenantedDeploymentMode"
        },
        "TenantIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Thumbprint": {
          "type": "string"
        },
        "Uri": {
          "type": "string"
        }
      }
    },
    "DeploymentTargetResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTargetResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DeploymentTemplateResource": {
      "type": "object",
      "properties": {
        "DeploymentNotes": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDeploymentProcessModified": {
          "type": "boolean"
        },
        "IsLibraryVariableSetModified": {
          "type": "boolean"
        },
        "IsVariableSetModified": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        },
        "TenantPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromomotionTenant"
          }
        }
      }
    },
    "DeploymentTemplateStep": {
      "type": "object",
      "properties": {
        "ActionId": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "ActionNumber": {
          "type": "string"
        },
        "CanBeSkipped": {
          "type": "boolean"
        },
        "ExcludedMachines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "HasNoApplicableMachines": {
          "type": "boolean"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "MachineNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineDeploymentPreview"
          }
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UnavailableMachines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        }
      }
    },
    "DisplayInfo": {
      "type": "object",
      "properties": {
        "ConnectivityCheck": {
          "$ref": "#/definitions/ConnectivityCheck"
        },
        "Description": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "ListApi": {
          "$ref": "#/definitions/ListApiMetadata"
        },
        "Options": {
          "$ref": "#/definitions/OptionsMetadata"
        },
        "PropertyApplicability": {
          "$ref": "#/definitions/PropertyApplicability"
        },
        "ReadOnly": {
          "type": "boolean"
        },
        "Required": {
          "type": "boolean"
        },
        "ShowCopyToClipboard": {
          "type": "boolean"
        }
      }
    },
    "DocumentTypeDocument": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "DynamicExtensionsFeature": {
      "type": "object",
      "properties": {
        "Default": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DynamicExtensionsFeaturesMetadataResource": {
      "type": "object",
      "properties": {
        "Features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynamicExtensionsFeature"
          }
        }
      }
    },
    "DynamicExtensionsFeaturesValuesResource": {
      "type": "object",
      "properties": {
        "Values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DynamicWorkerType": {
      "type": "object",
      "properties": {
        "DeprecationDateUtc": {
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "EndOfLifeDateUtc": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "StartDateUtc": {
          "format": "date-time",
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "EmailPriority": {
      "enum": ["Normal", "Low", "High"],
      "type": "string"
    },
    "EndpointResource": {
      "type": "object",
      "properties": {
        "CommunicationStyle": {
          "$ref": "#/definitions/CommunicationStyle"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EnvironmentResource": {
      "type": "object",
      "properties": {
        "AllowDynamicInfrastructure": {
          "type": "boolean"
        },
        "Description": {
          "type": "string"
        },
        "ExtensionSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionSettingsValues"
          },
          "readOnly": true
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "SpaceId": {
          "type": "string"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        }
      }
    },
    "EnvironmentResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "EnvironmentsSummaryResource": {
      "type": "object",
      "properties": {
        "EnvironmentSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSummaryResource"
          }
        },
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineTenantSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineTenantTagSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "EnvironmentSummaryResource": {
      "type": "object",
      "properties": {
        "Environment": {
          "$ref": "#/definitions/EnvironmentResource"
        },
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineIdsForTentacleUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineTenantSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineTenantTagSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Era": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "Details": {},
        "ErrorMessage": {
          "type": "string"
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FullException": {
          "type": "string"
        },
        "HelpLink": {
          "type": "string"
        },
        "HelpText": {
          "type": "string"
        },
        "ParsedHelpLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EventAgentResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "EventCategoryResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "EventGroupResource": {
      "type": "object",
      "properties": {
        "EventCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "EventNotificationSubscription": {
      "type": "object",
      "properties": {
        "EmailDigestLastProcessed": {
          "format": "date-time",
          "type": "string"
        },
        "EmailDigestLastProcessedEventAutoId": {
          "format": "int64",
          "type": "integer"
        },
        "EmailFrequencyPeriod": {
          "format": "date-span",
          "type": "string"
        },
        "EmailPriority": {
          "$ref": "#/definitions/EmailPriority"
        },
        "EmailShowDatesInTimeZoneId": {
          "type": "string"
        },
        "EmailTeams": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Filter": {
          "$ref": "#/definitions/EventNotificationSubscriptionFilter"
        },
        "WebhookHeaderKey": {
          "type": "string"
        },
        "WebhookHeaderValue": {
          "type": "string"
        },
        "WebhookLastProcessed": {
          "format": "date-time",
          "type": "string"
        },
        "WebhookLastProcessedEventAutoId": {
          "format": "int64",
          "type": "integer"
        },
        "WebhookTeams": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "WebhookTimeout": {
          "format": "date-span",
          "type": "string"
        },
        "WebhookURI": {
          "type": "string"
        }
      }
    },
    "EventNotificationSubscriptionFilter": {
      "type": "object",
      "properties": {
        "DocumentTypes": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Environments": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventAgents": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventCategories": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventGroups": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectGroups": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Projects": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tenants": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Users": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EventReference": {
      "type": "object",
      "properties": {
        "Length": {
          "format": "int32",
          "type": "integer"
        },
        "ReferencedDocumentId": {
          "type": "string"
        },
        "StartIndex": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "EventResource": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string"
        },
        "ChangeDetails": {
          "$ref": "#/definitions/ChangeDetails"
        },
        "Comments": {
          "type": "string"
        },
        "Details": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IdentityEstablishedWith": {
          "type": "string"
        },
        "IsService": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Message": {
          "type": "string"
        },
        "MessageHtml": {
          "type": "string"
        },
        "MessageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventReference"
          }
        },
        "Occurred": {
          "format": "date-time",
          "type": "string"
        },
        "RelatedDocumentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "UserAgent": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        }
      }
    },
    "ExtensionSettingsValues": {
      "type": "object",
      "properties": {
        "ExtensionId": {
          "type": "string"
        },
        "Values": {}
      }
    },
    "ExtensionsInfoResource": {
      "type": "object",
      "properties": {
        "AssemblyName": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsCustom": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "FeaturesConfigurationResource": {
      "type": "object",
      "properties": {
        "HelpSidebarSupportLink": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsActionContainersEnabled": {
          "type": "boolean"
        },
        "IsAzureZipDeployEnabled": {
          "type": "boolean"
        },
        "IsBuiltInWorkerEnabled": {
          "type": "boolean"
        },
        "IsCommunityActionTemplatesEnabled": {
          "type": "boolean"
        },
        "IsConfigurationAsCodeEnabled": {
          "type": "boolean"
        },
        "IsHelpSidebarEnabled": {
          "type": "boolean"
        },
        "IsKubernetesEnabled": {
          "type": "boolean"
        },
        "IsStepUiFrameworkEnabled": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FeedResource": {
      "type": "object",
      "properties": {
        "FeedType": {
          "$ref": "#/definitions/FeedType"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "PackageAcquisitionLocationOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageAcquisitionLocation"
          }
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "FeedResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeedResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "FeedType": {
      "enum": [
        "None",
        "NuGet",
        "Docker",
        "Maven",
        "OctopusProject",
        "GitHub",
        "Helm",
        "AwsElasticContainerRegistry",
        "BuiltIn"
      ],
      "type": "string"
    },
    "Form": {
      "type": "object",
      "properties": {
        "Elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormElement"
          }
        },
        "Values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FormElement": {
      "type": "object",
      "properties": {
        "Control": {
          "$ref": "#/definitions/Control"
        },
        "IsValueRequired": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "GuidedFailureMode": {
      "enum": ["EnvironmentDefault", "Off", "On"],
      "type": "string"
    },
    "HealthCheckType": {
      "enum": ["RunScript", "OnlyConnectivity"],
      "type": "string"
    },
    "IdentityClaimResource": {
      "type": "object",
      "properties": {
        "IsIdentifyingClaim": {
          "type": "boolean"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "IdentityResource": {
      "type": "object",
      "properties": {
        "Claims": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IdentityClaimResource"
          },
          "readOnly": true
        },
        "IdentityProviderName": {
          "type": "string"
        }
      }
    },
    "IdentityType": {
      "enum": ["Guest", "UsernamePassword", "ActiveDirectory", "OAuth"],
      "type": "string"
    },
    "InterruptionResource": {
      "type": "object",
      "properties": {
        "CanTakeResponsibility": {
          "type": "boolean"
        },
        "CorrelationId": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "HasResponsibility": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "IsLinkedToOtherInterruption": {
          "type": "boolean"
        },
        "IsPending": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "RelatedDocumentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResponsibleTeamIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResponsibleUserId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        }
      }
    },
    "InterruptionResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterruptionResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "InvitationResource": {
      "required": ["AddToTeamIds"],
      "type": "object",
      "properties": {
        "AddToTeamIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Expires": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "InvitationCode": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "IsoDayOfWeek": {
      "enum": [
        "None",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"
      ],
      "type": "string"
    },
    "Library": {
      "type": "object",
      "properties": {
        "LibraryVariableSetId": {
          "type": "string"
        },
        "LibraryVariableSetName": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "Variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          }
        }
      }
    },
    "LibraryVariableSetProjectUsage": {
      "type": "object",
      "properties": {
        "IsCurrentlyBeingUsedInProject": {
          "type": "boolean"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetReleaseUsageEntry"
          }
        },
        "RunbookSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetRunbookSnapshotUsageEntry"
          }
        }
      }
    },
    "LibraryVariableSetReleaseUsageEntry": {
      "type": "object",
      "properties": {
        "ReleaseId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        }
      }
    },
    "LibraryVariableSetResource": {
      "type": "object",
      "properties": {
        "ContentType": {
          "$ref": "#/definitions/VariableSetContentType"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "VariableSetId": {
          "type": "string"
        }
      }
    },
    "LibraryVariableSetResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LibraryVariableSetRunbookSnapshotUsageEntry": {
      "type": "object",
      "properties": {
        "SnapshotId": {
          "type": "string"
        },
        "SnapshotName": {
          "type": "string"
        }
      }
    },
    "LibraryVariableSetUsageEntry": {
      "type": "object",
      "properties": {
        "LibraryVariableSetId": {
          "type": "string"
        },
        "LibraryVariableSetName": {
          "type": "string"
        }
      }
    },
    "LibraryVariableSetUsageResource": {
      "type": "object",
      "properties": {
        "CountOfProjectsUserCannotSee": {
          "format": "int32",
          "type": "integer"
        },
        "CountOfReleasesUserCannotSee": {
          "format": "int32",
          "type": "integer"
        },
        "CountOfRunbookSnapshotsUserCannotSee": {
          "format": "int32",
          "type": "integer"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetProjectUsage"
          }
        }
      }
    },
    "LicenseLimitStatusResource": {
      "type": "object",
      "properties": {
        "CurrentUsage": {
          "format": "int32",
          "type": "integer"
        },
        "Disposition": {
          "$ref": "#/definitions/LicenseMessageDisposition"
        },
        "EffectiveLimit": {
          "format": "int32",
          "type": "integer"
        },
        "EffectiveLimitDescription": {
          "type": "string"
        },
        "IsUnlimited": {
          "type": "boolean"
        },
        "Message": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "LicenseMessageDisposition": {
      "enum": ["Information", "Warning", "Error"],
      "type": "string"
    },
    "LicenseMessageResource": {
      "type": "object",
      "properties": {
        "Disposition": {
          "$ref": "#/definitions/LicenseMessageDisposition"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "LicenseResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LicenseText": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SerialNumber": {
          "type": "string"
        }
      }
    },
    "LicenseStatusResource": {
      "type": "object",
      "properties": {
        "ComplianceSummary": {
          "type": "string"
        },
        "DaysToEffectiveExpiryDate": {
          "format": "int32",
          "type": "integer"
        },
        "DoesExpiryBlockKeyActivities": {
          "type": "boolean"
        },
        "EffectiveClusterTaskLimit": {
          "format": "int32",
          "type": "integer"
        },
        "EffectiveExpiryDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "EffectiveNodeTaskLimit": {
          "format": "int32",
          "type": "integer"
        },
        "HostingEnvironment": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsClusterTaskLimitControlledByLicense": {
          "type": "boolean"
        },
        "IsCompliant": {
          "type": "boolean"
        },
        "IsNodeTaskLimitControlledByLicense": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Limits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseLimitStatusResource"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseMessageResource"
          }
        },
        "PermissionsMode": {
          "$ref": "#/definitions/PermissionsMode"
        }
      }
    },
    "LifecycleProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NextDeployments": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "NextDeploymentsMinimumRequired": {
          "format": "int32",
          "type": "integer"
        },
        "Phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseProgressionResource"
          }
        }
      }
    },
    "LifecycleResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseResource"
          },
          "readOnly": true
        },
        "ReleaseRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "SpaceId": {
          "type": "string"
        },
        "TentacleRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        }
      }
    },
    "LifecycleResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifecycleResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ListApiMetadata": {
      "type": "object",
      "properties": {
        "ApiEndpoint": {
          "type": "string"
        },
        "SelectMode": {
          "type": "string"
        }
      }
    },
    "LocalDate": {
      "type": "object",
      "properties": {
        "Calendar": {
          "$ref": "#/definitions/CalendarSystem"
        },
        "Day": {
          "format": "int32",
          "type": "integer"
        },
        "DayOfWeek": {
          "$ref": "#/definitions/IsoDayOfWeek"
        },
        "DayOfYear": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Era": {
          "$ref": "#/definitions/Era"
        },
        "Month": {
          "format": "int32",
          "type": "integer"
        },
        "Year": {
          "format": "int32",
          "type": "integer"
        },
        "YearOfEra": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LoginInitiatedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProviderName": {
          "type": "string"
        },
        "WasLoginInitiated": {
          "type": "boolean"
        }
      }
    },
    "MachineCleanupPolicy": {
      "type": "object",
      "properties": {
        "DeleteMachinesBehavior": {
          "$ref": "#/definitions/DeleteMachinesBehavior"
        },
        "DeleteMachinesElapsedTimeSpan": {
          "format": "date-span",
          "type": "string"
        }
      }
    },
    "MachineConnectionStatus": {
      "type": "object",
      "properties": {
        "CurrentTentacleVersion": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastChecked": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogElement"
          }
        },
        "MachineId": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        }
      }
    },
    "MachineConnectivityBehavior": {
      "enum": ["ExpectedToBeOnline", "MayBeOfflineAndCanBeSkipped"],
      "type": "string"
    },
    "MachineConnectivityPolicy": {
      "type": "object",
      "properties": {
        "MachineConnectivityBehavior": {
          "$ref": "#/definitions/MachineConnectivityBehavior"
        }
      }
    },
    "MachineDeploymentPreview": {
      "type": "object",
      "properties": {
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "HealthStatus": {
          "$ref": "#/definitions/MachineStatus"
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "MachineHealthCheckPolicy": {
      "type": "object",
      "properties": {
        "BashHealthCheckPolicy": {
          "$ref": "#/definitions/MachineScriptPolicy"
        },
        "HealthCheckCron": {
          "type": "string"
        },
        "HealthCheckCronTimezone": {
          "type": "string"
        },
        "HealthCheckInterval": {
          "format": "date-span",
          "type": "string"
        },
        "HealthCheckType": {
          "$ref": "#/definitions/HealthCheckType"
        },
        "PowerShellHealthCheckPolicy": {
          "$ref": "#/definitions/MachineScriptPolicy"
        }
      }
    },
    "MachineModelHealthStatus": {
      "enum": ["Healthy", "Unavailable", "Unknown", "HasWarnings", "Unhealthy"],
      "type": "string"
    },
    "MachineModelStatus": {
      "enum": [
        "Online",
        "Offline",
        "Unknown",
        "NeedsUpgrade",
        "CalamariNeedsUpgrade",
        "Disabled"
      ],
      "type": "string"
    },
    "MachinePolicyResource": {
      "type": "object",
      "properties": {
        "ConnectionConnectTimeout": {
          "format": "date-span",
          "type": "string"
        },
        "ConnectionRetryCountLimit": {
          "format": "int32",
          "type": "integer"
        },
        "ConnectionRetrySleepInterval": {
          "format": "date-span",
          "type": "string"
        },
        "ConnectionRetryTimeLimit": {
          "format": "date-span",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MachineCleanupPolicy": {
          "$ref": "#/definitions/MachineCleanupPolicy"
        },
        "MachineConnectivityPolicy": {
          "$ref": "#/definitions/MachineConnectivityPolicy"
        },
        "MachineHealthCheckPolicy": {
          "$ref": "#/definitions/MachineHealthCheckPolicy"
        },
        "MachineUpdatePolicy": {
          "$ref": "#/definitions/MachineUpdatePolicy"
        },
        "Name": {
          "type": "string"
        },
        "PollingRequestMaximumMessageProcessingTimeout": {
          "format": "date-span",
          "type": "string"
        },
        "PollingRequestQueueTimeout": {
          "format": "date-span",
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "MachinePolicyResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachinePolicyResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MachineResource": {
      "type": "object",
      "properties": {
        "Architecture": {
          "type": "string"
        },
        "Endpoint": {
          "$ref": "#/definitions/EndpointResource"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "HealthStatus": {
          "$ref": "#/definitions/MachineModelHealthStatus"
        },
        "Id": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "IsInProcess": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MachinePolicyId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OperatingSystem": {
          "type": "string"
        },
        "ShellName": {
          "type": "string"
        },
        "ShellVersion": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/MachineModelStatus"
        },
        "StatusSummary": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "Uri": {
          "type": "string"
        }
      }
    },
    "MachineScriptPolicy": {
      "type": "object",
      "properties": {
        "RunType": {
          "$ref": "#/definitions/MachineScriptPolicyRunType"
        },
        "ScriptBody": {
          "type": "string"
        }
      }
    },
    "MachineScriptPolicyRunType": {
      "enum": ["InheritFromDefault", "Inline", "OnlyConnectivity"],
      "type": "string"
    },
    "MachineStatus": {
      "enum": ["Healthy", "HasWarnings", "Unhealthy", "Unavailable"],
      "type": "string"
    },
    "MachineUpdatePolicy": {
      "type": "object",
      "properties": {
        "CalamariUpdateBehavior": {
          "$ref": "#/definitions/CalamariUpdateBehavior"
        },
        "TentacleUpdateAccountId": {
          "type": "string"
        },
        "TentacleUpdateBehavior": {
          "$ref": "#/definitions/TentacleUpdateBehavior"
        }
      }
    },
    "MaintenanceConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsInMaintenanceMode": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeMetadata"
          }
        }
      }
    },
    "MigrationImportResource": {
      "type": "object",
      "properties": {
        "DeletePackageOnCompletion": {
          "type": "boolean"
        },
        "FailureCallbackUri": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDryRun": {
          "type": "boolean"
        },
        "IsEncryptedPackage": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "OverwriteExisting": {
          "type": "boolean"
        },
        "PackageFeedSpaceId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageVersion": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "SuccessCallbackUri": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        }
      }
    },
    "MigrationPartialExportResource": {
      "type": "object",
      "properties": {
        "DestinationApiKey": {
          "type": "string"
        },
        "DestinationPackageFeed": {
          "type": "string"
        },
        "DestinationPackageFeedSpaceId": {
          "type": "string"
        },
        "EncryptPackage": {
          "type": "boolean"
        },
        "FailureCallbackUri": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IgnoreCertificates": {
          "type": "boolean"
        },
        "IgnoreDeployments": {
          "type": "boolean"
        },
        "IgnoreMachines": {
          "type": "boolean"
        },
        "IgnoreTenants": {
          "type": "boolean"
        },
        "IncludeTaskLogs": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PackageId": {
          "type": "string"
        },
        "PackageVersion": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "Projects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "SuccessCallbackUri": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        }
      }
    },
    "MissingVariableResource": {
      "type": "object",
      "properties": {
        "EnvironmentId": {
          "type": "string"
        },
        "LibraryVariableSetId": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "VariableTemplateId": {
          "type": "string"
        },
        "VariableTemplateName": {
          "type": "string"
        }
      }
    },
    "MultiTenancyStatusResource": {
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "NamedReferenceItem": {
      "type": "object",
      "properties": {
        "DisplayIdAndName": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "NumericReportData": {
      "type": "object",
      "properties": {
        "Labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Series": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumericReportSeries"
          }
        }
      }
    },
    "NumericReportSeries": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "Label": {
          "type": "string"
        }
      }
    },
    "OctopusPackageMetadataMappedResource": {
      "type": "object",
      "properties": {
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IncompleteDataWarning": {
          "type": "string"
        },
        "IssueTrackerName": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PackageId": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        }
      }
    },
    "OctopusPackageVersionBuildInformationMappedResource": {
      "type": "object",
      "properties": {
        "Branch": {
          "type": "string"
        },
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IncompleteDataWarning": {
          "type": "string"
        },
        "IssueTrackerName": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PackageId": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        }
      }
    },
    "OctopusPackageVersionBuildInformationMappedResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OctopusServerNodeDetailsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "RunningTasks": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OctopusServerNodeResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsInMaintenanceMode": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MaxConcurrentTasks": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "OctopusServerNodeResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OctopusServerNodeResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OnboardingResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OnboardingTaskResource"
          }
        }
      }
    },
    "OnboardingTaskResource": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string"
        },
        "IsComplete": {
          "type": "boolean"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OptionsMetadata": {
      "type": "object",
      "properties": {
        "SelectMode": {
          "type": "string"
        },
        "Values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageAcquisitionLocation": {
      "enum": ["Server", "ExecutionTarget", "NotAcquired"],
      "type": "string"
    },
    "PackageDescriptionResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LatestVersion": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "PackageDescriptionResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageDescriptionResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "PackageFromBuiltInFeedResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "FileExtension": {
          "type": "string"
        },
        "Hash": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageSizeBytes": {
          "format": "int64",
          "type": "integer"
        },
        "PackageVersionBuildInformation": {
          "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
        },
        "Published": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "Summary": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "PackageNote": {
      "type": "object",
      "properties": {
        "FeedId": {
          "type": "string"
        },
        "Notes": {
          "$ref": "#/definitions/PackageNotesResult"
        },
        "PackageId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "PackageNoteListResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageNote"
          }
        }
      }
    },
    "PackageNotesResult": {
      "type": "object",
      "properties": {
        "DisplayMessage": {
          "type": "string",
          "readOnly": true
        },
        "FailureReason": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "Succeeded": {
          "type": "boolean"
        }
      }
    },
    "PackageReference": {
      "type": "object",
      "properties": {
        "AcquisitionLocation": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "FileExtension": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageVersionBuildInformation": {
          "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
        },
        "Published": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "Summary": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "PackageResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "PackageSignatureResource": {
      "type": "object",
      "properties": {
        "BaseVersion": {
          "type": "string"
        },
        "Signature": {
          "format": "byte",
          "type": "string"
        }
      }
    },
    "PackageVersionResource": {
      "type": "object",
      "properties": {
        "FeedId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PackageId": {
          "type": "string"
        },
        "Published": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "SizeBytes": {
          "format": "int64",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "PackageVersionResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageVersionResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "PerformanceConfigurationResource": {
      "type": "object",
      "properties": {
        "DefaultDashboardRenderMode": {
          "$ref": "#/definitions/DashboardRenderMode"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Permission": {
      "enum": [
        "AdministerSystem",
        "ProjectEdit",
        "ProjectView",
        "ProjectCreate",
        "ProjectDelete",
        "ProcessView",
        "ProcessEdit",
        "VariableEdit",
        "VariableEditUnscoped",
        "VariableView",
        "VariableViewUnscoped",
        "ReleaseCreate",
        "ReleaseView",
        "ReleaseEdit",
        "ReleaseDelete",
        "DefectReport",
        "DefectResolve",
        "DeploymentCreate",
        "DeploymentDelete",
        "DeploymentView",
        "EnvironmentView",
        "EnvironmentCreate",
        "EnvironmentEdit",
        "EnvironmentDelete",
        "MachineCreate",
        "MachineEdit",
        "MachineView",
        "MachineDelete",
        "ArtifactView",
        "ArtifactCreate",
        "ArtifactEdit",
        "ArtifactDelete",
        "FeedView",
        "EventView",
        "LibraryVariableSetView",
        "LibraryVariableSetCreate",
        "LibraryVariableSetEdit",
        "LibraryVariableSetDelete",
        "ProjectGroupView",
        "ProjectGroupCreate",
        "ProjectGroupEdit",
        "ProjectGroupDelete",
        "TeamCreate",
        "TeamView",
        "TeamEdit",
        "TeamDelete",
        "UserView",
        "UserInvite",
        "UserRoleView",
        "UserRoleEdit",
        "TaskView",
        "TaskCreate",
        "TaskCancel",
        "TaskEdit",
        "InterruptionView",
        "InterruptionSubmit",
        "InterruptionViewSubmitResponsible",
        "BuiltInFeedPush",
        "BuiltInFeedAdminister",
        "BuiltInFeedDownload",
        "ActionTemplateView",
        "ActionTemplateCreate",
        "ActionTemplateEdit",
        "ActionTemplateDelete",
        "LifecycleCreate",
        "LifecycleView",
        "LifecycleEdit",
        "LifecycleDelete",
        "AccountView",
        "AccountEdit",
        "AccountCreate",
        "AccountDelete",
        "TenantCreate",
        "TenantEdit",
        "TenantView",
        "TenantDelete",
        "TagSetCreate",
        "TagSetEdit",
        "TagSetDelete",
        "MachinePolicyCreate",
        "MachinePolicyView",
        "MachinePolicyEdit",
        "MachinePolicyDelete",
        "ProxyCreate",
        "ProxyView",
        "ProxyEdit",
        "ProxyDelete",
        "SubscriptionCreate",
        "SubscriptionView",
        "SubscriptionEdit",
        "SubscriptionDelete",
        "TriggerCreate",
        "TriggerView",
        "TriggerEdit",
        "TriggerDelete",
        "CertificateView",
        "CertificateCreate",
        "CertificateEdit",
        "CertificateDelete",
        "CertificateExportPrivateKey",
        "UserEdit",
        "ConfigureServer",
        "FeedEdit",
        "WorkerView",
        "WorkerEdit",
        "SpaceEdit",
        "SpaceView",
        "SpaceDelete",
        "SpaceCreate",
        "BuildInformationPush",
        "BuildInformationAdminister",
        "RunbookView",
        "RunbookEdit",
        "RunbookRunView",
        "RunbookRunDelete",
        "RunbookRunCreate"
      ],
      "type": "string"
    },
    "PermissionDescription": {
      "type": "object",
      "properties": {
        "CanApplyAtSpaceLevel": {
          "type": "boolean",
          "readOnly": true
        },
        "CanApplyAtSystemLevel": {
          "type": "boolean",
          "readOnly": true
        },
        "Description": {
          "type": "string"
        },
        "SupportedRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermissionsMode": {
      "enum": ["Unspecified", "Restricted", "Full"],
      "type": "string"
    },
    "PersistenceSettingsResource": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/PersistenceSettingsType"
        }
      }
    },
    "PersistenceSettingsType": {
      "enum": ["Database", "VersionControlled"],
      "type": "string"
    },
    "PhaseDeploymentResource": {
      "type": "object",
      "properties": {
        "Deployment": {
          "$ref": "#/definitions/DeploymentResource"
        },
        "Task": {
          "$ref": "#/definitions/TaskResource"
        }
      }
    },
    "PhaseProgress": {
      "enum": ["Pending", "Current", "Complete"],
      "type": "string"
    },
    "PhaseProgressionResource": {
      "type": "object",
      "properties": {
        "AutomaticDeploymentTargets": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Blocked": {
          "type": "boolean"
        },
        "Deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseDeploymentResource"
          }
        },
        "Id": {
          "type": "string"
        },
        "IsOptionalPhase": {
          "type": "boolean"
        },
        "MinimumEnvironmentsBeforePromotion": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "OptionalDeploymentTargets": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Progress": {
          "$ref": "#/definitions/PhaseProgress"
        }
      }
    },
    "PhaseResource": {
      "type": "object",
      "properties": {
        "AutomaticDeploymentTargets": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "IsOptionalPhase": {
          "type": "boolean"
        },
        "MinimumEnvironmentsBeforePromotion": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "OptionalDeploymentTargets": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReleaseRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        }
      }
    },
    "ProcessReferenceDataItem": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ProcessType": {
          "$ref": "#/definitions/ProcessType"
        }
      }
    },
    "ProcessType": {
      "enum": ["Deployment", "Runbook"],
      "type": "string"
    },
    "ProgressionResource": {
      "type": "object",
      "properties": {
        "ChannelEnvironments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReferenceDataItem"
            }
          }
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseProgressionResource"
          }
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "Variables": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/PropertyValueResource"
            }
          }
        }
      }
    },
    "ProjectedTeamReferenceDataItem": {
      "type": "object",
      "properties": {
        "ExternalSecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedReferenceItem"
          }
        },
        "Id": {
          "type": "string"
        },
        "IsDirectlyAssigned": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "ProjectGroupResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "EnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "RetentionPolicyId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "ProjectGroupResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectGroupResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ProjectResource": {
      "type": "object",
      "properties": {
        "AutoCreateRelease": {
          "type": "boolean"
        },
        "AutoDeployReleaseOverrides": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoDeployReleaseOverrideResource"
          },
          "readOnly": true
        },
        "ClonedFromProjectId": {
          "type": "string"
        },
        "DefaultGuidedFailureMode": {
          "$ref": "#/definitions/GuidedFailureMode"
        },
        "DefaultToSkipIfAlreadyInstalled": {
          "type": "boolean"
        },
        "DeploymentChangesTemplate": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "DiscreteChannelRelease": {
          "type": "boolean"
        },
        "ExtensionSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionSettingsValues"
          },
          "readOnly": true
        },
        "Id": {
          "type": "string"
        },
        "IncludedLibraryVariableSetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "IsVersionControlled": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LifecycleId": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "PersistenceSettings": {
          "$ref": "#/definitions/PersistenceSettingsResource"
        },
        "ProjectConnectivityPolicy": {
          "$ref": "#/definitions/DeploymentConnectivityPolicy"
        },
        "ProjectGroupId": {
          "type": "string"
        },
        "ReleaseCreationStrategy": {
          "$ref": "#/definitions/ReleaseCreationStrategyResource"
        },
        "ReleaseNotesTemplate": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "TenantedDeploymentMode": {
          "$ref": "#/definitions/TenantedDeploymentMode"
        },
        "VariableSetId": {
          "type": "string"
        },
        "VersioningStrategy": {
          "$ref": "#/definitions/VersioningStrategyResource"
        }
      }
    },
    "ProjectResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ProjectSettingsMetadata": {
      "type": "object",
      "properties": {
        "ExtensionId": {
          "type": "string"
        },
        "Metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "ProjectSummary": {
      "type": "object",
      "properties": {
        "HasDeploymentProcess": {
          "type": "boolean"
        },
        "HasRunbooks": {
          "type": "boolean"
        }
      }
    },
    "ProjectTriggerResource": {
      "type": "object",
      "properties": {
        "Action": {
          "$ref": "#/definitions/TriggerActionResource"
        },
        "Description": {
          "type": "string"
        },
        "Filter": {
          "$ref": "#/definitions/TriggerFilterResource"
        },
        "Id": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "ProjectTriggerResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectTriggerResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ProjectVariableSetUsage": {
      "type": "object",
      "properties": {
        "IsCurrentlyBeingUsedInProject": {
          "type": "boolean"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsageEntry"
          }
        },
        "RunbookSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotUsageEntry"
          }
        }
      }
    },
    "PropertyApplicability": {
      "type": "object",
      "properties": {
        "DependsOnPropertyName": {
          "type": "string"
        },
        "DependsOnPropertyValue": {},
        "Mode": {
          "$ref": "#/definitions/PropertyApplicabilityMode"
        }
      }
    },
    "PropertyApplicabilityMode": {
      "enum": [
        "ApplicableIfHasAnyValue",
        "ApplicableIfHasNoValue",
        "ApplicableIfSpecificValue",
        "ApplicableIfNotSpecificValue"
      ],
      "type": "string"
    },
    "PropertyMetadata": {
      "type": "object",
      "properties": {
        "DisplayInfo": {
          "$ref": "#/definitions/DisplayInfo"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "PropertyValueResource": {
      "type": "object",
      "properties": {
        "IsSensitive": {
          "type": "boolean"
        },
        "SensitiveValue": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "ProxyResource": {
      "type": "object",
      "properties": {
        "Host": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Password": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "Port": {
          "format": "int32",
          "type": "integer"
        },
        "ProxyType": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        }
      }
    },
    "ProxyResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProxyResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ReferenceDataItem": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ReleaseChanges": {
      "type": "object",
      "properties": {
        "BuildInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleasePackageVersionBuildInformation"
          }
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        }
      }
    },
    "ReleaseCreationStrategyResource": {
      "type": "object",
      "properties": {
        "ChannelId": {
          "type": "string"
        },
        "ReleaseCreationPackage": {
          "$ref": "#/definitions/DeploymentActionPackageResource"
        }
      },
      "additionalProperties": {}
    },
    "ReleasePackageVersionBuildInformation": {
      "type": "object",
      "properties": {
        "Branch": {
          "type": "string"
        },
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        },
        "PackageId": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        }
      }
    },
    "ReleasePackageVersionBuildInformationResource": {
      "type": "object",
      "properties": {
        "Branch": {
          "type": "string"
        },
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        },
        "IssueTrackerName": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        }
      }
    },
    "ReleaseProgressionResource": {
      "type": "object",
      "properties": {
        "Channel": {
          "$ref": "#/definitions/ChannelResource"
        },
        "Deployments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DashboardItemResource"
            }
          }
        },
        "HasUnresolvedDefect": {
          "type": "boolean"
        },
        "NextDeployments": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Release": {
          "$ref": "#/definitions/ReleaseResource"
        },
        "ReleaseRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        }
      }
    },
    "ReleaseResource": {
      "required": ["Version"],
      "type": "object",
      "properties": {
        "Assembled": {
          "format": "date-time",
          "type": "string"
        },
        "BuildInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleasePackageVersionBuildInformationResource"
          }
        },
        "ChannelId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IgnoreChannelRules": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LibraryVariableSetSnapshotIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectDeploymentProcessSnapshotId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectVariableSetSnapshotId": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "SelectedPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectedPackage"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "Version": {
          "maxLength": 349,
          "minLength": 0,
          "type": "string"
        },
        "VersionControlReference": {
          "$ref": "#/definitions/VersionControlReferenceResource"
        }
      }
    },
    "ReleaseResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ReleaseTemplatePackage": {
      "type": "object",
      "properties": {
        "ActionName": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "FeedName": {
          "type": "string"
        },
        "IsResolvable": {
          "type": "boolean"
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "NuGetFeedName": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageReferenceName": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "StepName": {
          "type": "string"
        },
        "VersionSelectedLastRelease": {
          "type": "string"
        }
      }
    },
    "ReleaseTemplateResource": {
      "type": "object",
      "properties": {
        "DeploymentProcessId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastReleaseVersion": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NextVersionIncrement": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTemplatePackage"
          }
        },
        "VersioningPackageReferenceName": {
          "type": "string"
        },
        "VersioningPackageStepName": {
          "type": "string"
        }
      }
    },
    "ReleaseUsage": {
      "type": "object",
      "properties": {
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsageEntry"
          }
        }
      }
    },
    "ReleaseUsageEntry": {
      "type": "object",
      "properties": {
        "ReleaseId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        }
      }
    },
    "ReportDeploymentCountOverTimeResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "ReportData": {
          "$ref": "#/definitions/NumericReportData"
        }
      }
    },
    "RetentionPeriod": {
      "type": "object",
      "properties": {
        "QuantityToKeep": {
          "format": "int32",
          "type": "integer"
        },
        "ShouldKeepForever": {
          "type": "boolean",
          "readOnly": true
        },
        "Unit": {
          "$ref": "#/definitions/RetentionUnit"
        }
      }
    },
    "RetentionUnit": {
      "enum": ["Days", "Items"],
      "type": "string"
    },
    "RootResource": {
      "type": "object",
      "properties": {
        "ApiVersion": {
          "type": "string"
        },
        "Application": {
          "type": "string"
        },
        "HasLongTermSupport": {
          "type": "boolean",
          "readOnly": true
        },
        "Id": {
          "type": "string"
        },
        "InstallationId": {
          "format": "uuid",
          "type": "string"
        },
        "IsEarlyAccessProgram": {
          "default": false,
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "RunbookEnvironmentScope": {
      "enum": ["All", "Specified", "FromProjectLifecycles"],
      "type": "string"
    },
    "RunbookProcessResource": {
      "required": ["Version"],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastSnapshotId": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentStepResource"
          },
          "readOnly": true
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RunbookProcessResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookProcessResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RunbookResource": {
      "type": "object",
      "properties": {
        "ConnectivityPolicy": {
          "$ref": "#/definitions/DeploymentConnectivityPolicy"
        },
        "DefaultGuidedFailureMode": {
          "$ref": "#/definitions/GuidedFailureMode"
        },
        "Description": {
          "type": "string"
        },
        "Environments": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "EnvironmentScope": {
          "$ref": "#/definitions/RunbookEnvironmentScope"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MultiTenancyMode": {
          "$ref": "#/definitions/TenantedDeploymentMode"
        },
        "Name": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "PublishedRunbookSnapshotId": {
          "type": "string"
        },
        "RunbookProcessId": {
          "type": "string"
        },
        "RunRetentionPolicy": {
          "$ref": "#/definitions/RunbookRetentionPeriod"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "RunbookResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RunbookRetentionPeriod": {
      "type": "object",
      "properties": {
        "QuantityToKeep": {
          "format": "int32",
          "type": "integer"
        },
        "ShouldKeepForever": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "RunbookRunPreviewResource": {
      "type": "object",
      "properties": {
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "StepsToExecute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTemplateStep"
          }
        },
        "UseGuidedFailureModeByDefault": {
          "type": "boolean"
        }
      }
    },
    "RunbookRunResource": {
      "required": ["EnvironmentId", "RunbookId", "RunbookSnapshotId"],
      "type": "object",
      "properties": {
        "Comments": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "DeployedBy": {
          "type": "string"
        },
        "DeployedById": {
          "type": "string"
        },
        "DeployedToMachineIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnvironmentId": {
          "type": "string"
        },
        "ExcludedMachineIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FailureEncountered": {
          "type": "boolean"
        },
        "ForcePackageDownload": {
          "type": "boolean"
        },
        "FormValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "FrozenRunbookProcessId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ManifestVariableSetId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "RunbookSnapshotId": {
          "type": "string"
        },
        "SkipActions": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "SpecificMachineIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TaskId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "TentacleRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        }
      }
    },
    "RunbookRunResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookRunResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RunbookRunTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsLibraryVariableSetModified": {
          "type": "boolean"
        },
        "IsRunbookProcessModified": {
          "type": "boolean"
        },
        "IsVariableSetModified": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        },
        "TenantPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromomotionTenant"
          }
        }
      }
    },
    "RunbooksDashboardItemResource": {
      "type": "object",
      "properties": {
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "IsCompleted": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectId": {
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "RunbookSnapshotId": {
          "type": "string"
        },
        "RunbookSnapshotName": {
          "type": "string"
        },
        "RunbookSnapshotNotes": {
          "type": "string"
        },
        "RunBy": {
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/TaskState"
        },
        "TaskId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        }
      }
    },
    "RunbooksDashboardItemResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbooksDashboardItemResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RunbookSnapshotResource": {
      "type": "object",
      "properties": {
        "Assembled": {
          "format": "date-time",
          "type": "string"
        },
        "FrozenProjectVariableSetId": {
          "type": "string"
        },
        "FrozenRunbookProcessId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LibraryVariableSetSnapshotIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectVariableSetSnapshotId": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "SelectedPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectedPackage"
          }
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "RunbookSnapshotResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RunbookSnapshotTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NextNameIncrement": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTemplatePackage"
          }
        },
        "RunbookId": {
          "type": "string"
        },
        "RunbookProcessId": {
          "type": "string"
        }
      }
    },
    "RunbookSnapshotUsage": {
      "type": "object",
      "properties": {
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "RunbookName": {
          "type": "string"
        },
        "Snapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotUsageEntry"
          }
        }
      }
    },
    "RunbookSnapshotUsageEntry": {
      "type": "object",
      "properties": {
        "SnapshotId": {
          "type": "string"
        },
        "SnapshotName": {
          "type": "string"
        }
      }
    },
    "RunbooksProgressionResource": {
      "type": "object",
      "properties": {
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "RunbookRuns": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RunbooksDashboardItemResource"
            }
          }
        }
      }
    },
    "RunbookStepUsage": {
      "type": "object",
      "properties": {
        "ProcessId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "RunbookName": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsageEntry"
          }
        }
      }
    },
    "ScheduledTaskDetailsResource": {
      "type": "object",
      "properties": {
        "ActivityLog": {
          "$ref": "#/definitions/ActivityLogTreeNode"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ScheduledTaskStatusResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "SchedulerStatusResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsRunning": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TaskStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledTaskStatusResource"
          }
        }
      }
    },
    "ScopedUserRoleResource": {
      "type": "object",
      "properties": {
        "EnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectGroupIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ProjectIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "SpaceId": {
          "type": "string"
        },
        "TeamId": {
          "type": "string"
        },
        "TenantIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "UserRoleId": {
          "type": "string"
        }
      }
    },
    "ScopedUserRoleResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopedUserRoleResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SelectedPackage": {
      "type": "object",
      "properties": {
        "ActionName": {
          "type": "string"
        },
        "PackageReferenceName": {
          "type": "string"
        },
        "StepName": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "SensitiveValue": {
      "type": "object",
      "properties": {
        "HasValue": {
          "type": "boolean"
        },
        "Hint": {
          "type": "string"
        },
        "NewValue": {
          "type": "string"
        }
      }
    },
    "ServerConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ServerUri": {
          "type": "string"
        }
      }
    },
    "ServerConfigurationSettingsResource": {
      "type": "object",
      "properties": {
        "ConfigurationSet": {
          "type": "string"
        },
        "ConfigurationValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServerConfigurationValueResource"
          }
        }
      }
    },
    "ServerConfigurationValueResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "Value": {}
      }
    },
    "ServerStatusHealthResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsCompliantWithLicense": {
          "type": "boolean"
        },
        "IsEntireClusterDrainingTasks": {
          "type": "boolean"
        },
        "IsEntireClusterReadOnly": {
          "type": "boolean"
        },
        "IsOperatingNormally": {
          "type": "boolean",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServerTimezoneResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsLocal": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "SkipMachineBehavior": {
      "enum": ["None", "SkipUnavailableMachines"],
      "type": "string"
    },
    "SmtpIsConfiguredResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsConfigured": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SpaceResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SpaceManagersTeamMembers": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceManagersTeams": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TaskQueueStopped": {
          "type": "boolean"
        }
      }
    },
    "SpaceResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SpaceRootResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SpaceSearchResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "StepUsage": {
      "type": "object",
      "properties": {
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsageEntry"
          }
        }
      }
    },
    "StepUsageEntry": {
      "type": "object",
      "properties": {
        "StepId": {
          "type": "string"
        },
        "StepName": {
          "type": "string"
        }
      }
    },
    "SubscriptionResource": {
      "type": "object",
      "properties": {
        "EventNotificationSubscription": {
          "$ref": "#/definitions/EventNotificationSubscription"
        },
        "Id": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/SubscriptionType"
        }
      }
    },
    "SubscriptionResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SubscriptionType": {
      "enum": ["Event"],
      "type": "string"
    },
    "TagResource": {
      "type": "object",
      "properties": {
        "CanonicalTagName": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TagSetResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "SpaceId": {
          "type": "string"
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagResource"
          }
        }
      }
    },
    "TagSetResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagSetResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TagTestResult": {
      "type": "object",
      "properties": {
        "IsMatched": {
          "type": "boolean"
        },
        "MissingTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Reason": {
          "type": "string"
        }
      }
    },
    "TargetUsageEntry": {
      "type": "object",
      "properties": {
        "TargetId": {
          "type": "string"
        },
        "TargetName": {
          "type": "string"
        }
      }
    },
    "TaskDetailsResource": {
      "type": "object",
      "properties": {
        "ActivityLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogTreeNode"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PhysicalLogSize": {
          "format": "int64",
          "type": "integer"
        },
        "Progress": {
          "$ref": "#/definitions/TaskProgress"
        },
        "Task": {
          "$ref": "#/definitions/TaskResource"
        }
      }
    },
    "TaskProgress": {
      "type": "object",
      "properties": {
        "EstimatedTimeRemaining": {
          "type": "string"
        },
        "ProgressPercentage": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TaskResource": {
      "type": "object",
      "properties": {
        "Arguments": {
          "type": "object",
          "additionalProperties": {}
        },
        "CanRerun": {
          "type": "boolean"
        },
        "Completed": {
          "type": "string"
        },
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "FinishedSuccessfully": {
          "type": "boolean",
          "readOnly": true
        },
        "HasBeenPickedUpByProcessor": {
          "type": "boolean"
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "IsCompleted": {
          "type": "boolean",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "ServerNode": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/TaskState"
        }
      }
    },
    "TaskResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TaskState": {
      "enum": [
        "Queued",
        "Executing",
        "Failed",
        "Canceled",
        "TimedOut",
        "Success",
        "Cancelling"
      ],
      "type": "string"
    },
    "TaskTypeResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "TeamMembership": {
      "type": "object",
      "properties": {
        "ExternalSecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedReferenceItem"
          }
        },
        "IsDirectlyAssigned": {
          "type": "boolean"
        },
        "SpaceId": {
          "type": "string"
        },
        "TeamId": {
          "type": "string"
        },
        "TeamName": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "TeamResource": {
      "type": "object",
      "properties": {
        "CanBeDeleted": {
          "type": "boolean"
        },
        "CanBeRenamed": {
          "type": "boolean"
        },
        "CanChangeMembers": {
          "type": "boolean"
        },
        "CanChangeRoles": {
          "type": "boolean"
        },
        "Description": {
          "type": "string"
        },
        "ExternalSecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedReferenceItem"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MemberUserIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "TeamResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TenantedDeploymentMode": {
      "enum": ["Untenanted", "TenantedOrUntenanted", "Tenanted"],
      "type": "string"
    },
    "TenantResource": {
      "type": "object",
      "properties": {
        "ClonedFromTenantId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "ProjectEnvironments": {
          "type": "object",
          "additionalProperties": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "TenantTags": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TenantResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TenantResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TenantsMissingVariablesResource": {
      "type": "object",
      "properties": {
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "MissingVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MissingVariableResource"
          }
        },
        "TenantId": {
          "type": "string"
        }
      }
    },
    "TenantVariableResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LibraryVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Library"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProjectVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Project"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "TenantName": {
          "type": "string"
        }
      }
    },
    "TentacleUpdateBehavior": {
      "enum": ["NeverUpdate", "Update"],
      "type": "string"
    },
    "TriggerActionResource": {
      "type": "object",
      "properties": {
        "ActionType": {
          "$ref": "#/definitions/TriggerActionType"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TriggerActionType": {
      "enum": [
        "AutoDeploy",
        "DeployLatestRelease",
        "DeployNewRelease",
        "RunRunbook"
      ],
      "type": "string"
    },
    "TriggerFilterResource": {
      "type": "object",
      "properties": {
        "FilterType": {
          "$ref": "#/definitions/TriggerFilterType"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TriggerFilterType": {
      "enum": [
        "MachineFilter",
        "DailySchedule",
        "DaysPerWeekSchedule",
        "DaysPerMonthSchedule",
        "CronExpressionSchedule",
        "OnceDailySchedule",
        "ContinuousDailySchedule"
      ],
      "type": "string"
    },
    "TypeMetadata": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyMetadata"
          }
        }
      }
    },
    "UserAuthenticationResource": {
      "type": "object",
      "properties": {
        "AuthenticationProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationProviderElement"
          }
        },
        "CanCurrentUserEditIdentitiesForUser": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserPermissionRestriction": {
      "type": "object",
      "properties": {
        "RestrictedToEnvironmentIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToProjectGroupIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToProjectIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToTenantIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "UserPermissionSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsPermissionsComplete": {
          "type": "boolean"
        },
        "IsTeamsComplete": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SpacePermissions": {
          "type": "object",
          "properties": {
            "AdministerSystem": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProcessView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProcessEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableEditUnscoped": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableViewUnscoped": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DefectReport": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DefectResolve": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "FeedView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EventView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserInvite": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserRoleView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserRoleEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskCancel": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionSubmit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionViewSubmitResponsible": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedPush": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedAdminister": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedDownload": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateExportPrivateKey": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ConfigureServer": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "FeedEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "WorkerView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "WorkerEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuildInformationPush": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuildInformationAdminister": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookRunView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookRunDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookRunCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            }
          }
        },
        "SystemPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "Teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectedTeamReferenceDataItem"
          }
        }
      }
    },
    "UserResource": {
      "required": ["DisplayName"],
      "type": "object",
      "properties": {
        "CanPasswordBeEdited": {
          "type": "boolean"
        },
        "DisplayName": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "EmailAddress": {
          "format": "email",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityResource"
          }
        },
        "IsActive": {
          "type": "boolean"
        },
        "IsRequestor": {
          "type": "boolean"
        },
        "IsService": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Password": {
          "type": "string"
        },
        "Username": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "UserResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UserRoleResource": {
      "type": "object",
      "properties": {
        "CanBeDeleted": {
          "type": "boolean"
        },
        "Description": {
          "type": "string"
        },
        "GrantedSpacePermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "GrantedSystemPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SpacePermissionDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SupportedRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SystemPermissionDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserRoleResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "VariablePromptOptions": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "DisplaySettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Label": {
          "type": "string"
        },
        "Required": {
          "type": "boolean"
        }
      }
    },
    "VariableResource": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsEditable": {
          "type": "boolean"
        },
        "IsSensitive": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Prompt": {
          "$ref": "#/definitions/VariablePromptOptions"
        },
        "Scope": {
          "type": "object",
          "properties": {
            "Project": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Environment": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Machine": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Role": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "TargetRole": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Action": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "User": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Trigger": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ParentDeployment": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Private": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Channel": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "TenantTag": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Tenant": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ProcessOwner": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "Type": {
          "$ref": "#/definitions/VariableType"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "VariableScopeValues": {
      "type": "object",
      "properties": {
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessReferenceDataItem"
          }
        },
        "Roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        }
      }
    },
    "VariableSetContentType": {
      "enum": ["Variables", "ScriptModule"],
      "type": "string"
    },
    "VariableSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "OwnerId": {
          "type": "string"
        },
        "ScopeValues": {
          "$ref": "#/definitions/VariableScopeValues"
        },
        "SpaceId": {
          "type": "string"
        },
        "Variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableResource"
          }
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "VariablesScopedToEnvironmentResponse": {
      "type": "object",
      "properties": {
        "HasUnauthorizedLibraryVariableSetVariables": {
          "type": "boolean"
        },
        "HasUnauthorizedProjectVariables": {
          "type": "boolean"
        },
        "VariableMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      }
    },
    "VariableType": {
      "type": "object",
      "properties": {
        "Value": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VersionControlReferenceResource": {
      "type": "object",
      "properties": {
        "GitCommit": {
          "type": "string"
        },
        "GitRef": {
          "type": "string"
        }
      }
    },
    "VersioningStrategyResource": {
      "type": "object",
      "properties": {
        "DonorPackage": {
          "$ref": "#/definitions/DeploymentActionPackageResource"
        },
        "Template": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "WorkerPoolDynamicWorkerTypesResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "WorkerTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynamicWorkerType"
          }
        }
      }
    },
    "WorkerPoolResource": {
      "type": "object",
      "properties": {
        "CanAddWorkers": {
          "type": "boolean"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "SpaceId": {
          "type": "string"
        },
        "WorkerPoolType": {
          "$ref": "#/definitions/WorkerPoolType"
        }
      }
    },
    "WorkerPoolResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerPoolResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "WorkerPoolsSummaryResource": {
      "type": "object",
      "properties": {
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineIdsForTentacleUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        },
        "WorkerPoolSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerPoolSummaryResource"
          }
        }
      }
    },
    "WorkerPoolSummaryResource": {
      "type": "object",
      "properties": {
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineIdsForTentacleUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        },
        "WorkerPool": {
          "$ref": "#/definitions/WorkerPoolResource"
        }
      }
    },
    "WorkerPoolSupportedTypesResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SupportedPoolTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerPoolType"
          }
        }
      }
    },
    "WorkerPoolType": {
      "enum": ["StaticWorkerPool", "DynamicWorkerPool"],
      "type": "string"
    },
    "WorkerResource": {
      "type": "object",
      "properties": {
        "Architecture": {
          "type": "string"
        },
        "Endpoint": {
          "$ref": "#/definitions/EndpointResource"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "HealthStatus": {
          "$ref": "#/definitions/MachineModelHealthStatus"
        },
        "Id": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "IsInProcess": {
          "type": "boolean"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MachinePolicyId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OperatingSystem": {
          "type": "string"
        },
        "ShellName": {
          "type": "string"
        },
        "ShellVersion": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/MachineModelStatus"
        },
        "StatusSummary": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "Uri": {
          "type": "string"
        },
        "WorkerPoolIds": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkerResourceCollection": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerResource"
          }
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "WorkItemLink": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "LinkUrl": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        }
      }
    },
    "X509Certificate": {
      "type": "object",
      "properties": {
        "IssuerDistinguishedName": {
          "type": "string"
        },
        "NotAfter": {
          "format": "date-time",
          "type": "string"
        },
        "NotBefore": {
          "format": "date-time",
          "type": "string"
        },
        "SerialNumber": {
          "type": "string"
        },
        "SignatureAlgorithmName": {
          "type": "string"
        },
        "SubjectDistinguishedName": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-Octopus-ApiKey",
      "in": "header"
    },
    "APIKeyQuery": {
      "type": "apiKey",
      "name": "ApiKey",
      "in": "query"
    },
    "NugetApiKeyHeader": {
      "type": "apiKey",
      "name": "X-NuGet-ApiKey",
      "in": "header"
    }
  },
  "security": [
    {
      "APIKeyHeader": []
    },
    {
      "APIKeyQuery": []
    },
    {
      "NugetApiKeyHeader": []
    }
  ],
  "externalDocs": {
    "description": "Further API Documentation",
    "url": "https://g.octopushq.com/ApiDocs"
  }
}
